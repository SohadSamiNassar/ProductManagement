<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AntDesign</name>
    </assembly>
    <members>
        <member name="T:AntDesign.Affix">
                <summary>
                <para>Wrap Affix around another component to make it stick the viewport.</para>
                <h2>When To Use</h2>
                <list type="bullet">
                    <item>On longer web pages, its helpful for some content to stick to the viewport. This is common for menus and actions.</item>
                    <item>Please note that Affix should not cover other content on the page, especially when the size of the viewport is small.</item>
                </list>
                <para><strong>Important</strong>: Children of <c>Affix</c> must not have the property <c>position: absolute</c>, but you can set <c>position: absolute</c> on <c>Affix</c> itself</para>
                </summary> 
        </member>
        <member name="P:AntDesign.Affix.OffsetBottom">
            <summary>
            Offset from the bottom of the viewport (in pixels)
            </summary>
        </member>
        <member name="P:AntDesign.Affix.OffsetTop">
            <summary>
            Offset from the top of the viewport (in pixels)
            </summary>
        </member>
        <member name="P:AntDesign.Affix.TargetSelector">
            <summary>
            The CSS selector that specifies the scrollable area DOM node
            </summary>
            <default value="window" />
        </member>
        <member name="P:AntDesign.Affix.ChildContent">
            <summary>
            Additional Content
            </summary>
        </member>
        <member name="P:AntDesign.Affix.OnChange">
            <summary>
            Callback for when Affix state is changed. A boolean indicating if the Affix is currently affixed is passed.
            </summary>
        </member>
        <member name="T:AntDesign.Alert">
            <summary>
            <para>Alert component for feedback.</para>
            <h2>When To Use</h2>
            <list type="bullet">
            <item>When you need to show alert messages to users.</item>
            <item>When you need a persistent static container which is closable by user actions.</item>
            </list>
            </summary>
        </member>
        <member name="P:AntDesign.Alert.AfterClose">
            <summary>
            Called when close animation is finished
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Banner">
            <summary>
            Whether to show as banner
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Alert.Closable">
            <summary>
            Whether Alert can be closed
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Alert.CloseText">
            <summary>
            Close text to show
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Description">
            <summary>
            Additional content of Alert
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Icon">
            <summary>
            Custom icon, effective when showIcon is true
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Message">
            <summary>
            Content of Alert
            </summary>
        </member>
        <member name="P:AntDesign.Alert.MessageTemplate">
            <summary>
            Template for content
            </summary>
        </member>
        <member name="P:AntDesign.Alert.ShowIcon">
            <summary>
            Whether to show icon.
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Type">
            <summary>
            Type of Alert styles, options: success, info, warning, error
            </summary>
        </member>
        <member name="P:AntDesign.Alert.OnClose">
            <summary>
            Callback when Alert is closed.
            </summary>
        </member>
        <member name="P:AntDesign.Alert.ChildContent">
            <summary>
            Additional Content
            </summary>
        </member>
        <member name="P:AntDesign.Alert.IconType">
            <summary>
            Icon to show.
            </summary>
        </member>
        <member name="F:AntDesign.Alert._isClosed">
            <summary>
            Indicator if the component is closed or not.
            </summary>
        </member>
        <member name="F:AntDesign.Alert._isClosing">
            <summary>
            Just before we close the component we set this indicator to show a closing animation.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.SetClassMap">
            <summary>
            Sets the default classes.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.OnInitialized">
            <summary>
            Start-up code.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.OnCloseHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the close callback.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Anchor">
            <summary>
            <para>Hyperlinks to scroll on one page.</para>
            
            <h2>When To Use</h2>
            <para>For displaying anchor hyperlinks on page and jumping between them.</para>
            </summary>
            <seealso cref="T:AntDesign.AnchorLink" />
        </member>
        <member name="P:AntDesign.Anchor.Key">
            <summary>
            used to refresh links list when the key changed.
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.ChildContent">
            <summary>
            The content of the component.
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.Affix">
            <summary>
            Fixed mode of Anchor
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Anchor.Bounds">
            <summary>
            Bounding distance of anchor area
            </summary>
            <default value="5" />
        </member>
        <member name="P:AntDesign.Anchor.GetContainer">
            <summary>
            Scrolling container
            </summary>
            <default value="window" />
        </member>
        <member name="P:AntDesign.Anchor.OffsetBottom">
            <summary>
            Pixels to offset from bottom when calculating position of scroll
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.OffsetTop">
            <summary>
            Pixels to offset from top when calculating position of scroll
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Anchor.ShowInkInFixed">
            <summary>
            Whether show ink-balls in Fixed mode
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Anchor.OnClick">
            <summary>
            set the handler to handle click event
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.GetCurrentAnchor">
            <summary>
            Customize the anchor highlight
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.TargetOffset">
            <summary>
            Anchor scroll offset, default as <see cref="P:AntDesign.Anchor.OffsetTop"/>
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.OnChange">
            <summary>
            Callback executed when the anchor changes, either by click or scrolling
            </summary>
        </member>
        <member name="T:AntDesign.AnchorLink">
            <summary>
            Link in an Anchor list. Designed to be a child of Anchor
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.ChildContent">
            <summary>
            Additional content. Does not override Title.
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Href">
            <summary>
            Target of hyperlink
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Title">
            <summary>
            Content of hyperlink
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Target">
            <summary>
            Specifies where to display the linked URL
            </summary>
        </member>
        <member name="T:AntDesign.AutoComplete`1">
                <summary>
                <para>Autocomplete function of input field.</para>
                 
                <h2>When To Use</h2>
                When there is a need for autocomplete functionality.
                </summary>
                <inheritdoc />
                <seealso cref="T:AntDesign.AutoCompleteOption" />
                <seealso cref="T:AntDesign.TriggerBoundaryAdjustMode"/>
        </member>
        <member name="P:AntDesign.AutoComplete`1.Placeholder">
            <summary>
            Input element placeholder
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.Disabled">
            <summary>
            Disable
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.DefaultActiveFirstOption">
            <summary>
            Make first option active by default or not
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.AutoComplete`1.Backfill">
            <summary>
            Backfill selected item into the input when using keyboard to select items
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.AutoComplete`1.DebounceMilliseconds">
            <summary>
            Delays the processing of the KeyUp event until the user has stopped
            typing for a predetermined amount of time
            </summary>
            <default value="250"/>
        </member>
        <member name="P:AntDesign.AutoComplete`1.AutoCompleteOptions">
            <summary>
            List object collection
            </summary>
        </member>
        <member name="F:AntDesign.AutoComplete`1._optionDataItems">
            <summary>
            List data collection
            </summary>
        </member>
        <member name="F:AntDesign.AutoComplete`1._options">
            <summary>
            List bound data source collection
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.Options">
            <summary>
            Options to display in dropdown
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionDataItems">
            <summary>
            Bind the data source of the list data item format
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OnSelectionChange">
            <summary>
            Callback executed when selection changes
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OnActiveChange">
            <summary>
            Callback executed when active item changes
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OnInput">
            <summary>
            Callback executed when input changes
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OnPanelVisibleChange">
            <summary>
            Callback executed when panel visibility changes
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.ChildContent">
            <summary>
            Content for dropdown
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionTemplate">
            <summary>
            Option template
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionFormat">
            <summary>
            Formatting options, you can customize the display format
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OverlayTemplate">
            <summary>
            All option templates
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.CompareWith">
            <summary>
            Contrast, used to compare whether two objects are the same
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.FilterExpression">
            <summary>
            Filter expression
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.AllowFilter">
            <summary>
            Allow filtering
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.AutoComplete`1.Width">
            <summary>
            Width of input, pixels when an int is given, full value given to CSS width property when a string is given
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OverlayClassName">
            <summary>
            Class name passed to overlay
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OverlayStyle">
            <summary>
            Style passed to overlay
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.PopupContainerSelector">
            <summary>
            Container selector for the popup
            </summary>
            <default value="body" />
        </member>
        <member name="P:AntDesign.AutoComplete`1.SelectedItem">
            <summary>
            Selected item from dropdown
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening). Check 
            </summary>
            <default value="TriggerBoundaryAdjustMode.InView"/>
        </member>
        <member name="P:AntDesign.AutoComplete`1.ShowPanel">
            <summary>
            Display options dropdown
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.AutoComplete`1.OpenPanel">
            <summary>
            Open panel
            </summary>
        </member>
        <member name="M:AntDesign.AutoComplete`1.ClosePanel">
            <summary>
            Close panel
            </summary>
        </member>
        <member name="P:AntDesign.AutoCompleteOption.ChildContent">
            <summary>
            Label for the option. Takes priority over Label
            </summary>
        </member>
        <member name="P:AntDesign.AutoCompleteOption.Value">
            <summary>
            Value for the option
            </summary>
        </member>
        <member name="P:AntDesign.AutoCompleteOption.Label">
            <summary>
            Label for the option
            </summary>
            <default value="Value.ToString()" />
        </member>
        <member name="P:AntDesign.AutoCompleteOption.Disabled">
            <summary>
            If option is disabled or not
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.AutoCompleteOption.CalcSelected">
            <summary>
            计算当前计算选择状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Avatar">
                <summary>
                <para>Avatars can be used to represent people or objects. It supports images, icons, or letters.</para>
                </summary>
                <seealso cref="T:AntDesign.AvatarGroup" />
        </member>
        <member name="P:AntDesign.Avatar.ChildContent">
            <summary>
            Content to display inside avatar shape. Takes priority over <see cref="P:AntDesign.Avatar.Text"/>
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Shape">
            <summary>
            Shape of the avatar
            </summary>
            <default value="AvatarShape.Circle"/>
        </member>
        <member name="P:AntDesign.Avatar.Size">
            <summary>
            Size of the avatar. See <see cref="T:AntDesign.AvatarSize"/> for possible values.
            </summary>
            <default value="AvatarSize.Default"/>
        </member>
        <member name="P:AntDesign.Avatar.Text">
            <summary>
            Text string to display in the avatar. Typical use is for displaying initials.
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Src">
            <summary>
            Image src for the avatar. If this fails to load, <see cref="P:AntDesign.Avatar.Icon"/> and <see cref="P:AntDesign.Avatar.ChildContent"/>/<see cref="P:AntDesign.Avatar.Text"/> will continue to show.
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.SrcSet">
            <summary>
            A list of sources to use for different screen resolutions. Passed straight to the <c>img</c> tag.
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Alt">
            <summary>
            Alternate text for the image
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Icon">
            <summary>
            Icon to display
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.OnError">
            <summary>
            Callback executed when image passed to <see cref="P:AntDesign.Avatar.Src"/> fails to load
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Overflow">
            <summary>
            more than group max count
            </summary>
        </member>
        <member name="P:AntDesign.AvatarGroup.ChildContent">
            <summary>
            The child content
            </summary>
        </member>
        <member name="P:AntDesign.AvatarGroup.MaxCount">
            <summary>
            Max avatars to show
            </summary>
        </member>
        <member name="P:AntDesign.AvatarGroup.MaxStyle">
            <summary>
            The style of excess avatar style
            </summary>
        </member>
        <member name="P:AntDesign.AvatarGroup.MaxPopoverPlacement">
            <summary>
            The placement of excess avatar Popover
            </summary>
        </member>
        <member name="T:AntDesign.BackTop">
                <summary>
                <para>Makes it easy to go back to the top of the page.</para>
                
                <h2>When To Use</h2>
                <list type="bullet">
                    <item>When the page content is very long.</item>
                    <item>When you need to go back to the top very frequently in order to view the contents.</item>
                </list>
                </summary>
        </member>
        <member name="P:AntDesign.BackTop.Icon">
            <summary>
            Icon for the button
            </summary>
            <default value="vertical-align-top" />
        </member>
        <member name="P:AntDesign.BackTop.ChildContent">
            <summary>
            Content for the button. Takes priority over icon.
            </summary>
        </member>
        <member name="P:AntDesign.BackTop.VisibilityHeight">
            <summary>
            Scroll offset at which the button becomes visible, in px
            </summary>
            <default value="400" />
        </member>
        <member name="P:AntDesign.BackTop.TargetSelector">
            <summary>
            The scrollable area the button is for
            </summary>
            <default value="window" />
        </member>
        <member name="P:AntDesign.BackTop.OnClick">
            <summary>
            Callback executed when BackTop gets clicked. Won't override default functionality.
            </summary>
        </member>
        <member name="T:AntDesign.Badge">
                <summary>
                    <para>Small numerical value or status descriptor for UI elements.</para>
            
                    <h2>When To Use</h2>
            
                    <para>Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.</para>
                </summary>
                <seealso cref="T:AntDesign.BadgeRibbon" />
        </member>
        <member name="P:AntDesign.Badge.Color">
            <summary>
            Customize Badge status dot color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.PresetColor">
            <summary>
            Set Badge status dot to a preset color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Count">
            <summary>
            Number to show in badge
            </summary>
        </member>
        <member name="P:AntDesign.Badge.CountTemplate">
            <summary>
            Template to show in place of Count
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Dot">
            <summary>
            Whether to display a dot instead of count
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Badge.Offset">
            <summary>
            Set offset of the badge dot, like (left, top)
            </summary>
        </member>
        <member name="P:AntDesign.Badge.OverflowCount">
            <summary>
            Max count to show
            </summary>
            <default value="99"/>
        </member>
        <member name="P:AntDesign.Badge.ShowZero">
            <summary>
            Whether to show badge when count is zero
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Badge.Status">
            <summary>
            Set Badge dot to a status color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Text">
            <summary>
            The display text next to the status dot
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Title">
            <summary>
            Text to show when hovering over the badge. Defaults to the value of Count
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Size">
            <summary>
            Size of the badge
            </summary>
        </member>
        <member name="P:AntDesign.Badge.ChildContent">
            <summary>
            Wrapping this item.
            </summary>
        </member>
        <member name="M:AntDesign.Badge.SetClassMap">
            <summary>
            Sets the default CSS classes.
            </summary>
        </member>
        <member name="M:AntDesign.Badge.OnInitialized">
            <summary>
            Startup code
            </summary>
        </member>
        <member name="T:AntDesign.BadgeRibbon">
            <summary>
            Small numerical value or status descriptor for UI elements.
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Color">
            <summary>
            Customize ribbon color
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Text">
            <summary>
            Text string of ribbon.
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.TextTemplate">
            <summary>
            Text content of the ribbon. Takes priority over <see cref="P:AntDesign.BadgeRibbon.Text"/>
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Placement">
            <summary>
            Set placement of ribbon.
            </summary>
            <default value="end"/>
        </member>
        <member name="P:AntDesign.BadgeRibbon.ChildContent">
            <summary>
            Wrapping this item.
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.SetClassMap">
            <summary>
            Sets the default CSS classes.
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.OnInitialized">
            <summary>
            Startup code
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.OnParametersSet">
            <summary>
            Runs every time a parameter is set.
            </summary>
        </member>
        <member name="T:AntDesign.Breadcrumb">
                <summary>
                    <para>A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.</para>
            
                    When To Use
            
                    <list type="bullet">
                        <item>When the system has more than two layers in a hierarchy.</item>
                        <item>When you need to inform the user of where they are.</item>
                        <item>When the user may need to navigate back to a higher level.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.BreadcrumbItem" />
        </member>
        <member name="P:AntDesign.Breadcrumb.ChildContent">
            <summary>
            Content of the Breadcrumb. Should contain BreadcrumbItem elements
            </summary>
        </member>
        <member name="P:AntDesign.Breadcrumb.AutoGenerate">
            <summary>
            Not currently used. Planned for future development.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Breadcrumb.Separator">
            <summary>
            Separator between items
            </summary>
            <default value="/" />
        </member>
        <member name="T:AntDesign.BreadcrumbOption">
            <summary>
            Not currently used. Planned for future development.
            </summary>
        </member>
        <member name="T:AntDesign.Button">
                <summary>
                    <para>To trigger an operation.</para>
            
                    <h2>When To Use</h2>
            
                    <para>A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.</para>
                    <para>In Ant Design we provide 4 types of button.</para>
            
                    <list type="bullet">
                        <item>Primary button: indicate the main action, one primary button at most in one section.</item>
                        <item>Default button: indicate a series of actions without priority.</item>
                        <item>Dashed button: used for adding action commonly.</item>
                        <item>Link button: used for external links.</item>
                    </list>
            
                    <para>And 4 other properties additionally.</para>
            
                    <list type="bullet">
                        <item><c>Danger</c>: used for actions of risk, like deletion or authorization.</item>
                        <item><c>Ghost</c>: used in situations with complex background, home pages usually.</item>
                        <item><c>Disabled</c>: when actions is not available.</item>
                        <item><c>Loading</c>: add loading spinner in button, avoiding multiple submits too.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.DownloadButton" />
        </member>
        <member name="P:AntDesign.Button.AriaLabel">
            <summary>
            Sets the value of the aria-label attribute
            </summary>
        </member>
        <member name="P:AntDesign.Button.Color">
            <summary>
            Set the color of the button.
            </summary>
            <default value="Color.None" />
        </member>
        <member name="P:AntDesign.Button.Block">
            <summary>
            Option to fit button width to its parent width
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.ChildContent">
            <summary>
            Content of the button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Danger">
            <summary>
            Set the danger status of button.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.Disabled">
            <summary>
            Whether the `Button` is disabled.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.Ghost">
            <summary>
            Make background transparent and invert text and border colors
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.HtmlType">
            <summary>
            Set the original html type of the button element.
            </summary>
            <default value="button" />
        </member>
        <member name="P:AntDesign.Button.Icon">
            <summary>
            Set the icon component of button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Loading">
            <summary>
            Show loading indicator. You have to write the loading logic on your own.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.AutoLoading">
            <summary>
            Whether to trigger and keep the loading state until the event callback is done.
            </summary>
        </member>
        <member name="P:AntDesign.Button.OnClick">
            <summary>
            Callback when `Button` is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Button.OnClickStopPropagation">
            <summary>
            Do not propagate events when button is clicked.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Shape">
            <summary>
            Can set button shape: `circle` | `round` or `null` (default, which is rectangle).
            </summary>
            <default value="null" />
        </member>
        <member name="P:AntDesign.Button.Size">
            <summary>
            Set the size of button.
            </summary>
            <default value="ButtonSize.Default" />
        </member>
        <member name="P:AntDesign.Button.Type">
            <summary>
            Type of the button.
            </summary>
            <default value="ButtonType.Default" />
        </member>
        <member name="P:AntDesign.Button.NoSpanWrap">
            <summary>
            Do not wrap with &lt;span&gt;
            </summary>
        </member>
        <member name="T:AntDesign.DownloadButton">
            <summary>
            Use to download a file. inherits <see cref="T:AntDesign.Button"/>
            </summary>
        </member>
        <member name="P:AntDesign.DownloadButton.Url">
            <summary>
            The download url of a file
            </summary>
        </member>
        <member name="P:AntDesign.DownloadButton.FileName">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="T:AntDesign.Calendar">
                <summary>
                <para>Container for displaying data in calendar form.</para>
            
                <h2>When To Use</h2>
            
                <para>When data is in the form of dates, such as schedules, timetables, prices calendar, lunar calendar. This component also supports Year/Month switch.</para>
                </summary>
        </member>
        <member name="P:AntDesign.Calendar.Value">
            <summary>
            Selected value for calendar
            </summary>
            <default value="DateTime.Now"/>
        </member>
        <member name="P:AntDesign.Calendar.DefaultValue">
            <summary>
            Default value for selected date. When set, will set <see cref="P:AntDesign.Calendar.Value"/>
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.ValidRange">
            <summary>
            Validate range of dates or selection
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.Mode">
            <summary>
            Display mode. See <see cref="T:AntDesign.CalendarMode"/> for valid options
            </summary>
            <default value="CalendarMode.Month"/>
        </member>
        <member name="P:AntDesign.Calendar.FullScreen">
            <summary>
            Whether the calendar should take up all available space or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Calendar.OnSelect">
            <summary>
            Callback executed when a date is selected
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.OnChange">
            <summary>
            Callback executed when a date is selected
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.HeaderRender">
            <summary>
            Function to render a custom header
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.DateCellRender">
            <summary>
            Customize the display of the date cell, the returned content will be appended to the cell
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.DateFullCellRender">
            <summary>
            Customize the display of the date cell, the returned content will override the cell
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.MonthCellRender">
            <summary>
            Customize the display of the month cell, the returned content will be appended to the cell
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.MonthFullCellRender">
            <summary>
            Customize the display of the month cell, the returned content will override the cell
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.OnPanelChange">
            <summary>
            Callback executed when the type of calendar being viewed changes
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.DisabledDate">
            <summary>
            Function to determine if a specific date is disabled
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.Locale">
            <summary>
            Locale information for UI and date formatting
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.CultureInfo">
            <summary>
            Culture information used for formatting
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.ParentTrigger">
            <summary>
            Used in nested overlays (for example menu -> submenu) when
            trigger is another overlay.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.Trigger">
            <summary>
            Component that will trigger the overlay to show.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.VerticalOffset">
            <summary>
            vertical offset between Trigger and Overlay, default is 4
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.HorizontalOffset">
            <summary>
            horizontal offset between Trigger and Overlay, default is 4
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.HiddenMode">
            <summary>
            By default Overlay does not render its content if Overlay hasn't been
            activated (shown at least once). Setting HiddenMode = true will
            go through rendering process.
            Use case: Select component, when using <see cref="T:AntDesign.SimpleSelectOption"/> or <see cref="T:AntDesign.SelectOption`2"/>
            needs HiddenMode = true, so the select options are initialized and
            potential defaults can be rendered properly.
            </summary>
        </member>
        <member name="M:AntDesign.Internal.Overlay.UpdateChildState(AntDesign.Internal.Overlay,System.Boolean)">
            <summary>
            set if there any child overlay show or hide
            overlay would not hide if any child is showing
            </summary>
            <param name="child"></param>
            <param name="isChildOverlayShow"></param>
        </member>
        <member name="M:AntDesign.Internal.Overlay.IsHiding">
            <summary>
            when overlay is complete hide, IsPopup return true
            when overlay is hiding(playing hide animation), IsPopup return false, IsHiding return true.
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.Internal.Overlay._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="M:AntDesign.Internal.Overlay.WaitFor(System.Func{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Will probe a check predicate every given milliseconds until predicate is true or until
            runs out of number of probings.
            </summary>
            <param name="check">A predicate that will be run every time after waitTimeInMilisecondsPerProbing will pass.</param>
            <param name="probings">Maximum number of probings. After this number is reached, the method finishes.</param>
            <param name="waitTimeInMilisecondsPerProbing">How long to wait between each probing.</param>
            <returns>Task</returns>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening). Check
            enum for details.
            </summary>
            <default value="TriggerBoundaryAdjustMode.InView" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.ChildContent">
            <summary>
            Trigger (link, button, etc)
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.ComplexAutoCloseAndVisible">
            <summary>
            Whether need both auto-off and Visible control closing.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Disabled">
            <summary>
            Whether the trigger is disabled.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.HiddenMode">
            <summary>
            Property forwarded to Overlay component. Consult the Overlay
            property for more detailed explanation.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.InlineFlexMode">
            <summary>
            (not used in Unbound) Sets wrapping div style to `display: inline-flex;`.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.IsButton">
            <summary>
            Behave like a button: when clicked invoke OnClick
            (unless OnClickDiv is overriden and does not call base).
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnClick">
            <summary>
            Callback when triggger is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMaskClick">
            <summary>
             Callback - equivalent of OnMouseUp event on the trigger trigger.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseEnter">
            <summary>
            Callback when mouse enters trigger boundaries.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseLeave">
            <summary>
            Callback when mouse leaves trigger boundaries.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnOverlayHiding">
            <summary>
            Callback when overlay is hiding.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnVisibleChange">
            <summary>
            Callback when overlay visibility is changing.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Overlay">
            <summary>
            Overlay content (what will be rendered after trigger is activated)
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayClassName">
            <summary>
            Overlay container custom css class.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayEnterCls">
            <summary>
            Css class added to overlay when overlay is shown.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayHiddenCls">
            <summary>
            Css class added to overlay when overlay is hidden.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayLeaveCls">
            <summary>
            Css class added to overlay when overlay is hiding.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayStyle">
            <summary>
            Css style that will be added to overlay div.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Placement">
            <summary>
            The position of the Dropdown overlay relative to the target. 
            Can be: Top, Left, Right, Bottom, TopLeft, TopRight, BottomLeft, BottomRight, LeftTop, LeftBottom, RightTop, RightBottom
            </summary>
            <default value="PlacementType.BottomLeft" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.PlacementCls">
            <summary>
            Override default placement class which is based on `Placement` parameter.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.PopupContainerSelector">
            <summary>
            Define what is going to be the container of the overlay.
            Example use case: when overlay has to be contained in a
            scrollable area.
            </summary>
            <default value="body" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Trigger">
            <summary>
            Trigger mode. Could be multiple by passing an array.
            </summary>
            <default value="TriggerType.Hover" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.TriggerCls">
            <summary>
            The trigger element CSS class.
            </summary>
            <default value="ant-dropdown-trigger" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.TriggerReference">
            <summary>
            Manually set reference to triggering element.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Unbound">
            <summary>
            ChildElement with ElementReference set to avoid wrapping div.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Visible">
            <summary>
            Toggles overlay viability.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.VisibleChanged">
            <summary>
            Callback when visibility is changed.
            </summary>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handle the trigger click.
            </summary>
            <param name="args">MouseEventArgs</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.OnMouseUp(System.Text.Json.JsonElement)">
            <summary>
            on document mouse up
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.Close">
            <summary>
            Will hide the overlay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.IsOverlayShow">
            <summary>
            Checks if overlay is currently in visible state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.SetVisible(System.Boolean)">
            <summary>
            Toggle overlay visibility.
            </summary>
            <param name="visible">boolean: visibility true/false</param>
        </member>
        <member name="M:AntDesign.Internal.DateTimeInputMaskConverter.Convert(System.String,System.String)">
            <summary>
            Convert string value to mask
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Card">
                <summary>
                    <para>Simple rectangular container.</para>
            
                    <h2>When To Use</h2>
                    
                    <list type="bullet">
                        <item>A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.CardGrid"/>
                <seealso cref="T:AntDesign.CardMeta"/>
                <seealso cref="T:AntDesign.CardAction"/>
        </member>
        <member name="P:AntDesign.Card.ChildContent">
            <summary>
            Content for the card's body. Shown below <see cref="P:AntDesign.Card.Body"/>
            </summary>
        </member>
        <member name="P:AntDesign.Card.Body">
            <summary>
            Content for the card's body. Shown above <see cref="P:AntDesign.Card.ChildContent"/>
            </summary>
        </member>
        <member name="P:AntDesign.Card.ActionTemplate">
            <summary>
            Content to put in the actions section of the card. Takes priority over <see cref="P:AntDesign.Card.Actions"/>
            </summary>
        </member>
        <member name="P:AntDesign.Card.Bordered">
            <summary>
            Toggles rendering of the border around the card
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Card.Hoverable">
            <summary>
            Make card hoverable
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Card.Loading">
            <summary>
            Shows a loading indicator while the contents of the card are being fetched
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Card.BodyStyle">
            <summary>
            Style string for body section
            </summary>
        </member>
        <member name="P:AntDesign.Card.Cover">
            <summary>
            Cover content for card. Displayed below header and above body
            </summary>
        </member>
        <member name="P:AntDesign.Card.Actions">
            <summary>
            Actions for the card
            </summary>
        </member>
        <member name="P:AntDesign.Card.Type">
            <summary>
            Card style type, can be set to inner or not set
            </summary>
        </member>
        <member name="P:AntDesign.Card.Size">
            <summary>
            Size of the card
            </summary>
        </member>
        <member name="P:AntDesign.Card.Title">
            <summary>
            Title string for header
            </summary>
        </member>
        <member name="P:AntDesign.Card.TitleTemplate">
            <summary>
            Title content for header. Takes priority over <see cref="P:AntDesign.Card.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.Card.Extra">
            <summary>
            Content to render in the top-right corner of the card
            </summary>
        </member>
        <member name="T:AntDesign.CardAction">
            <summary>
            Easy way to set the action of the card.
            </summary>
        </member>
        <member name="P:AntDesign.CardAction.ChildContent">
            <summary>
            The action of the card.
            </summary>
        </member>
        <member name="P:AntDesign.CardGrid.ChildContent">
            <summary>
            Content for that section of the grid
            </summary>
        </member>
        <member name="P:AntDesign.CardGrid.Hoverable">
            <summary>
            If the section should be hoverable. Adds dropshadow and lifts up when hovered if true.
            </summary>
            <default value="false"/>
        </member>
        <member name="T:AntDesign.Carousel">
                <summary>
                    <para>A carousel component. Scales with its container.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>When there is a group of content on the same level.</item>
                        <item>When there is insufficient content space, it can be used to save space in the form of a revolving door.</item>
                        <item>Commonly used for a group of pictures/cards.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.CarouselSlick"/>
        </member>
        <member name="P:AntDesign.Carousel.ChildContent">
            <summary>
            Content of the carousel. Typically <see cref="T:AntDesign.CarouselSlick"/> elements
            </summary>
        </member>
        <member name="P:AntDesign.Carousel.DotPosition">
            <summary>
            The position of the dots, which can be one of Top, Bottom, Left or Right, <see cref="T:AntDesign.CarouselDotPosition"/>
            </summary>
        </member>
        <member name="P:AntDesign.Carousel.Autoplay">
            <summary>
            Whether to scroll automatically
            </summary>
        </member>
        <member name="P:AntDesign.Carousel.Effect">
            <summary>
            Transition effect, <see cref="T:AntDesign.CarouselEffect"/>
            </summary>
        </member>
        <member name="M:AntDesign.Carousel.Next">
            <summary>
            Slides the carousel to the next slide
            </summary>
        </member>
        <member name="M:AntDesign.Carousel.Previous">
            <summary>
            Slides the carousel to the previous slide
            </summary>
        </member>
        <member name="M:AntDesign.Carousel.GoTo(System.Int32)">
            <summary>
            Slides the carousel to the specified slide
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AntDesign.CarouselSlick.ChildContent">
            <summary>
            Content to display when on this part of the carousel
            </summary>
        </member>
        <member name="T:AntDesign.Cascader">
                <summary>
                    <para>Cascade selection box.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>When you need to select from a set of associated data set. Such as province/city/district, company level, things classification.</item>
                        <item>When selecting from a large data set, with multi-stage classification separated for easy selection.</item>
                        <item>Chooses cascade items in one float layer for better user experience.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.CascaderNode"/>
                <seealso cref="T:AntDesign.TriggerBoundaryAdjustMode"/>
        </member>
        <member name="P:AntDesign.Cascader.ChangeOnSelect">
            <summary>
            Change value on each selection if set to true, only chage on final selection if false.
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.DefaultValue">
            <summary>
            Initially selected value
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.ExpandTrigger">
            <summary>
            When to expand the current item - click or hover
            </summary>
            <default value="click" />
        </member>
        <member name="P:AntDesign.Cascader.NotFoundContent">
            <summary>
            Empty description for when not found
            </summary>
            <default value="No Data (in current locale)" />
        </member>
        <member name="P:AntDesign.Cascader.ShowSearch">
            <summary>
            Allow searching or not
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.OnChange">
            <summary>
            Callback executed when the selected value changes
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.SelectedNodesChanged">
            <summary>
            Callback executed when the selected value changes
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.Options">
            <summary>
            Options for the overlay
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.InputOnToggle">
            <summary>
            输入框单击(显示/隐藏浮层)
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.CascaderOnBlur">
            <summary>
            输入框/浮层失去焦点(隐藏浮层)
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.ClearSelected">
            <summary>
            清除已选择项
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.NodeOnClick(AntDesign.CascaderNode)">
            <summary>
            下拉节点单击
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AntDesign.Cascader.NodeOnMouseOver(AntDesign.CascaderNode)">
            <summary>
            下拉节点移入
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetSelectedNode(AntDesign.CascaderNode,AntDesign.SelectedTypeEnum)">
            <summary>
            Selected nodes
            </summary>
            <param name="cascaderNode"></param>
            <param name="selectedType"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetSelectedNodeWithParent(AntDesign.CascaderNode,System.Collections.Generic.List{AntDesign.CascaderNode}@)">
            <summary>
            Set all parent nodes to be selected
            </summary>
            <param name="node"></param>
            <param name="list"></param>
        </member>
        <member name="M:AntDesign.Cascader.ProcessParentAndDefault">
            <summary>
            handles parent nodes and defaults after Options updating
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.InitCascaderNodeState(System.Collections.Generic.List{AntDesign.CascaderNode},AntDesign.CascaderNode,System.Int32,System.Boolean)">
            <summary>
            Initialize nodes (Level, ParentNode)
            </summary>
            <param name="list"></param>
            <param name="parentNode"></param>
            <param name="level"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:AntDesign.Cascader.RefreshNodeValue(System.String)">
            <summary>
            Refresh the selected value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetDefaultValue(System.String)">
            <summary>
            Set the default value
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetValue(System.String)">
            <summary>
            Set the binding value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Cascader.RefreshDisplayText">
            <summary>
            rebuild the display text
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.GetNodeByValue(System.Collections.Generic.IEnumerable{AntDesign.CascaderNode},System.String)">
            <summary>
            Get the node based on the specified value
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.CascaderNode.Label">
            <summary>
            Label displayed for value
            </summary>
        </member>
        <member name="P:AntDesign.CascaderNode.Value">
            <summary>
            Value for when option is selected
            </summary>
        </member>
        <member name="P:AntDesign.CascaderNode.Disabled">
            <summary>
            Disable the option or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.CascaderNode.Children">
            <summary>
            Options under this one
            </summary>
        </member>
        <member name="T:AntDesign.Checkbox">
                <summary>
                <para>Checkbox component.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>Used for selecting multiple values from several options.</item>
                    <item>If you use only one checkbox, it is the same as using Switch to toggle between two states. </item>
                </list>
            
                <para>The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.</para>
                </summary>
                <seealso cref="P:AntDesign.Checkbox.CheckboxGroup"/>
        </member>
        <member name="P:AntDesign.Checkbox.ChildContent">
            <summary>
            Content to display next to checkbox
            </summary>
        </member>
        <member name="P:AntDesign.Checkbox.CheckedChange">
            <summary>
            Callback executed when checked state changes
            </summary>
        </member>
        <member name="P:AntDesign.Checkbox.Indeterminate">
            <summary>
            Indeterminate checked state of checkbox
            </summary>
        </member>
        <member name="P:AntDesign.Checkbox.Label">
            <summary>
            Label for checkbox
            </summary>
        </member>
        <member name="T:AntDesign.CheckboxGroup`1">
            <summary>
            Display a group of related checkboxes
            </summary>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.ChildContent">
            <summary>
            Display content in the group. Use <see cref="P:AntDesign.CheckboxGroup`1.MixedMode"/> to specify where this should render if using with <see cref="P:AntDesign.CheckboxGroup`1.Options"/>
            </summary>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.Options">
            <summary>
            Options for checkboxes
            </summary>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.MixedMode">
            <summary>
            When both <see cref="P:AntDesign.CheckboxGroup`1.ChildContent"/> and <see cref="P:AntDesign.CheckboxGroup`1.Options"/> are used this specifies which should render first.
            </summary>
            <default value="CheckboxGroupMixedMode.ChildContentFirst"/>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.OnChange">
            <summary>
            Callback executed when the checked options change
            </summary>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.Disabled">
            <summary>
            Disable all checkboxes in the group
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.CheckboxGroup`1.OnCheckboxChange(AntDesign.Checkbox,System.Boolean)">
            <summary>
            Called when [checkbox change].
            </summary>
            <param name="checkbox">The checkbox.</param>
            <param name="invokeOnChange">Flag for whether or not to depart for a change event.</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Collapse">
                <summary>
                    <para>A content area which can be collapsed and expanded.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>Can be used to group or hide complex regions to keep the page clean.</item>
                        <item><c>Accordion</c> is a special kind of <c>Collapse</c>, which allows only one panel to be expanded at a time.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.Panel"/>
        </member>
        <member name="P:AntDesign.Collapse.Accordion">
            <summary>
            Enable/disable accordion mode. When true, only one panel can be open at once. When opening another the rest collapse.
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Collapse.Bordered">
            <summary>
            Enable/disable border
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Collapse.ExpandIconPosition">
            <summary>
            Expand icon position
            </summary>
            <default value="CollapseExpandIconPosition.Left"/>
        </member>
        <member name="P:AntDesign.Collapse.DefaultActiveKey">
            <summary>
            Default <see cref="T:AntDesign.Panel"/> element's <see cref="P:AntDesign.Panel.Key"/>
            </summary>
        </member>
        <member name="P:AntDesign.Collapse.OnChange">
            <summary>
            Callback executed when open panels change
            </summary>
        </member>
        <member name="P:AntDesign.Collapse.ExpandIcon">
            <summary>
            Icon to display in <see cref="P:AntDesign.Collapse.ExpandIconPosition"/>
            </summary>
            <default value="right"/>
        </member>
        <member name="P:AntDesign.Collapse.ExpandIconTemplate">
            <summary>
            Expand icon content to display in <see cref="P:AntDesign.Collapse.ExpandIconPosition"/>. Takes priority over <see cref="P:AntDesign.Collapse.ExpandIcon"/>
            </summary>
        </member>
        <member name="P:AntDesign.Collapse.Animation">
            <summary>
            Whether enable the expand/collapse animation
            </summary>
        </member>
        <member name="P:AntDesign.Collapse.ChildContent">
            <summary>
            Content of the collapse. Typically contains <see cref="T:AntDesign.Panel"/> elements
            </summary>
        </member>
        <member name="M:AntDesign.Collapse.Activate(System.String[])">
            <summary>
            Activate the specified panels
            </summary>
            <param name="activeKeys"></param>
        </member>
        <member name="M:AntDesign.Collapse.Deactivate(System.String[])">
            <summary>
            Deactivate the specified panels
            </summary>
            <param name="inactiveKeys"></param>
        </member>
        <member name="P:AntDesign.Panel.Active">
            <summary>
            If the panel is active or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Panel.Key">
            <summary>
            Unique identifier for the panel
            </summary>
        </member>
        <member name="P:AntDesign.Panel.Disabled">
            <summary>
            If true, the panel cannot be opened or closed.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Panel.ShowArrow">
            <summary>
            Display an arrow or not for the panel
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Panel.Extra">
            <summary>
            Extra string for the corner of the panel
            </summary>
        </member>
        <member name="P:AntDesign.Panel.ExtraTemplate">
            <summary>
            Extra content for the corner of the panel. Takes priority over <see cref="P:AntDesign.Panel.Extra"/>
            </summary>
        </member>
        <member name="P:AntDesign.Panel.Header">
            <summary>
            Header string for the panel
            </summary>
        </member>
        <member name="P:AntDesign.Panel.HeaderTemplate">
            <summary>
            Header content for the panel. Takes priority over <see cref="P:AntDesign.Panel.Header"/>
            </summary>
        </member>
        <member name="P:AntDesign.Panel.OnActiveChange">
            <summary>
            Callback executed when this panel's active status changes
            </summary>
        </member>
        <member name="P:AntDesign.Panel.ChildContent">
            <summary>
            Content for the panel.
            </summary>
        </member>
        <member name="M:AntDesign.Panel.SetActive(System.Boolean)">
            <summary>
            Set the active state of the panel
            </summary>
            <param name="active"></param>
        </member>
        <member name="M:AntDesign.Panel.Toggle">
            <summary>
            Toggle the active state of the panel
            </summary>
        </member>
        <member name="T:AntDesign.Comment">
                <summary>
                <para>A comment displays user feedback and discussion to website content.</para>
            
                <h2>When To Use</h2>
            
                <para>Comments can be used to enable discussions on an entity such as a page, blog post, issue or other.</para>
                </summary>
        </member>
        <member name="P:AntDesign.Comment.Author">
            <summary>
            Author string
            </summary>
        </member>
        <member name="P:AntDesign.Comment.AuthorTemplate">
            <summary>
            Author content. Takes priority over <see cref="P:AntDesign.Comment.Author"/>
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Avatar">
            <summary>
            Avatar string. Gets passed as the <see cref="P:AntDesign.Avatar.Src"/> to the <see cref="T:AntDesign.Avatar"/> component.
            </summary>
        </member>
        <member name="P:AntDesign.Comment.AvatarTemplate">
            <summary>
            Avatar content. Takes priority over <see cref="P:AntDesign.Comment.Avatar"/>
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Content">
            <summary>
            Content string for the comment
            </summary>
        </member>
        <member name="P:AntDesign.Comment.ContentTemplate">
            <summary>
            Content for the comment. Takes priority over <see cref="P:AntDesign.Comment.Content"/>
            </summary>
        </member>
        <member name="P:AntDesign.Comment.ChildContent">
            <summary>
            Used primarily for nesting comments for functionality such as replies
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Datetime">
            <summary>
            Date string for the comment
            </summary>
        </member>
        <member name="P:AntDesign.Comment.DatetimeTemplate">
            <summary>
            Date content for the comment. Takes priority over <see cref="P:AntDesign.Comment.Datetime"/>
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Actions">
            <summary>
            List of actions to show at the bottm of the comment
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Placement">
            <summary>
            Sets the direction of the comment with <see cref="T:AntDesign.CommentPlacement" />.
            </summary>
            <default value="left"/>
        </member>
        <member name="P:AntDesign.AntComponentBase.RefBack">
            <summary>
            A <see cref="T:AntDesign.ForwardRef" /> instance. You can get a reference to the internal DOM by using <see cref="P:AntDesign.ForwardRef.Current" />.
            </summary>
        </member>
        <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,System.Boolean)">
            <summary>
            Standard Focus. From Net5 uses Blazor extension method on ElementReference.
            Before, uses JS implemented exactly the same as Net5 JS.
            </summary>
            <param name="target">Element that will receive focus.</param>
            <param name="preventScroll">Whether to scroll to focused element</param>
        </member>
        <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus with behaviors. Behavior will work only for elements that are
            HTMLInputElement or HTMLTextAreaElement. Otherwise will only focus.
            </summary>
            <param name="target">Element that will receive focus.</param>
            <param name="behavior">Behavior of focused element</param>
            <param name="preventScroll">Whether to scroll to focused element</param>
        </member>
        <member name="M:AntDesign.AntComponentBase.BlurAsync(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Standard Blur. Uses JS interop.
            </summary>
            <param name="target">Element that will receive focus.</param>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Id">
            <summary>
            ID for the component's HTML
            </summary>
            <default value="Uniquely Generated ID" />
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Ref">
            <summary>
            Returned ElementRef reference for DOM element.
            It would set the value into <see cref="P:AntDesign.AntComponentBase.RefBack"/> that user can get the <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> outside.
            </summary>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Class">
            <summary>
            Specifies one or more class names for an DOM element.
            </summary>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Style">
            <summary>
            Specifies an inline style for a DOM element.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.AutoFocus">
            <summary>
            Whether to autofocus on the input or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.Checked">
            <summary>
            If the input is checked or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.OnChange">
            <summary>
            Callback executed when the input changes
            </summary>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.CheckedChanged">
            <summary>
            Gets or sets a callback that updates the bound checked value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.Disabled">
            <summary>
            Disable the input
            </summary>
            <default value="false"/>
        </member>
        <member name="T:AntDesign.AntInputComponentBase`1">
            <summary>
            Base class for any input control that optionally supports an <see cref="P:AntDesign.AntInputComponentBase`1.EditContext"/>.
            reference:https://github.com/dotnet/aspnetcore/blob/master/src/Components/Web/src/Forms/InputBase.cs
            </summary>
            <typeparam name="TValue">the natural type of the input's value</typeparam>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValidationMessages">
            <summary>
            Validation messages for the FormItem
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.AdditionalAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the created element.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValueChanged">
            <summary>
            Callback that updates the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValueExpression">
            <summary>
            An expression that identifies the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValuesExpression">
            <summary>
            An expression that identifies the enumerable of bound values.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.Size">
            <summary>
            The size of the input box. Note: in the context of a form,
            `InputSize.Large` is used. Available: `InputSize.Large` `InputSize.Default` `InputSize.Small`
            </summary>
            <default value="InputSize.Default"/>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CultureInfo">
            <summary>
            What Culture will be used when converting string to value and value to string
            Useful for InputNumber component.
            </summary>
            <default value="CultureInfo.CurrentCulture"/>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.EditContext">
            <summary>
            Gets the associated <see cref="P:AntDesign.AntInputComponentBase`1.EditContext"/>.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.FieldIdentifier">
            <summary>
            Gets the <see cref="P:AntDesign.AntInputComponentBase`1.FieldIdentifier"/> for the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CurrentValue">
            <summary>
            Gets or sets the current value of the input.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString">
            <summary>
            Gets or sets the current value of the input, represented as a string.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Forms.InputBase`1"/>.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.FormatValueAsString(`0)">
            <summary>
            Formats the value as a string. Derived classes can override this to determine the formating used for <see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString"/>.
            </summary>
            <param name="value">The value to format.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <summary>
            Parses a string to create an instance of <typeparamref name="TValue"/>. Derived classes can override this to change how
            <see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString"/> interprets incoming values.
            </summary>
            <param name="value">The string value to be parsed.</param>
            <param name="result">An instance of <typeparamref name="TValue"/>.</param>
            <param name="validationErrorMessage">If the value could not be parsed, provides a validation error message.</param>
            <returns>True if the value could be parsed; otherwise false.</returns>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.OnValueChange(`0)">
            <summary>
            When this method is called, Value is only has been modified, but the ValueChanged is not triggered, so the outside bound Value is not changed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.OnValueChangeAsync(`0)">
            <summary>
            When this method is called, Value is only has been modified, but the ValueChanged is not triggered, so the outside bound Value is not changed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.OnCurrentValueChange(`0)">
            <summary>
            When this method is called, Value and CurrentValue have been modified, and the ValueChanged has been triggered, so the outside bound Value is changed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.NameAttributeValue">
            <summary>
            Gets the value to be used for the input's "name" attribute.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.TemplateComponentBase`1">
            <summary>
            
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
        </member>
        <member name="P:AntDesign.TemplateComponentBase`1.Options">
            <summary>
            The options that allow you to pass in templates from the outside
            </summary>
        </member>
        <member name="T:AntDesign.CloseEventArgs`1">
            <summary>
            Can be used to conditionally block closing events
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AntDesign.CloseEventArgs`1.Cancel">
            <summary>
            If true, the component will be prevented from closing
            </summary>
        </member>
        <member name="T:AntDesign.Color">
            <summary>
            Ant Design Color: https://ant.design/docs/spec/colors
            </summary>
        </member>
        <member name="M:AntDesign.Core.Extensions.ArrayExtensions.Scroll``1(``0[],System.Int32)">
            <summary>
            scroll left the elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Append text if condition is <c>true</c>
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCode`1">
            <summary>
            Provides a hash comparison of two parameter values
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCode`1.HashCodeEquals(`0,`0)">
            <summary>
            Calculate whether the hash of two parameter values is equal
            </summary>
            <param name="parameter1">Parameter 1</param>
            <param name="parameter2">Parameter 2</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCode`1.GetHashCode(`0)">
            <summary>
            Calculate the hash value of the parameter
            </summary>
            <param name="parameter">Parameter</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeExtensions">
            <summary>
            Provide HashCode calculation of component parameters and other functions
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeExtensions.GetParametersHashCode``1(``0)">
            <summary>
            Compute the HashCode for all parameters
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="component">Component</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider">
            <summary>
            HashCode provider
            <para>It is used to calculate the parameter value of HashCode</para>
            <para>The collection type computes the HashCode for each element,
            and the other types simply return the value raised by the default GetHashCode method of the object
            </para>
            <para>For the consideration of reflection performance, the complex model will not disassemble and calculate the HashCode of its attributes, so it is suggested that the model rewrite the GetHashCode method by itself</para>
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.GetHashCode(System.Object)">
            <summary>
            Gets the hash value of the parameter value
            </summary>
            <param name="parameter">Parameter type</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.Create(System.Type)">
            <summary>
            Create the appropriate hash provider for the parameter
            </summary>
            <param name="parameterType">Parameter type</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.EnumerableHashCodeProvider">
            <summary>
            The hash provider for the IEnumerable type
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.DictionaryHashCodeProvider">
            <summary>
            The hash providers for dictionary types
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.OtherHashCodeProvider">
            <summary>
            The hash providers for other types
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.ParameterDescriptor`1">
            <summary>
            Represents a parameter descriptor for a component
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="F:AntDesign.Core.HashCodes.ParameterDescriptor`1.Descriptors">
            <summary>
            Gets a description of all the parameters of the component
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            A parameter descriptor for a component
            </summary>
            <param name="property">属性类型</param>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.IsEventCallBack(System.Reflection.PropertyInfo)">
            <summary>
            Check whether it is of type EventCallback
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.CreateGetFunc(System.Reflection.PropertyInfo)">
            <summary>
            Create the get delegate for the property
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.GetValueHashCode(`0)">
            <summary>
            Returns the hash of the parameter value
            </summary>
            <param name="component">组件</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.Formatter`1.ParseSpanTimeFormatString(System.String)">
            <summary>
            parse other characters in format string.
            </summary>
            <remarks>refer to https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings#other-characters</remarks>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.Formatter.ToPercentWithoutBlank(System.Double)">
            <summary>
            under WASM mode, when format a double number to percentage, there will be a blank between number and %, '35.00 %'
            use this method instead to avoid the blank space
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``2(``0,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``1(System.Object,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet(System.Object,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``2(``0,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``1(System.Object,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault(System.Object,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet(System.Object,System.String,System.Object)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``2(``0,System.String,``1)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
            <typeparam name="TITem"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``1(System.Object,System.String,``0)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get a get value delegate, the type of the delegate depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Func&lt;TItem, TValue&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;object, TValue&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;object, object&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;TItem, TValue?&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Func&lt;object, TValue?&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Func&lt;object, object?&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = true.<br/>
            </summary>
            <param name="itemType">Type of access object</param>
            <param name="path">String path</param>
            <param name="paramType">If you want to pass in the item as an object, set it to true</param>
            <param name="valueType">If you want to get the value as an object, set it to true</param>
            <param name="checkNull">If true, the delegate will check the path is not null and return value or default value, if the type of return value is ValueType, the delegate will return Nullable&lt;T&gt;,
            if false, the delegate will not check the path not null, so that if the path contains null value or key not found, it will throw exception</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get a get value lambda expression, the type of the lambda expression depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Expression&lt;Func&lt;TItem, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;object, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;object, object&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;TItem, TValue?&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Expression&lt;Func&lt;object, TValue?&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Expression&lt;Func&lt;object, object?&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = true.<br/>
            </summary>
            <param name="itemType">Type of access object</param>
            <param name="path">String path</param>
            <param name="paramType">If you want to pass in the item as an object, set it to true</param>
            <param name="valueType">If you want to get the value as an object, set it to true</param>
            <param name="checkNull">If true, the delegate will check the path is not null and return value or default value, if the type of return value is ValueType, the delegate will return Nullable&lt;T&gt;,
            if false, the delegate will not check the path not null, so that if the path contains null value or key not found, it will throw exception</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetExpression(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get the get value expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <param name="paramType"></param>
            <param name="valueType"></param>
            <param name="checkNull"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get a set value delegate, the type of the delegate depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Action&lt;TItem, TValue&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Action&lt;object, TValue&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Action&lt;object, object&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object).<br/>
            </summary>
            <param name="itemType">Type of item</param>
            <param name="path">Member path string</param>
            <param name="paramType">Type of incoming object</param>
            <param name="valueType">Type of the assignment object</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get a set value lambda expression, the type of the lambda expression depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Expression&lt;Action&lt;TItem, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Expression&lt;Action&lt;object, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Expression&lt;Action&lt;object, object&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object).<br/>
            </summary>
            <param name="itemType">Type of item</param>
            <param name="path">Member path string</param>
            <param name="paramType">Type of incoming object</param>
            <param name="valueType">Type of the assignment object</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetExpression(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get the set value expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <param name="paramType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``2(System.String)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``1(System.String,System.Type)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``2(System.String)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``1(System.String,System.Type)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``2(System.String)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``1(System.String,System.Type)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault(System.String,System.Type)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``2(System.String)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``1(System.String,System.Type)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault(System.String,System.Type)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``2(System.String)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``1(System.String,System.Type)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``2(System.String)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``1(System.String,System.Type)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            C.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetPropertyOrNull(System.Linq.Expressions.Expression,System.String)">
            <summary>
            C?.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ValueTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            V.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValueOrNull(System.Linq.Expressions.Expression)">
            <summary>
            NV?.Value
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValue(System.Linq.Expressions.Expression)">
            <summary>
            NV!.Value, maybe InvalidOperationException for no value
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetPropOrNull(System.Linq.Expressions.Expression,System.String)">
            <summary>
            NV?.Value.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            NV!.Value.Prop, maybe InvalidOperationException for no value
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsClass(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is class, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsValueType(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is ValueType and not Nullable&lt;T&gt;, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsNullableTypeOrThrow(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is Nullable&lt;T&gt;, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.GetRootParameterExpression(System.Linq.Expressions.Expression)">
            <summary>
            expression should be like: ParameterExpression->MemberExpression1->MemberExpression2... ,
            if the root for 'expression' is not ParameterExpression, this will return null.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.TryConvertToNullable(System.Linq.Expressions.Expression)">
            <summary>
            Try convert Expression type to Nullable type, only Non-Nullable ValueType can be converted
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ParseIndexAccess(System.String)">
            <summary>
            Check if property string has index operation and parse to Expression
            </summary>
            <param name="property"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.None">
            <summary>
            Do not auto adjust
            </summary>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.InView">
            <summary>
            The default, the viewport boundaries are the boundaries that are used for calculation if overlay 
            is fully visible.
            Attempt to fit the overlay so it is always fully visible in the viewport.
            So if the overlay is outside of the viewport ("overflows"), then reposition calculation is going 
            to be attempted.
            </summary>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.InScroll">
            <summary>
            The document boundaries are the boundaries used for calculation if overlay needs to be reposition. 
            So even if the overlay is outside of the viewport, the overlay may still be shown as long as it 
            does not "overflow" the document boundaries.
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Initing">
            <summary>
            组件初始化中
            Component initialization in progress
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Inited">
            <summary>
            组件初始化完毕
            Component initialization completed
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Opening">
            <summary>
            用于在 parameter 属性中设置，表明组件正在第一次渲染中
            Used to set in the parameter property, Indicates that the component is rendering for the first time
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Opened">
            <summary>
            一旦打开时经历过一次 OnAfterRender/OnAfterRenderAsync，就变成此状态
            Once the component has experienced OnAfterRender/OnAfterRenderAsync once when it is opened, it becomes this state
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Closing">
            <summary>
            用于在 parameter 属性中设置，表明组件正在关闭中
            Used to set in the parameter property, indicating that the component is closing
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Closed">
            <summary>
            一旦关闭时经历过一次 OnAfterRender/OnAfterRenderAsync，就变成此状态
            Once OnAfterRender/OnAfterRenderAsync is experienced once when closing, it becomes this state
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Destroying">
            <summary>
            用于在 parameter 属性中设置，表明组件正则销毁中、
            Used to set in the parameter attribute, indicating that the component is in regular destruction
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Destroyed">
            <summary>
            一旦销毁时经历过一次 OnAfterRender，就变成此状态
            Once OnAfterRender/OnAfterRenderAsync is experienced once during destruction, it becomes this state
            </summary>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.Is(AntDesign.ComponentStatus,AntDesign.ComponentStatus)">
            <summary>
            return <paramref name="componentStatus"/> is <paramref name="status"/>
            </summary>
            <param name="componentStatus"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsOpen(AntDesign.ComponentStatus)">
            <summary>
            Is ComponentStatus.Opening or ComponentStatus.Opened
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsNotOpen(AntDesign.ComponentStatus)">
            <summary>
            Is not ComponentStatus.Opening and is not ComponentStatus.Opened
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsClose(AntDesign.ComponentStatus)">
            <summary>
            Is ComponentStatus.Closing or ComponentStatus.Closed
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Default">
            <summary>
            Default generic validation error message
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Required">
            <summary>
            Default validation message for the Required rule
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Enum">
            <summary>
            Default validation message for the Enum rule
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Whitespace">
            <summary>
            Default validation message for the Whitespace rule
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Date">
            <summary>
            Messages for date type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Types">
            <summary>
            Messages for when a field's type does not match the expected type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.String">
            <summary>
            Messages for string type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Number">
            <summary>
            Messages for string type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Array">
            <summary>
            Messages for array type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Pattern">
            <summary>
            Messages for the Pattern validation rule
            </summary>
        </member>
        <member name="T:AntDesign.EventUtil">
            <summary>
            avoid component re-rendering caused by events to Blazor components.(pure event handlers)
            <para>
                author: SteveSandersonMS, from <see href="https://gist.github.com/SteveSandersonMS/8a19d8e992f127bb2d2a315ec6c5a373"/>.
            </para>
            <para>
                issue: <seealso href="https://github.com/dotnet/aspnetcore/issues/18919#issuecomment-735969441"/>.
            </para>
            </summary>
        </member>
        <member name="M:AntDesign.core.Extensions.DataConversionExtensions.Convert``2(``0)">
            <summary>
            Converts the generic type TFrom to the specified TTo type
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="fromValue"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.core.Extensions.HttpClientExtensions.ReadAsByteArrayAsync(System.Net.Http.HttpContent,System.Text.Encoding)">
            <summary>
            Reads as a binary array and converts to the specified encoding
            </summary>
            <param name="httpContent"></param>
            <param name="dstEncoding">The target encoding</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:AntDesign.core.Extensions.HttpClientExtensions.GetEncoding(System.Net.Http.HttpContent)">
            <summary>
            Get encoding information from <see cref="T:System.Net.Http.HttpContent"/>
            </summary>
            <param name="httpContent"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.EnumerableExtensions.AddIf``1(System.Collections.Generic.IList{``0},System.Boolean,``0)">
            <summary>
            add item to items when condition is true
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="condition"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackComponent`1">
            <summary>
            Feedback Component
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
        </member>
        <member name="P:AntDesign.FeedbackComponent`1.FeedbackRef">
            <summary>
            The options that allow you to pass in templates from the outside
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackComponent`1.OkCancelRef">
            <summary>
            
            </summary>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.CloseFeedbackAsync">
            <summary>
            In order that the user can close the template through the button
            为了用户可以在模板内通过按钮主动关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered, which can be used to cancel closing
            在 OK 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered, which can be used to cancel closing
            在 Cancel 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered, which can be used to cancel closing
            在 OK 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered, which can be used to cancel closing
            在 Cancel 按钮触发时回调，可以用来取消关闭
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackComponent`2">
            <summary>
            Feedback Component
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.FeedbackComponent`2.OkCancelRefWithResult">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.FeedbackRefBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefBase.AntDesign#IFeedbackRef#ModalTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefBase.OnOpen">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.FeedbackRefBase.OnClose">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.FeedbackRefBase.OpenAsync">
            <summary>
            just open close feedback component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackRefBase.UpdateConfigAsync">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.FeedbackRefBase.CloseAsync">
            <summary>
            just do close feedback component, and will not trigger OkAsync or OkCancel 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackRefWithOkCancelBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnCancel">
            <summary>
            invoke when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnOk">
            <summary>
            invoke when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.FeedbackRefWithOkCancelBase.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackRefWithOkCancelBase.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IFeedbackRef">
            <summary>
            Component reference with open and close method
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.ModalTemplate">
            <summary>
            to get feedback inner component's event 
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.OnOpen">
            <summary>
            on Feedback open
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.OnClose">
            <summary>
            on Feedback close
            </summary>
        </member>
        <member name="M:AntDesign.IFeedbackRef.OpenAsync">
            <summary>
            open the component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IFeedbackRef.UpdateConfigAsync">
            <summary>
            update the component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IFeedbackRef.CloseAsync">
            <summary>
            just do close feedback component, and will not trigger OkAsync or OkCancel 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IOkCancelRef">
            <summary>
            Component reference with Ok and Cancel method
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef.OnCancel">
            <summary>
            invoked when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef.OnOk">
            <summary>
            invoked when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.IOkCancelRef.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
             Trigger Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IOkCancelRef.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
             Trigger Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IOkCancelRef`1">
            <summary>
            Component&lt;&gt; reference with Ok and Cancel method
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.IOkCancelRef`1.OnCancel">
            <summary>
            invoke when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef`1.OnOk">
            <summary>
            invoke when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.IOkCancelRef`1.OkAsync(`0)">
            <summary>
            Trigger Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IOkCancelRef`1.CancelAsync(`0)">
            <summary>
            Trigger Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAtLast">
            <summary>
            When focuses, cursor will move to the last character
            This is default behavior.
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAtFirst">
            <summary>
            When focuses, cursor will move to the first character
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAndSelectAll">
            <summary>
            When focuses, the content will be selected
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAndClear">
            <summary>
            When focuses, content will be cleared
            </summary>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfDecade(System.DateTime)">
            <summary>
            for example,
            when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2030-01-01 00:00:00, it's the start date of next 10 years
                
            when currentDateTime is 2023-01-04 05:34:55 then: 
                the next date shouble be 2030-01-01 00:00:00, it's the start date of next 10 years
                
            when currentDateTime is 2018-01-04 05:34:55 then: 
                the next date shouble be 2020-01-01 00:00:00, it's the start date of next 10 years
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfYear(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2021-01-01 00:00:00, it's the start date of next year
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfQuarter(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2020-04-01 00:00:00, it's the start date of the next quarter in 2020
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfMonth(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2020-02-01 00:00:00 , it's the start date of next month
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfDay(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2021-01-05 00:00:00, it's the start date of next day
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddYearsSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddYears逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddYears by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddMonthsSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddMonths逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddMonths by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddDaysSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddDays逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddDays by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.HtmlRenderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@)">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.HtmlRenderer.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.RerenderStrategy">
            <summary>
            Rerender strategy
            </summary>
        </member>
        <member name="F:AntDesign.RerenderStrategy.Always">
            <summary>
            Always to rerender
            </summary>
        </member>
        <member name="F:AntDesign.RerenderStrategy.ParametersHashCodeChanged">
            <summary>
            Rerender only when any of the component's parameter values are changed
            </summary>
        </member>
        <member name="T:AntDesign.DatePicker`1">
                <summary>
                <para>To select or input a date.</para>
            
                <h2>When To Use</h2>
            
                <para>By clicking the input box, you can select a date from a popup calendar.</para>
                </summary>
                <seealso cref="T:AntDesign.MonthPicker`1"/>
                <seealso cref="T:AntDesign.RangePicker`1"/>
                <seealso cref="T:AntDesign.WeekPicker`1"/>
                <seealso cref="T:AntDesign.YearPicker`1"/>
                <seealso cref="T:AntDesign.QuarterPicker`1"/>
                <seealso cref="T:AntDesign.TriggerBoundaryAdjustMode"/>
        </member>
        <member name="P:AntDesign.DatePicker`1.OnChange">
            <summary>
            Callback executed when the selected value changes
            </summary>
        </member>
        <member name="P:AntDesign.DatePicker`1.Disabled">
            <summary>
            Disable the date picker. 
            </summary>
        </member>
        <member name="M:AntDesign.DatePicker`1.FocusAsync">
            <summary>
            Add focus to picker input
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePicker`1.BlurAsync">
            <summary>
            Remove focus from picker input
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method is called via EventCallBack if the keyboard key is no longer pressed inside the Input element.
            </summary>
            <param name="e">Contains the key (combination) which was pressed inside the Input element</param>
        </member>
        <member name="M:AntDesign.DatePicker`1.GetIndexValue(System.Int32)">
            <summary>
            Get value of the picker
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ChangeOnClose">
            <summary>
            Saving the input value after blur
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.IsNullable">
            <summary>
            Stores information if TValue is a nullable type.
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Picker">
            <summary>
            Set picker type
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.PopupContainerSelector">
            <summary>
            Selector for placing the container of the popup in
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening)
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Bordered">
            <summary>
            Show a border or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.AutoFocus">
            <summary>
            Autofocus on the input or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Open">
            <summary>
            If the picker is open or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DatePickerBase`1.InputReadOnly">
            <summary>
            If the picker is read-only or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ShowToday">
            <summary>
            Whether to show the Today button which selects Today from any date
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Mask">
            <summary>
            Locale for localizing UI strings
            </summary>
            <default value="LocaleProvider.CurrentLocale.DatePicker" />
        </member>
        <member name="P:AntDesign.DatePickerBase`1.CultureInfo">
            <summary>
            CultureInfo to use for localization
            </summary>
            <default value="CultureInfo for Locale"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.IsShowTime">
            <summary>
            If time should be shown or not. Contains the boolean decision made from setting <see cref="P:AntDesign.DatePickerBase`1.ShowTime" />
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ShowTimeFormat">
            <summary>
            Time format when showing time. Contains the string format from setting <see cref="P:AntDesign.DatePickerBase`1.ShowTime" /> with a string
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ShowTime">
            <summary>
            Show time or not. 
            <para>When boolean, it sets ShowTime to the boolean.</para>
            <para>When string, it sets ShowTime to true and uses the string value as the time format.</para>
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.AllowClear">
            <summary>
            Allow clearing the selected value or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Placeholder">
            <summary>
            Placeholder for input
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.PopupStyle">
            <summary>
            Style applied to popup
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ClassName">
            <summary>
            Picker class name
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DropdownClassName">
            <summary>
            Class name for popover dropdown
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Format">
            <summary>
            Format for the DateTime display
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DefaultPickerValue">
            <summary>
            Default value of the picker
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.SuffixIcon">
            <summary>
            Custom suffix icon
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Ranges">
            <summary>
            Range selection presets to allow the user to select a range with one button click
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.RenderExtraFooter">
            <summary>
            Extra content to display in picker footer
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnClearClick">
            <summary>
            Callback executed when clear is clicked
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnClear">
            <summary>
            Called when clear button clicked.
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnOk">
            <summary>
            Callback executed when ok is clicked
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnOpenChange">
            <summary>
            Callback executed when popover calendar is opened or closed
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnPanelChange">
            <summary>
            Callback executed when the type of panel displayed changes
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledDate">
            <summary>
            Function to determine if a provided date should be disabled
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledHours">
            <summary>
            Function to determine if a hours in a date should be disabled
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledMinutes">
            <summary>
            Function to determine if a minutes in a date should be disabled
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledSeconds">
            <summary>
            Function to determine if a seconds in a date should be disabled
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledTime">
            <summary>
            Function to determine what pieces of time should be disabled in a date
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DateRender">
            <summary>
            Custom rendering for date cells
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.MonthCellRender">
            <summary>
            Custom rendering for month cells
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Placement">
            <summary>
            The position where the selection box pops up
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Use12Hours">
            <summary>
            When true, will use 12 hour time. When false will use 24 hour time
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DatePickerBase`1.AntDesign#IDatePicker#CurrentDate">
            <summary>
            Date used for "Today"
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.IsRange">
            <summary>
            If picker is a range picker or not
            </summary>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.Close">
            <summary>
            Close the popover
            </summary>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.Focus(System.Int32)">
            <summary>
            Add focus to picker
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.Blur(System.Int32)">
            <summary>
            Remove focus from picker
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.GetOnFocusPickerIndex">
            <summary>
            Get index of picker which is currently focused
            </summary>
            <returns>Index of picker. 0 can also mean neither is focused.</returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.GetIndexPickerValue(System.Int32)">
            <summary>
            Get pickerValue by picker index. Note that index refers to a picker panel
            and not to input text. For RangePicker 2 inputs generate 2 panels.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.ChangePickerValue(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Changes what date(s) will be visible on the picker.
            </summary>
            <param name="date">New date to be saved.</param>
            <param name="index">Index of the input box, where 0 = inputStart and 1 = inputEnd (only RangePicker)</param>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.ChangeValue(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Change the value of the given picker panel
            </summary>
            <param name="value">Value to change to</param>
            <param name="index">Index of the picker panel to change</param>
            <param name="closeDropdown">Close the panel when set or not</param>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.ClearValue(System.Int32,System.Boolean)">
            <summary>
            Clear the value for the given picker panel index
            </summary>
            <param name="index">Index of the picker panel to clear</param>
            <param name="closeDropdown">Close the panel when cleared or not</param>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.GetIndexValue(System.Int32)">
            <summary>
            Get value of picker panel at index
            </summary>
            <param name="index">Index of picker panel to get value of</param>
            <returns>DateTime value of panel</returns>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.IsShowTime">
            <summary>
            Used only by DatePickerWithTimePanel
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.DateRender">
            <summary>
            for Calendar.DateFullCellRender、DatePicker.DateRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.MonthCellRender">
            <summary>
            for Calendar.MonthFullCellRender、DatePicker.MonthCellRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.CalendarDateRender">
            <summary>
            for Calendar.DateCellRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.CalendarMonthCellRender">
            <summary>
            for Calendar.MonthCellRender
            </summary>
        </member>
        <member name="M:AntDesign.DayOfWeekHelper.GetDiffForDayOfWeek(System.DayOfWeek)">
            <summary>
                Returns the amount of days that have to be added to the start date to get the correct first day of the week.
            </summary>
            <param name="firstDayOfWeek">First day of the week as defined in the current locale.</param>
            <returns>Diff of days.</returns>
        </member>
        <member name="P:AntDesign.RangePicker`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="P:AntDesign.RangePicker`1.OnChange">
            <summary>
            Callback executed when range selected changes
            </summary>
        </member>
        <member name="M:AntDesign.RangePicker`1.FocusAsync(System.Int32)">
            <summary>
            Add focus to picker input
            </summary>
            <param name="index">Panel index, 0 for start, 1 for end</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.RangePicker`1.BlurAsync(System.Int32)">
            <summary>
            Remove focus from picker input
            </summary>
            <param name="index">Panel index, 0 for start, 1 for end</param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.RangePicker`1.Disabled">
            <summary>
            Disable the date picker. 
            When given a single boolean, it will disable all of it. 
            When given an array of booleans, it represents disabling the start/end of a range: [start, end]
            </summary>
        </member>
        <member name="M:AntDesign.RangePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Int32)">
            <summary>
            Method is called via EventCallBack if the keyboard key is no longer pressed inside the Input element.
            </summary>
            <param name="e">Contains the key (combination) which was pressed inside the Input element</param>
            <param name="index">Refers to picker index - 0 for starting date, 1 for ending date</param>
        </member>
        <member name="M:AntDesign.RangePicker`1.OnValueChange(`0)">
            <summary>
            Handle change of values.
            When values are changed, PickerValues should point to those new values
            or current date if no values were passed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.RangePicker`1.GetIndexValue(System.Int32)">
            <summary>
            Get value by picker index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.RangePickerDefaults">
            <summary>
            Evaluates what values should be inserted to PickerValues (the date each
            picker will focus on when first shown).
            </summary>
        </member>
        <member name="T:AntDesign.Descriptions">
                <summary>
                <para>Display multiple read-only fields in groups.</para>
            
                <h2>When To Use</h2>
            
                <para>Commonly displayed on the details page.</para>
                </summary>
                <seealso cref="T:AntDesign.DescriptionsItem"/>
        </member>
        <member name="P:AntDesign.Descriptions.Bordered">
            <summary>
            Whether to display the border
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Descriptions.Layout">
            <summary>
            Layout - Horizontal or Vertical
            </summary>
            <default value="DescriptionsLayout.Horizontal"/>
        </member>
        <member name="P:AntDesign.Descriptions.Column">
            <summary>
            The number of <see cref="T:AntDesign.DescriptionsItem"/> elements in a row. Could be a number or a object like { xs: 8, sm: 16, md: 24}
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.Size">
            <summary>
            Size of the list
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.Title">
            <summary>
            Title shown at the top of the element
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.TitleTemplate">
            <summary>
            Title content shown at the top of the element. Takes priority over <see cref="P:AntDesign.Descriptions.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.Colon">
            <summary>
            Change default props <c>Colon</c> value of <see cref="T:AntDesign.DescriptionsItem"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.ChildContent">
            <summary>
            Content for the element. Typically contains <see cref="T:AntDesign.DescriptionsItem"/> elements
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.Title">
            <summary>
            Title for the item
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.TitleTemplate">
            <summary>
            Title content for the item. Takes priority over <see cref="P:AntDesign.DescriptionsItem.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.Span">
            <summary>
            Span of the item
            </summary>
            <default value="1"/>
        </member>
        <member name="P:AntDesign.DescriptionsItem.ChildContent">
            <summary>
            Content for the item
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.LabelStyle">
            <summary>
            Customize the style of the label
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.ContentStyle">
            <summary>
            Customize the style of the content
            </summary>
        </member>
        <member name="T:AntDesign.Divider">
                <summary>
                    <para>A divider line separates different content.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>Divide sections of article.</item>
                        <item>Divide inline text and links such as the operation column of table.</item>
                    </list>
                </summary>
        </member>
        <member name="P:AntDesign.Divider.ChildContent">
            <summary>
            Content to show inside the divider
            </summary>
        </member>
        <member name="P:AntDesign.Divider.Text">
            <summary>
            Text to show inside the divider
            </summary>
        </member>
        <member name="P:AntDesign.Divider.Plain">
            <summary>
            When false, the text will not be a header style. When true it will be header style.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Divider.Type">
            <summary>
            Type of divider - `DividerType.Horizontal` | `DividerType.Vertical`
            </summary>
            <default value="DividerType.Horizontal" />
        </member>
        <member name="P:AntDesign.Divider.Orientation">
            <summary>
            Content/Text orientation - `DividerOrientation.Left` | `DividerOrientation.Right` | `DividerOrientation.Center`. Ignored when not using `Text` or `ChildContent`
            </summary>
            <default value="DividerOrientation.Center" />
        </member>
        <member name="P:AntDesign.Divider.Dashed">
            <summary>
            Whether to style the line as dashed or not.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DrawerOpenEventArgs.Cancel">
            <summary>
            获取或设置一个值，该值指示是否应取消事件。
            返回结果: true 如果应取消事件;否则为 false。
            Gets or sets a value indicating whether the event should be cancelled.
            Return result: true if the event should be cancelled; otherwise false.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Content">
            <summary>
            The drawer body content.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Closable">
            <summary>
            Whether a close (x) button is visible on top right of the Drawer dialog or not.	
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.DrawerOptions.MaskClosable">
            <summary>
            Clicking on the mask (area outside the Drawer) to close the Drawer or not.	
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Mask">
            <summary>
            Whether to show mask or not.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Keyboard">
            <summary>
            Whether to support keyboard esc off	
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Title">
            <summary>
            The title for Drawer.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Placement">
            <summary>
            The placement of the Drawer - Possible values: "left", "right", "top", "bottom"
            </summary>
            <default value="DrawerPlacement.Right" />
        </member>
        <member name="P:AntDesign.DrawerOptions.MaskStyle">
            <summary>
            Style for Drawer's mask element.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.BodyStyle">
            <summary>
            Body style for Drawer body element. Such as height, padding etc.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.HeaderStyle">
            <summary>
            Header style for Drawer header element. Such as height, padding etc.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.WrapClassName">
            <summary>
            The class name of the container of the Drawer dialog.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Width">
            <summary>
            Width of the Drawer dialog.
            </summary>
            <default value="256" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Height">
            <summary>
            Height of the Drawer dialog, only when placement is 'top' or 'bottom'.
            </summary>
            <default value="256" />
        </member>
        <member name="P:AntDesign.DrawerOptions.ZIndex">
            <summary>
            The z-index of the Drawer.
            </summary>
            <default value="1000" />
        </member>
        <member name="P:AntDesign.DrawerOptions.OffsetX">
            <summary>
            The the X coordinate offset(px), only when placement is 'left' or 'right'.
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.DrawerOptions.OffsetY">
            <summary>
            The the Y coordinate offset(px), only when placement is 'top' or 'bottom'.
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Visible">
            <summary>
            If the drawer is visible or not
            </summary>
            <default value="false" />
        </member>
        <member name="T:AntDesign.Drawer">
                <summary>
                    <para>A panel which slides in from the edge of the screen.</para>
            
                    <h2>When To Use</h2>
                    <para>
                        A Drawer is a panel that is typically overlaid on top of a page and slides in from the side.
                        It contains a set of information or actions.
                        Since the user can interact with the Drawer without leaving the current page, tasks can be achieved more efficiently within the same context.
                    </para>
                    <list type="bullet">
                        <item>Use a Form to create or edit a set of information.</item>
                        <item>Processing subtasks. When subtasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task, Drawer comes very handy.</item>
                        <item>When the same Form is needed in multiple places.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.DrawerService" />
                <seealso cref="T:AntDesign.DrawerOptions" />
                <seealso cref="P:AntDesign.Drawer.DrawerRef" />
        </member>
        <member name="P:AntDesign.Drawer.ChildContent">
            <summary>
            The content of Drawer.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Content">
            <summary>
            The content of Drawer. <para>If <see cref="P:AntDesign.Drawer.Content"/> is a string, it will be rendered as HTML.</para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Closable">
            <summary>
            Whether a close (x) button is visible on top right of the Drawer dialog or not.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Drawer.MaskClosable">
            <summary>
            Clicking on the mask (area outside the Drawer) to close the Drawer or not.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Drawer.Mask">
            <summary>
            Whether to show mask or not.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Drawer.MaskStyle">
            <summary>
            Style for Drawer's mask element.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Keyboard">
            <summary>
            Whether to support keyboard esc off
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Drawer.Title">
            <summary>
            The title for Drawer.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Placement">
            <summary>
            The placement of the Drawer, option could be left, top, right, bottom
            </summary>
            <default value="right" />
        </member>
        <member name="P:AntDesign.Drawer.BodyStyle">
            <summary>
            Body style for modal body element. Such as height, padding etc.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.HeaderStyle">
            <summary>
            Header style for modal header element. Such as height, padding etc.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.WrapClassName">
            <summary>
            The class name of the container of the Drawer dialog. 
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Width">
            <summary>
            Width of the Drawer dialog, only when placement is 'left' or 'right'.
            </summary>
            <default value="256" />
        </member>
        <member name="P:AntDesign.Drawer.Height">
            <summary>
            Height of the Drawer dialog, only when placement is 'top' or 'bottom'.
            </summary>
            <default value="256" />
        </member>
        <member name="P:AntDesign.Drawer.ZIndex">
            <summary>
            The z-index of the Drawer.
            </summary>
            <default value="1000" />
        </member>
        <member name="P:AntDesign.Drawer.OffsetX">
            <summary>
            The the X coordinate offset(px), only when placement is 'left' or 'right'.
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Drawer.OffsetY">
            <summary>
            The the Y coordinate offset(px), only when placement is 'top' or 'bottom'.
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Drawer.Visible">
            <summary>
            Whether the Drawer dialog is visible or not.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Drawer.VisibleChanged">
            <summary>
            EventCallback trigger on Visible was changed.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OnOpen">
            <summary>
            Specify a callback that will be called before drawer displayed
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OnClose">
            <summary>
            Specify a callback that will be called when a user clicks mask, close button or Cancel button.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OffsetTransform">
            <summary>
            设置 Drawer 是否显示，以及显示时候的位置 Offset
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Transform">
            <summary>
            设置 Drawer 是否隐藏，以及隐藏时候的位置 Offset
            </summary>
        </member>
        <member name="M:AntDesign.Drawer.MaskClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            trigger when mask is clicked
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Drawer.CloseClick">
            <summary>
            trigger when Closer is clicked
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Drawer.HandleClose">
            <summary>
            clean-up after close
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnCreate(AntDesign.DrawerRef)">
            <summary>
            Create and Open a drawer
            </summary>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnUpdateEvent(AntDesign.DrawerRef)">
            <summary>
            Update drawer
            </summary>
            <param name="drawerRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnClose(AntDesign.DrawerRef)">
            <summary>
            Close the drawer
            </summary>
        </member>
        <member name="M:AntDesign.DrawerRef.CloseAsync">
            <summary>
            close drawer
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.OpenAsync">
            <summary>
            Open drawer
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.UpdateConfigAsync">
            <summary>
            update drawer config which Visible=true
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.UpdateConfigAsync(AntDesign.DrawerOptions)">
            <summary>
            update drawer config with a new options
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef`1.CloseAsync(`0)">
            <summary>
            关闭抽屉
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateAsync(AntDesign.DrawerOptions)">
            <summary>
            Create and open a simple drawer without result
            </summary>
            <param name="options">drawer options</param>
            <returns>The reference of drawer</returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateAsync``3(AntDesign.DrawerOptions,``1)">
            <summary>
            Create and open a drawer with the template
            </summary>
            <typeparam name="TComponent">The type of DrawerTemplate implement</typeparam>
            <typeparam name="TComponentOptions">The </typeparam>
            <typeparam name="TResult">The type of return value</typeparam>
            <param name="config"></param>
            <param name="options"></param>
            <returns>The reference of drawer</returns>
        </member>
        <member name="M:AntDesign.DrawerService.UpdateAsync(AntDesign.DrawerRef)">
            <summary>
            Update a drawer
            </summary>
            <param name="drawerRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateDialogAsync``3(AntDesign.DrawerOptions,``1)">
            <summary>
            Create and open a drawer
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="config"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Dropdown">
                <summary>
                <para>A dropdown list.</para>
            
                <h2>When To Use</h2>
            
                <para>
                    When there are more than a few options to choose from, you can wrap them in a <c>Dropdown</c>. 
                    By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.
                </para>
            
                <h2>Two types</h2>
            
                <para>There are 2 rendering approaches for <c>Dropdown</c>:</para>
                <list type="number">
                    <item>Wraps child element (content of the <c>Dropdown</c>) with a <c>div</c> (default approach).</item>
                    <item>
                        Child element is not wrapped with anything. This approach requires usage of <c>Unbound</c> tag inside <c>Dropdown</c> and depending on the child element type (please refer to the first example):
                        <list type="bullet">
                            <item>html tag: has to have its <c>@ref</c> set to <c>@context.Current</c> </item>
                            <item><c>Ant Design Blazor</c> component: has to have its <c>RefBack</c> attribute set to <c>@context</c>.</item>
                        </list>
                    </item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.DropdownButton"/>
        </member>
        <member name="P:AntDesign.Dropdown.Arrow">
            <summary>
            Whether the dropdown arrow should be visible.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Dropdown.ArrowPointAtCenter">
            <summary>
            Whether the dropdown arrow should point at center
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.Dropdown.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handle the trigger click.
            </summary>
            <param name="args">MouseEventArgs</param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.DropdownButton.Block">
            <summary>
            Option to fit button width to its parent width
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsRender">
            <summary>
            Fully customizable button.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsClass">
            <summary>
            Allows to set each button's css class either to the same string
            or separately.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsStyle">
            <summary>
            Allows to set each button's style either to the same string
            or separately.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.Danger">
            <summary>
            Set the danger status of button
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DropdownButton.Ghost">
            <summary>
            Used in situations with complex background, home pages usually.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DropdownButton.Icon">
            <summary>
            Icon that will be rendered in the right
            button.
            </summary>
            <default value="ellipsis" />
        </member>
        <member name="P:AntDesign.DropdownButton.Loading">
            <summary>
            Indicates if loading icon is going to be included.
            If set to true, then dropdown will not be active.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DropdownButton.Size">
            <summary>
            Button size.
            </summary>
            <default value="AntSizeLDSType.Default" />
        </member>
        <member name="P:AntDesign.DropdownButton.Type">
            <summary>
            Allows to set each button's type either to the same string
            or separately. Use AntDesign.ButtonType helper class.
            </summary>
            <default value="ButtonType.Default" />
        </member>
        <member name="M:AntDesign.DropdownButton.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Force overlay trigger to be attached to wrapping element of
            the right button. Right button has to be wrapped,
            because overlay will be looking for first child
            element of the overlay trigger to calculate the overlay position.
            If the right button was the trigger, then its first child
            would be the icon/ellipsis and the overlay would have been
            rendered too high.
            </summary>
            <param name="firstRender"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Empty">
                <summary>
                    <para>Empty state placeholder.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>When there is no data provided, display for friendly tips.</item>
                        <item>User tutorial to create something in fresh new situation.</item>
                    </list>
                </summary>
        </member>
        <member name="P:AntDesign.Empty.ImageStyle">
            <summary>
            Style for the wrapper of the image. Always used regardless of image type.
            </summary>
        </member>
        <member name="P:AntDesign.Empty.Small">
            <summary>
            Use small variant of Empty
            </summary>
        </member>
        <member name="P:AntDesign.Empty.Simple">
            <summary>
            Use simple variant of Empty. Changes image as well.
            </summary>
        </member>
        <member name="P:AntDesign.Empty.ChildContent">
            <summary>
            Content displayed after the empty view
            </summary>
        </member>
        <member name="P:AntDesign.Empty.Description">
            <summary>
            Locale configuration for the empty view
            </summary>
            <default value="No Data (in current locale)" />
        </member>
        <member name="P:AntDesign.Empty.DescriptionTemplate">
            <summary>
            Description content for the view. Takes priority over <see cref="P:AntDesign.Empty.Description"/>
            </summary>
        </member>
        <member name="P:AntDesign.Empty.Image">
            <summary>
            Image URL for view. Takes priority over <see cref="P:AntDesign.Empty.Simple"/>
            </summary>
        </member>
        <member name="P:AntDesign.Empty.ImageTemplate">
            <summary>
            Image content for empty view. Takes priority over <see cref="P:AntDesign.Empty.Image"/> and <see cref="P:AntDesign.Empty.Simple"/>
            </summary>
        </member>
        <member name="T:AntDesign.Flex">
                <summary>
                <para>A flex layout container for alignment.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>Good for setting spacing between elements.</item>
                    <item>Suitable for setting various horizontal and vertical alignments.</item>
                </list>
                
                <h3>Difference with Space component</h3>
                <list type="bullet">
                    <item>Space is used to set the spacing between inline elements. It will add a wrapper element for each child element for inline alignment. Suitable for equidistant arrangement of multiple child elements in rows and columns.</item>
                    <item>Flex is used to set the layout of block-level elements. It does not add a wrapper element. Suitable for layout of child elements in vertical or horizontal direction, and provides more flexibility and control.</item>
                </list>
            
                </summary>
        </member>
        <member name="P:AntDesign.Flex.Vertical">
            <summary>
            Is direction of the flex vertical, use flex-direction: column
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Direction">
            <summary>
            Sets the direction of the flex, either horizontal or vertical
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Wrap">
            <summary>
            Set whether the element is displayed in a single line or in multiple lines
            reference flex-wrap:https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Justify">
            <summary>
            Sets the alignment of elements in the direction of the main axis
            reference justify-content https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Align">
            <summary>
            Sets the alignment of elements in the direction of the cross axis
            reference align-items https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
            </summary>
        </member>
        <member name="P:AntDesign.Flex.FlexCss">
            <summary>
            flex CSS shorthand properties
            reference flex https://developer.mozilla.org/en-US/docs/Web/CSS/flex
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Gap">
            <summary>
            Sets the gap between grids
            small | middle | large | string | number
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Component">
            <summary>
            Custom element type
            </summary>
        </member>
        <member name="P:AntDesign.Flex.ChildContent">
            <summary>
            Set the child element
            </summary>
        </member>
        <member name="T:AntDesign.Form`1">
                <summary>
                <para>High performance Form component with data scope management. Including data collection, verification, and styles.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When you need to create an instance or collect information.</item>
                    <item>When you need to validate fields in certain rules.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.FormValidateMode"/>
                <seealso cref="T:AntDesign.FormItem" />
                <seealso cref="T:AntDesign.FormValidationRule"/>
                <seealso cref="T:AntDesign.FormValidateErrorMessages"/>
        </member>
        <member name="P:AntDesign.Form`1.RequiredMark">
            <summary>
            Change how required/optional field labels are displayed on the form.
            <list type="bullet">
                <item>Required - Will mark required fields</item>
                <item>Optional - Will mark optional fields</item>
                <item>None - Will mark no fields, regardless of required/optional</item>
            </list>
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Layout">
            <summary>
            Layout of form items in the form
            </summary>
            <default value="FormLayout.Horizontal"/>
        </member>
        <member name="P:AntDesign.Form`1.ChildContent">
            <summary>
            Content of the form. Typically contains different form inputs and layout elements.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.LabelCol">
            <summary>
            Control the layout of the label. Commonly used to set widths for different screen sizes.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.LabelAlign">
            <summary>
            Align the label to the left or right
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.LabelColSpan">
            <summary>
            Gets/sets the <c>Span</c> property on <see cref="P:AntDesign.Form`1.LabelCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.LabelColOffset">
            <summary>
            Gets/sets the <c>Offset</c> property on <see cref="P:AntDesign.Form`1.LabelCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.WrapperCol">
            <summary>
            Control the layout of the input element's wrapper. Commonly used to set widths for different screen sizes.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.WrapperColSpan">
            <summary>
            Gets/sets the <c>Span</c> property on <see cref="P:AntDesign.Form`1.WrapperCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.WrapperColOffset">
            <summary>
            Gets/sets the <c>Offset</c> property on <see cref="P:AntDesign.Form`1.WrapperColOffset"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Size">
            <summary>
            The size of the ant components inside the form
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Name">
            <summary>
            Gets or sets the form handler name. This is required for posting it to a server-side endpoint.
            Or using for get the form instance from <see cref="T:AntDesign.FormProviderFinishEventArgs"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Method">
            <summary>
            Http method used to submit form
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Model">
            <summary>
            The model to bind the form inputs to
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Loading">
            <summary>
            If the form is loading or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Form`1.OnFinish">
            <summary>
            Callback executed when the form is submitted and PASSES validation.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.OnFinishFailed">
            <summary>
            Callback executed when the form is submitted and FAILS validation.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.OnFieldChanged">
            <summary>
            Callback executed when a field inside the form changes
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.OnValidationRequested">
            <summary>
            Callback executed when validation is requested
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.OnValidationStateChanged">
            <summary>
            Callback executed when the validation changes
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Validator">
            <summary>
            Validator to use in the form. Used when <see cref="P:AntDesign.Form`1.ValidateMode"/> is <c>FormValidateMode.Default</c> or <c>FormValidateMode.Complex</c>
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.ValidateOnChange">
            <summary>
            Enable validation when component values change
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.ValidateMode">
            <summary>
            Which mode of validation the form should use
            </summary>
            <default value="FormValidateMode.Complex"/>
        </member>
        <member name="P:AntDesign.Form`1.Enhance">
            <summary>
            If enabled, form submission is performed without fully reloading the page. This is equivalent to adding data-enhance to the form.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Autocomplete">
            <summary>
            Whether input elements can by default have their values automatically completed by the browser
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Locale">
            <summary>
            The localization options
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.IsModified">
            <summary>
            A flag indicating if the form has been modified
            </summary>
        </member>
        <member name="M:AntDesign.Form`1.Reset">
            <summary>
            Reset all the values in the form
            </summary>
        </member>
        <member name="M:AntDesign.Form`1.Submit">
            <summary>
            Submit the form. Will trigger validation and either <see cref="P:AntDesign.Form`1.OnFinish"/> or <see cref="P:AntDesign.Form`1.OnFinishFailed"/>.
            </summary>
        </member>
        <member name="M:AntDesign.Form`1.Validate">
            <summary>
            Execute validation   
            </summary>
            <returns> return <c>true</c> if all fields are valid </returns>
        </member>
        <member name="M:AntDesign.Form`1.ValidationReset">
            <summary>
            Reset validation
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.EditContext">
            <summary>
            Get the <see cref="P:AntDesign.Form`1.EditContext"/> instance inner the form
            </summary>
        </member>
        <member name="M:AntDesign.Form`1.SetValidationMessages(System.String,System.String[])">
            <summary>
            Set validation messages to a specific field.
            </summary>
            <param name="field">The field name</param>
            <param name="errorMessages">The error messages</param>
        </member>
        <member name="P:AntDesign.FormItem.Name">
            <summary>
            Specific the name of the form item. It also can used as the Member Path for binding the property of the Model.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.ChildContent">
            <summary>
            Content for the form item. Typically will contain one of the input elements
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.Label">
            <summary>
            Custom label for the item. If neither <see cref="P:AntDesign.FormItem.Label"/> or <see cref="P:AntDesign.FormItem.LabelTemplate"/> are provided, the DisplayName attribute value or field name will be used (in that order).
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelTemplate">
            <summary>
            Custom label content for the item. Takes priority over <see cref="P:AntDesign.FormItem.Label"/>. If neither <see cref="P:AntDesign.FormItem.Label"/> or <see cref="P:AntDesign.FormItem.LabelTemplate"/> are provided, the DisplayName attribute value or field name will be used (in that order).
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelCol">
            <summary>
            Control the layout of the label. Commonly used to set widths for different screen sizes.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelAlign">
            <summary>
            Align the label to the left or right
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelColSpan">
            <summary>
            Gets/sets the <c>Span</c> property on <see cref="P:AntDesign.FormItem.LabelCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelColOffset">
            <summary>
            Gets/sets the <c>Offset</c> property on <see cref="P:AntDesign.FormItem.LabelCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.WrapperCol">
            <summary>
            Control the layout of the input element's wrapper. Commonly used to set widths for different screen sizes.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.WrapperColSpan">
            <summary>
            Gets/sets the <c>Span</c> property on <see cref="P:AntDesign.FormItem.WrapperCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.WrapperColOffset">
            <summary>
            Gets/sets the <c>Offset</c> property on <see cref="P:AntDesign.FormItem.WrapperColOffset"/>.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.NoStyle">
            <summary>
            No style when true, it is used as a pure field control
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.Required">
            <summary>
            Mark this item as required for validation purposes
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelStyle">
            <summary>
            Style that will only be applied to label element.
            Will not be applied if LabelTemplate is set.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.Rules">
            <summary>
            Validation rules to apply to this item
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.HasFeedback">
            <summary>
            Used in conjunction with <see cref="P:AntDesign.FormItem.ValidateStatus"/> to display the verification status icon. It is recommended to use it only with the Input component
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.ShowFeedbackOnError">
            <summary>
            Whether to show feedback icon on error. If set to false, it will not show the icon even if the field is in error state.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.ValidateStatus">
            <summary>
            Validation status, if not set, it will be automatically generated according to validation rules
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.Help">
            <summary>
            Prompt information
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.ToolTip">
            <summary>
            FormItem Help Tooltip information
            </summary>
        </member>
        <member name="M:AntDesign.FormItem.GetRulesFromAttributes">
            <summary>
            tansform attributes to FormValidationRule for using locale validation message templates
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.FormRequiredMark.None">
            <summary>
            When set to None, the form will not display any indicators by any fields, regardless of their required status
            </summary>
        </member>
        <member name="F:AntDesign.FormRequiredMark.Required">
            <summary>
            When set to Required, the form will display an indicator next to required fields
            </summary>
        </member>
        <member name="F:AntDesign.FormRequiredMark.Optional">
            <summary>
            When set to Optional, the form will display an indicator next to optional fields
            </summary>
        </member>
        <member name="P:AntDesign.IForm.Model">
            <summary>
            The data object that the form is bound to.
            </summary>
        </member>
        <member name="P:AntDesign.IForm.Name">
            <summary>
            The name of the form.
            </summary>
        </member>
        <member name="P:AntDesign.IForm.EditContext">
            <summary>
            Get the current EditContext from the Form.
            </summary>
        </member>
        <member name="P:AntDesign.IForm.IsModified">
            <summary>
            Whether the form has been modified.
            </summary>
        </member>
        <member name="M:AntDesign.IForm.Reset">
            <summary>
            Reset the values and validation messages of all fields.
            </summary>
        </member>
        <member name="M:AntDesign.IForm.Submit">
            <summary>
            Trigger `OnFinish` while all fields are valid, otherwise, trigger `OnFinishFailed`.
            </summary>
        </member>
        <member name="M:AntDesign.IForm.Validate">
            <summary>
            Validate all fields.
            </summary>
            <returns> true if all fields are valid, otherwise false. </returns>
        </member>
        <member name="M:AntDesign.IForm.SetValidationMessages(System.String,System.String[])">
             <summary>
             Set validation messages for a specific field.
             <code>
             <![CDATA[
             <Form @ref="form">
                 <FormItem>
                     <Input @bind-value="model.Name" />
                 </FormItem>
             </Form>
            
             @code {
                 private IForm _form;
                 private void SetError()
                 {
                     _form.SetValidationMessages("name", new[] { "error message" });
                 }
             }
             ]]>
             </code>
             </summary>
             <param name="field"></param>
             <param name="errorMessages"></param>
        </member>
        <member name="F:AntDesign.FormValidateMode.Default">
            <summary>
            Validation will come from data attributes on the model provided to <see cref="P:AntDesign.Form`1.Model"/>
            </summary>
        </member>
        <member name="F:AntDesign.FormValidateMode.Rules">
            <summary>
            Validation will come from rules on FormItems in the form
            </summary>
        </member>
        <member name="F:AntDesign.FormValidateMode.Complex">
            <summary>
            Use both Default mode and Rules mode
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Len">
            <summary>
            Validate the length. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: String, Number, or Array.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Min">
            <summary>
            Validate length is greater than or equal to this number. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: String, Number or Array.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Max">
            <summary>
            Validate length is less than or equal to this number. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: String, Number, or Array.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Required">
            <summary>
            Make a field required
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Pattern">
            <summary>
            Validate the value passes a regular expression pattern
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Message">
            <summary>
            Custom error message. Will be auto generated if not provided.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Range">
            <summary>
            Validate the value is in the specified range
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.DefaultField">
            <summary>
            Validate rule for all array elements. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: Array. (<c>FormItem</c> not supported now)
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.OneOf">
            <summary>
            Whether the value is in specified values
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Enum">
            <summary>
            Validate the value is in specified enum type.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Fields">
            <summary>
            Validate rule for child elements. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: Array, Object (<c>FormItem</c> not supported now)
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Validator">
            <summary>
            Custom validation function
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Transform">
            <summary>
            Transformation function called before validation executes. The return value will have the validation ran against it.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Type">
            <summary>
            Type of form field. See <see cref="T:AntDesign.FormFieldType"/> for all possible values.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.ValidationAttribute">
            <summary>
            Validate the value using the specified attribute.
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Span">
            <summary>
            Width of Col
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Pull">
            <summary>
            The number of Cols to pull the Col to the left
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Push">
            <summary>
            The number of Cols to push the Col to the right
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Offset">
            <summary>
            The number of Cols to offset Col from the left
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Order">
            <summary>
            Order of Col, used in flex mode
            </summary>
        </member>
        <member name="P:AntDesign.Col.ChildContent">
            <summary>
            Content of column
            </summary>
        </member>
        <member name="P:AntDesign.Col.Flex">
            <summary>
            Use flex mode or not. Will not use flex mode if null.
            </summary>
        </member>
        <member name="P:AntDesign.Col.Span">
            <summary>
            Width of Col
            </summary>
        </member>
        <member name="P:AntDesign.Col.Order">
            <summary>
            Order of Col, used in flex mode
            </summary>
        </member>
        <member name="P:AntDesign.Col.Offset">
            <summary>
            The number of Cols to offset Col from the left
            </summary>
        </member>
        <member name="P:AntDesign.Col.Push">
            <summary>
            The number of Cols to push the Col to the right
            </summary>
        </member>
        <member name="P:AntDesign.Col.Pull">
            <summary>
            The number of Cols to pull the Col to the left
            </summary>
        </member>
        <member name="P:AntDesign.Col.Xs">
            <summary>
            &lt;576px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Sm">
            <summary>
            ≥576px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Md">
            <summary>
            ≥768px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Lg">
            <summary>
            ≥992px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Xl">
            <summary>
            ≥1200px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Xxl">
            <summary>
            ≥1600px column of grid
            </summary>
        </member>
        <member name="T:AntDesign.Grid">
                <summary>
                    <para>24 Grids System.</para>
            
                    <h2>Design concept</h2>
            
                    <para>In most business situations, Ant Design needs to solve a lot of information storage problems within the design area, so based on 12 Grids System, we divided the design area into 24 sections.</para>
            
                    <para>
                    We name the divided area 'box'. We suggest four boxes for horizontal arrangement at most, one at least.
                    Boxes are proportional to the entire screen as shown in the picture above.
                    To ensure a high level of visual comfort, we customize the typography inside of the box based on the box unit.
                    </para>
            
                    <h2>Outline</h2>
            
                    <para>In the grid system, we define the frame outside the information area based on row and column, to ensure that every area can have stable arrangement.</para>
            
                    <para>Following is a brief look at how it works:</para>
            
                    <list type="bullet">
                        <item>Establish a set of column in the horizontal space defined by row (abbreviated col)</item>
                        <item>Your content elements should be placed directly in the col, and only col should be placed directly in row</item>
                        <item>The column grid system is a value of 1-24 to represent its range spans. For example, three columns of equal width can be created by using a span of 8 on the columns.</item>
                        <item>If the sum of col spans in a row are more than 24, then the overflowing col as a whole will start a new line arrangement.</item>
                    </list>
                    <para>
                    Our grid systems base on Flex layout to allow the elements within the parent to be aligned horizontally - left, center, right, wide arrangement, and decentralized arrangement.
                    The Grid system also supports vertical alignment - top aligned, vertically centered, bottom-aligned.
                    You can also define the order of elements by using order.
                    </para>
            
                    <para>Layout uses a 24 grid layout to define the width of each "box", but does not rigidly adhere to the grid layout.</para>
            
                    <para>The breakpoints of responsive grid follow BootStrap 4 media queries rules(not including occasionally part).</para>
                </summary>
                <seealso cref="T:AntDesign.Row" />
                <seealso cref="T:AntDesign.Col" />
                <seealso cref="T:AntDesign.EmbeddedProperty" />
        </member>
        <member name="P:AntDesign.Row.ChildContent">
            <summary>
            Content of the row, generally contains <see cref="T:AntDesign.Col"/> elements.
            </summary>
        </member>
        <member name="P:AntDesign.Row.Type">
            <summary>
            Currently unused
            </summary>
        </member>
        <member name="P:AntDesign.Row.Align">
            <summary>
            Vertical alignment for the flex layout: 'top' | 'middle' | 'bottom'
            </summary>
        </member>
        <member name="P:AntDesign.Row.Justify">
            <summary>
            Hotizontal alignment for the flex layout: 'start' | 'end' | 'center' | 'space-around' | 'space-between'
            </summary>
        </member>
        <member name="P:AntDesign.Row.Wrap">
            <summary>
            Allow the row's content to wrap or not
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Row.Gutter">
            <summary>
            Spacing between grids, could be a number or a dictionary like 
            <c>{ xs: 8, sm: 16, md: 24 }</c>, an array to make horizontal and vertical spacing work at the same time <c>[horizontal, vertical]</c>
            </summary>
        </member>
        <member name="P:AntDesign.Row.OnBreakpoint">
            <summary>
            Callback executed when a screen size breakpoint is triggered
            </summary>
        </member>
        <member name="P:AntDesign.Row.DefaultBreakpoint">
            <summary>
            Default screen size breakpoint. Used to set gutter during pre-rendering
            </summary>
        </member>
        <member name="T:AntDesign.Icon">
                <summary>
                Semantic vector graphics. Before use icons。
                </summary>
        </member>
        <member name="P:AntDesign.Icon.Alt">
            <summary>
            Alternative text for the icon
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Role">
            <summary>
            Rotate icon with animation
            </summary>
            <default value="img" />
        </member>
        <member name="P:AntDesign.Icon.AriaLabel">
            <summary>
            Sets the value of the aria-label attribute
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Spin">
            <summary>
            Rotate icon with animation
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Icon.Rotate">
            <summary>
            Rotate by n degrees - does not work in IE9
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Icon.Type">
            <summary>
            Icon name to show
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Theme">
            <summary>
            Which theme of icon - 'fill' | 'outline' | 'twotone';
            </summary>
            <default value="IconThemeType.Outline" />
        </member>
        <member name="P:AntDesign.Icon.TwoToneColor">
            <summary>
            Specify the primary color when using the TwoTone theme. Other themes ignore this parameter.
            </summary>
        </member>
        <member name="P:AntDesign.Icon.IconFont">
            <summary>
            The type of <see cref="T:AntDesign.IconFont" />
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Width">
            <summary>
            Width of the icon
            </summary>
            <default value="1em" />
        </member>
        <member name="P:AntDesign.Icon.Height">
            <summary>
            Height of the icon
            </summary>
            <default value="1em" />
        </member>
        <member name="P:AntDesign.Icon.Fill">
            <summary>
            Fill value for the icon's SVG
            </summary>
            <default value="currentColor" />
        </member>
        <member name="P:AntDesign.Icon.TabIndex">
            <summary>
            Tabindex for the wrapping span
            </summary>
        </member>
        <member name="P:AntDesign.Icon.StopPropagation">
            <summary>
            Stop propagation of the click event on the icon
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Icon.OnClick">
            <summary>
            OnClick event for the icon
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Component">
            <summary>
            The component to render as a custom icon
            </summary>
        </member>
        <member name="T:AntDesign.Image">
                <summary>
                <para>Previewable image.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When you need to display pictures.</item>
                    <item>Display when loading a large image or fault tolerant handling when loading fail.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.ImagePreviewGroup"/>
        </member>
        <member name="P:AntDesign.Image.Alt">
            <summary>
            Alternative text for image
            </summary>
        </member>
        <member name="P:AntDesign.Image.Fallback">
            <summary>
            Fallback if image fails to load
            </summary>
        </member>
        <member name="P:AntDesign.Image.Height">
            <summary>
            Height of image
            </summary>
        </member>
        <member name="P:AntDesign.Image.Width">
            <summary>
            Width of image
            </summary>
        </member>
        <member name="P:AntDesign.Image.Placeholder">
            <summary>
            Loading placeholder
            </summary>
        </member>
        <member name="P:AntDesign.Image.Preview">
            <summary>
            Enable or disable preview functionality
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Image.PreviewVisible">
            <summary>
            If the preview is visible or not
            </summary>
        </member>
        <member name="P:AntDesign.Image.Src">
            <summary>
            Image source
            </summary>
        </member>
        <member name="P:AntDesign.Image.PreviewSrc">
            <summary>
            Preview image source
            </summary>
        </member>
        <member name="P:AntDesign.Image.PreviewVisibleChanged">
            <summary>
            Callback executed when <see cref="P:AntDesign.Image.PreviewVisible"/> changes
            </summary>
        </member>
        <member name="P:AntDesign.Image.OnClick">
            <summary>
            Callback executed on image click
            </summary>
        </member>
        <member name="P:AntDesign.Image.Locale">
            <summary>
            Locale data for component
            </summary>
        </member>
        <member name="P:AntDesign.ImagePreviewGroup.ChildContent">
            <summary>
            Content for group. Typically contains <see cref="T:AntDesign.Image"/> elements.
            </summary>
        </member>
        <member name="P:AntDesign.ImagePreviewGroup.PreviewVisible">
            <summary>
            Whether to open the preview image. Two-way binding.	
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.ImagePreviewGroup.PreviewVisibleChanged">
            <summary>
            Callback executed when <see cref="P:AntDesign.ImagePreviewGroup.PreviewVisible"/> changes
            </summary>
        </member>
        <member name="T:AntDesign.InputNumber`1">
                <summary>
                <para>Enter a number within certain range with the mouse or keyboard.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When a numeric value needs to be provided.</item>
                </list>
            
                <h3>Types Supported</h3>
            
                <para><c>sbyte</c>, <c>byte</c>, <c>short</c>, <c>ushort</c>, <c>int</c>, <c>uint</c>, <c>long</c>, <c>ulong</c>, <c>float</c>, <c>double</c>, <c>decimal</c></para>
            
                <para>Nullable types of the above types are also supported. For example, <c>ushort?</c>, <c>int?</c>, etc.</para>
                </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Precision">
            <summary>
            Number of decimal places to use for number and display
            </summary>
            <default value="0"/>
        </member>
        <member name="P:AntDesign.InputNumber`1.Formatter">
            <summary>
            Formatter from number to string for displaying
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Format">
            <summary>
            Parser to extract number from the formatter
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Parser">
            <summary>
            Specifies the value extracted from formatter
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Step">
            <summary>
            The number to which the current value is increased or decreased with the input arrows. It can be an integer or decimal.
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.DefaultValue">
            <summary>
            Initial value
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Max">
            <summary>
            Max alloable number
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Min">
            <summary>
            Min allowable number
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.MaxLength">
            <summary>
             Max length of input
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.InputNumber`1.Disabled">
            <summary>
            Disable the input or not
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.OnChange">
            <summary>
            Callback executed when the input value changes
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.OnFocus">
            <summary>
            Callback executed when the input gains focus
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.PlaceHolder">
            <summary>
            Placeholder value
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Bordered">
            <summary>
            Whether to show border
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Prefix">
            <summary>
            Setting prefix content to the input
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Width">
            <summary>
            The width of the input
            </summary>
        </member>
        <member name="M:AntDesign.InputNumber`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <summary>
            Always return true, if input string is invalid, result = default, if input string is null or empty, result = DefaultValue
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <param name="validationErrorMessage"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Input`1">
                <summary>
                <para>A basic widget for getting the user input is a text field. Keyboard and mouse can be used for providing or changing data.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>A user input in a form field is needed.</item>
                    <item>A search input is required.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.TextArea"/>
                <seealso cref="T:AntDesign.Search"/>
                <seealso cref="T:AntDesign.InputGroup"/>
                <seealso cref="T:AntDesign.InputPassword"/>
        </member>
        <member name="P:AntDesign.Input`1.AddOnBefore">
            <summary>
            The label text displayed before (on the left side of) the input field.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AddOnAfter">
            <summary>
            The label text displayed after (on the right side of) the input field.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AllowClear">
            <summary>
            Allow to remove input content with clear icon
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.ShowClear">
            <summary>
            Overrides whether the clear icon is shown. When <see langword="null"/>, it is shown if and only if the input string is not empty.
            </summary>
            <remarks>
            Requires <see cref="P:AntDesign.Input`1.AllowClear"/> to be <see langword="true"/>, otherwise this has no effect.
            </remarks>
        </member>
        <member name="P:AntDesign.Input`1.OnClear">
            <summary>
            Callback when the content is cleared by clicking the "ClearIcon"
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AutoComplete">
            <summary>
            Controls the autocomplete attribute of the input HTML element.
            Default = true
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AutoFocus">
            <summary>
            Autofocus on the input or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Input`1.Bordered">
            <summary>
            Whether has border style
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.BindOnInput">
            <summary>
            Whether to change value on input
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.DebounceMilliseconds">
            <summary>
            Delays the processing of the KeyUp event until the user has stopped
            typing for a predetermined amount of time. Default is 250 ms.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.DefaultValue">
            <summary>
            The initial input content
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Disabled">
            <summary>
            Whether the input is disabled.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.InputElementSuffixClass">
            <summary>
            Css class that will be  added to input element class
            as the last class entry.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.MaxLength">
            <summary>
            Max length
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnBlur">
            <summary>
            Callback when input looses focus
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnChange">
            <summary>
            Callback when the content changes
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnFocus">
            <summary>
            Callback when input receives focus
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnInput">
            <summary>
            Callback when value is inputed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnKeyDown">
            <summary>
            Callback when a key is pressed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnKeyUp">
            <summary>
            Callback when a key is released
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnMouseUp">
            <summary>
            Callback when a mouse button is released
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnPressEnter">
            <summary>
            The callback function that is triggered when Enter key is pressed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Placeholder">
            <summary>
            Provide prompt information that describes the expected value of the input field
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Prefix">
            <summary>
            The prefix icon for the Input.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.ReadOnly">
            <summary>
            When present, it specifies that an input field is read-only.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.StopPropagation">
            <summary>
            Controls onclick and blur event propagation.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Suffix">
            <summary>
            The suffix icon for the Input.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Type">
            <summary>
            The type of input, see: MDN(use `Input.TextArea` instead of type=`textarea`)
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.WrapperStyle">
            <summary>
            Set CSS style of wrapper. Is used when component has visible: Prefix/Suffix
            or has paramter set <seealso cref="P:AntDesign.Input`1.AllowClear"/> or for components: <see cref="T:AntDesign.InputPassword"/>
            and <see cref="T:AntDesign.Search"/>. In these cases, html span elements is used
            to wrap the html input element.
            <seealso cref="P:AntDesign.Input`1.WrapperStyle"/> is used on the span element.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.WrapperClass">
            <summary>
            Set Class of wrapper. Is used when component has visible: Prefix/Suffix
            or has paramter set <seealso cref="P:AntDesign.Input`1.AllowClear"/> or for components: <see cref="T:AntDesign.InputPassword"/>
            and <see cref="T:AntDesign.Search"/>. In these cases, html span elements is used
            to wrap the html input element.
            <seealso cref="P:AntDesign.Input`1.WrapperClass"/> is used on the span element.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.ShowCount">
            <summary>
            Show count of characters in the input
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Width">
            <summary>
            The width of the input
            </summary>
        </member>
        <member name="M:AntDesign.Input`1.Focus(AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus behavior for input component with optional behaviors.
            </summary>
            <param name="behavior">enum: AntDesign.FocusBehavior</param>
            <param name="preventScroll">When true, element receiving focus will not be scrolled to.</param>
        </member>
        <member name="M:AntDesign.Input`1.Blur">
            <summary>
            Removes focus from input element.
            </summary>
        </member>
        <member name="M:AntDesign.Input`1.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Invoked when user add/remove content
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.InputGroup.ChildContent">
            <summary>
            Content wrapped by InputGroup.
            </summary>
        </member>
        <member name="P:AntDesign.InputGroup.Compact">
            <summary>
            Whether to use compact style or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.InputGroup.Size">
            <summary>
            The size of InputGroup specifies the size of the included Input fields. 
            Available: large default small
            </summary>
        </member>
        <member name="P:AntDesign.InputPassword.IconRender">
            <summary>
            Custom icon render
            </summary>
        </member>
        <member name="P:AntDesign.InputPassword.ShowPassword">
            <summary>
            Whether to show password or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.InputPassword.VisibilityToggle">
            <summary>
            Whether to show password visibility toggle button or not
            </summary>
            <default value="true" />
        </member>
        <member name="M:AntDesign.InputPassword.Focus(AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus behavior for InputPassword component with optional behaviors.
            Special behavior required for wasm.
            </summary>
            <param name="behavior">enum: AntDesign.FocusBehavior</param>
            <param name="preventScroll">When true, element receiving focus will not be scrolled to.</param>
        </member>
        <member name="P:AntDesign.Search.ClassicSearchIcon">
            <summary>
            Search input is rendered with suffix search icon, not as a button.
            Will be ignored when <see cref="P:AntDesign.Search.EnterButton"/> != false
            </summary>
        </member>
        <member name="P:AntDesign.Search.EnterButton">
            <summary>
            Whether to show an enter button after input. This property conflicts with the <see cref="P:AntDesign.Input`1.AddOnAfter"/>
            </summary>
        </member>
        <member name="P:AntDesign.Search.Loading">
            <summary>
            Search box with loading
            </summary>
        </member>
        <member name="P:AntDesign.Search.OnSearch">
            <summary>
            Callback executed when you click on the search-icon, the clear-icon or press the Enter key
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.AutoSize">
            <summary>
            Will adjust (grow or shrink) the <c>TextArea</c> according to content.
            Can work in connection with <see cref="P:AntDesign.TextArea.MaxRows"/> and <see cref="P:AntDesign.TextArea.MinRows"/>.
            Sets resize attribute of the textarea HTML element to: none.
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.DefaultToEmptyString">
            <summary>
            When true, value will be set to empty string.
            When false, value will be set to <c>null</c> when content is empty or whitespace. 
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TextArea.MaxRows">
            <summary>
            Allow growing, but stop when visible rows = MaxRows (will not grow further).
            </summary>
            <default value="uint.MaxValue"/>
        </member>
        <member name="P:AntDesign.TextArea.MinRows">
            <summary>
            Allow shrinking, but stop when visible rows = MinRows (will not shrink further).
            </summary>
            <default value="1"/>
        </member>
        <member name="P:AntDesign.TextArea.Rows">
            <summary>
            Sets the height of the TextArea expressed in number of rows.
            </summary>
            <default value="3"/>
        </member>
        <member name="P:AntDesign.TextArea.OnResize">
            <summary>
            Callback executed when the size changes
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.Value">
            <summary>
            Gets or sets the value of the TextArea.
            </summary>
        </member>
        <member name="M:AntDesign.TextArea.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:AntDesign.TextArea._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="T:AntDesign.Layout">
                 * <summary>
                    <para>Handling the overall layout of a page.</para>
            
                    <h2>Specification</h2>
                    <h3>Size</h3>
                    <para>The first level navigation is left aligned near a logo, and the secondary menu is right aligned.</para>
                    <list type="bullet">
                        <item>Top Navigation: the height of the first level navigation <c>64px</c>, the second level navigation
                            <c>48px</c>.</item>
                        <item>Top Navigation (for landing pages): the height of the first level navigation <c>80px</c>, the second
                            level navigation <c>56px</c>.</item>
                        <item>Calculation formula of a top navigation: <c>48+8n</c>.</item>
                        <item>Calculation formula of an aside navigation: <c>200+8n</c>.</item>
                    </list>
                
                    <h3>Interaction rules</h3>
                    <list type="bullet">
                        <item>The first level navigation and the last level navigation should be distinguishable by visualization;</item>
                        <item>The current item should have the highest priority of visualization;</item>
                        <item>When the current navigation item is collapsed, the style of the current navigation item is applied to its
                            parent level;</item>
                        <item>The left side navigation bar has support for both the accordion and expanding styles; you can choose the one
                            that fits your case the best.</item>
                    </list>
                    
                    <h2>Visualization rules</h2>
                    <para>Style of a navigation should conform to its level.</para>
                    <list type="bullet">
                        <item>
                            <para><strong>Emphasis by colorblock</strong></para>
                            <para>When background color is a deep color, you can use this pattern for the parent level navigation item of
                                the current page.</para>
                        </item>
                        <item>
                            <para><strong>The highlight match stick</strong></para>
                            <para>When background color is a light color, you can use this pattern for the current page navigation item; we
                                recommend using it for the last item of the navigation path.</para>
                        </item>
                        <item>
                            <para><strong>Highlighted font</strong></para>
                            <para>From the visualization aspect, a highlighted font is stronger than colorblock; this pattern is often used
                                for the parent level of the current item.</para>
                        </item>
                        <item>
                            <para><strong>Enlarge the size of the font</strong></para>
                            <para><c>12px</c>, <c>14px</c> is a standard font size of navigations, <c>14px</c> is used
                                for the first and the second level of the navigation. You can choose an appropriate font size regarding
                                the level of your navigation.</para>
                        </item>
                    </list>
                    
                    <h2>Component Overview</h2>
                    <list type="bullet">
                        <item><c>Layout</c>: The layout wrapper, in which <c>Header</c> <c>Sider</c>
                            <c>Content</c> <c>Footer</c> or <c>Layout</c> itself can be nested, and can be placed in
                            any parent container.</item>
                        <item><c>Header</c>: The top layout with the default style, in which any element can be nested, and must be
                            placed in <c>Layout</c>.</item>
                        <item><c>Sider</c>: The sidebar with default style and basic functions, in which any element can be nested,
                            and must be placed in <c>Layout</c>.</item>
                        <item><c>Content</c>: The content layout with the default style, in which any element can be nested, and
                            must be placed in <c>Layout</c>.</item>
                        <item><c>Footer</c>: The bottom layout with the default style, in which any element can be nested, and must
                            be placed in <c>Layout</c>.</item>
                    </list>
                    <blockquote>
                        <para>Based on <c>flex layout</c>, please pay attention to the <a href="http://caniuse.com/#search=flex">compatibility</a>.</para>
                    </blockquote>
                 </summary>
                <seealso cref="T:AntDesign.Header"/>
                <seealso cref="T:AntDesign.Footer"/>
                <seealso cref="T:AntDesign.Content"/>
                <seealso cref="T:AntDesign.Sider"/>
        </member>
        <member name="P:AntDesign.Layout.ChildContent">
            <summary>
            The inner content
            </summary>
        </member>
        <member name="T:AntDesign.Sider">
            <summary>
            The sidebar of <see cref="T:AntDesign.Layout" />
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Collapsible">
            <summary>
            If sider is collapsible or not
            </summary>
        </member>
        <member name="P:AntDesign.Sider.ChildContent">
            <summary>
            Content of the sider
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Trigger">
            <summary>
            Collapse/expand UI element to allow manually changing.
            </summary>
        </member>
        <member name="P:AntDesign.Sider.NoTrigger">
            <summary>
            Remove UI trigger for collapse/expanding manually
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Breakpoint">
            <summary>
            Breakpoint at which sider will collapse by default
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Theme">
            <summary>
            Color theme
            </summary>
            <default value="SiderTheme.Dark"/>
        </member>
        <member name="P:AntDesign.Sider.Width">
            <summary>
            Width of sider when expanded, in pixels
            </summary>
            <default value="200" />
        </member>
        <member name="P:AntDesign.Sider.CollapsedWidth">
            <summary>
            Width of sider when collapsed, in pixels
            </summary>
            <default value="80" />
        </member>
        <member name="P:AntDesign.Sider.Collapsed">
            <summary>
            If sider is collapsed or not
            </summary>
        </member>
        <member name="P:AntDesign.Sider.CollapsedChanged">
            <summary>
            Callback executed when sider is changes from open to collapsed, regardless of what caused it
            </summary>
        </member>
        <member name="P:AntDesign.Sider.OnCollapse">
            <summary>
            Callback executed when sider is changes from open to collapsed, regardless of what caused it
            </summary>
        </member>
        <member name="P:AntDesign.Sider.OnBreakpoint">
            <summary>
            Callback executed when window size changes the breakpoint
            </summary>
        </member>
        <member name="P:AntDesign.Sider.DefaultCollapsed">
            <summary>
            To set the initial status
            </summary>
            <default value="false" />
        </member>
        <member name="T:AntDesign.AntList`1">
                <summary>
                <para>Simple List.</para>
            
                <h2>When To Use</h2>
            
                <para>A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.</para>
                </summary>
                <seealso cref="T:AntDesign.ListItem"/>
                <seealso cref="T:AntDesign.ListItemMeta"/>
                <seealso cref="T:AntDesign.PaginationOptions"/>
                <seealso cref="T:AntDesign.ListGridType"/>
        </member>
        <member name="P:AntDesign.AntList`1.DataSource">
            <summary>
            List of items to show in list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Bordered">
            <summary>
            Put a border on the list
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.AntList`1.Header">
            <summary>
            Header content for the list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Footer">
            <summary>
            Footer content for the list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.LoadMore">
            <summary>
            Content for the end of list items for diplaying a load more
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.ItemLayout">
            <summary>
            The layout of list, default is horizontal, If a vertical list is desired, set the itemLayout property to vertical
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Loading">
            <summary>
            Show loading on the list
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.AntList`1.NoResult">
            <summary>
            Currently unused
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Size">
            <summary>
            Size of the list
            </summary>
            <default value="ListSize.Default" />
        </member>
        <member name="P:AntDesign.AntList`1.Split">
            <summary>
            Toggles rendering of the split under the list item
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.AntList`1.Grid">
            <summary>
            The grid type of list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Pagination">
            <summary>
            Options for paginating the list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.ChildContent">
            <summary>
            Content for the list
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Gutter">
            <summary>
            spacing between grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Column">
            <summary>
            column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Xs">
            <summary>
            &lt;576px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Sm">
            <summary>
            ≥576px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Md">
            <summary>
            ≥768px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Lg">
            <summary>
            ≥992px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Xl">
            <summary>
            ≥1200px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Xxl">
            <summary>
            ≥1600px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.Extra">
            <summary>
            The extra content of list item. If itemLayout is vertical, shows the content on right, otherwise shows content on the far right.
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.Actions">
            <summary>
            The actions content of list item. If itemLayout is vertical, shows the content on bottom, otherwise shows content on the far right.
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.ChildContent">
            <summary>
            Main content for the item
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.OnClick">
            <summary>
            Callback executed when the item is clicked
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.NoFlex">
            <summary>
            Whether to use flex for item or not. When true, will not use flex.
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.Title">
            <summary>
            Title for the list item
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.TitleTemplate">
            <summary>
            Title content of the list item. Takes priority over <see cref="P:AntDesign.ListItemMeta.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.Avatar">
            <summary>
            The avatar of list item
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.AvatarTemplate">
            <summary>
            Avatar content of the list item. Takes priority over <see cref="P:AntDesign.ListItemMeta.Avatar"/>
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.Description">
            <summary>
            The description of list item
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.DescriptionTemplate">
            <summary>
            The description content of list item. Takes priority over <see cref="P:AntDesign.ListItemMeta.Description"/>
            </summary>
        </member>
        <member name="T:AntDesign.Mentions">
                <summary>
                <para>Mention component.</para>
            
                <h2>When To Use</h2>
            
                <para>When need to mention someone or something.</para>
                </summary>
                <seealso cref="T:AntDesign.MentionsOption" />
        </member>
        <member name="P:AntDesign.Mentions.LoadOptions">
            <summary>
            Dynamically load mention options for display when the user types a value after the @ symbol
            </summary>
        </member>
        <member name="P:AntDesign.MentionsOption.Value">
            <summary>
            The value of option.
            </summary>
        </member>
        <member name="P:AntDesign.MentionsOption.ChildContent">
            <summary>
            The content of option.
            </summary>
        </member>
        <member name="T:AntDesign.Menu">
                <summary>
                <para>A versatile menu for navigation.</para>
            
                <h2>When To Use</h2>
            
                <para>
                Navigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. 
                Ant Design offers top and side navigation options. 
                Top navigation provides all the categories and functions of the website. 
                Side navigation provides the multi-level structure of the website.
                </para>
            
                <para>See Layouts for more layouts with navigation.</para>
                </summary>
                <seealso cref="T:AntDesign.MenuItem" />
                <seealso cref="T:AntDesign.SubMenu" />
                <seealso cref="T:AntDesign.MenuItemGroup" />
                <seealso cref="T:AntDesign.MenuDivider" />
        </member>
        <member name="P:AntDesign.Menu.Theme">
            <summary>
            Color theme of the menu
            </summary>
            <default value="MenuTheme.Light" />
        </member>
        <member name="P:AntDesign.Menu.Mode">
            <summary>
            Type of menu
            </summary>
            <default value="MenuMode.Vertical" />
        </member>
        <member name="P:AntDesign.Menu.ChildContent">
            <summary>
            Content of menu. Should contain MenuItem elements.
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OnSubmenuClicked">
            <summary>
            Callback when submenu is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OnMenuItemClicked">
            <summary>
            Callback when a main menu item is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Menu.Accordion">
            <summary>
            Accordion mode. When true only one submenu can be open at a time.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Menu.Selectable">
            <summary>
            Allows selecting menu items. When it is false the menu item is not selected after OnClick.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Menu.Multiple">
            <summary>
            Allows selection of multiple items	
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Menu.InlineCollapsed">
            <summary>
            Specifies the collapsed status when menu is inline mode	
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Menu.InlineIndent">
            <summary>
            Indent (in pixels) of inline menu items on each level	
            </summary>
            <default value="24" />
        </member>
        <member name="P:AntDesign.Menu.AutoCloseDropdown">
            <summary>
            Close dropdown when clicking an item
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Menu.DefaultSelectedKeys">
            <summary>
            Array with the keys of default selected menu items	
            </summary>
        </member>
        <member name="P:AntDesign.Menu.DefaultOpenKeys">
            <summary>
            Array with the keys of default opened sub menus	
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OpenKeys">
            <summary>
            Array with the keys of currently opened sub-menus
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OpenKeysChanged">
            <summary>
            Callback when the open sub menus change. Passed the array of open keys.
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OnOpenChange">
            <summary>
            Callback when the open sub menus change. Passed the array of open keys.
            </summary>
        </member>
        <member name="P:AntDesign.Menu.SelectedKeys">
            <summary>
            Array with the keys of currently selected menu items, set empty array to clear selection instead of null.
            </summary>
            <default value="[]" />
        </member>
        <member name="P:AntDesign.Menu.SelectedKeysChanged">
            <summary>
            Callback when the selected items change. Passed array of open keys.
            </summary>
        </member>
        <member name="P:AntDesign.Menu.TriggerSubMenuAction">
            <summary>
            Which action can trigger submenu open/close	
            </summary>
            <default value="Trigger.Hover" />
        </member>
        <member name="P:AntDesign.Menu.ShowCollapsedTooltip">
            <summary>
            Show tooltip on collapsed menu
            </summary>
        </member>
        <member name="P:AntDesign.Menu.Animation">
            <summary>
            Enable or disable animation
            </summary>
        </member>
        <member name="M:AntDesign.MenuHelper.ShouldMatch(Microsoft.AspNetCore.Components.Routing.NavLinkMatch,System.String,System.String)">
            <summary>
            Determines if the current URI should match the specified URI based on the given match criteria.
            </summary>
            <param name="match">The match criteria (Exact or Prefix).</param>
            <param name="currentUriAbsolute">The absolute URI of the current location.</param>
            <param name="hrefAbsolute">The absolute URI to match against.</param>
            <returns>True if the URIs match based on the criteria; otherwise, false.</returns>
        </member>
        <member name="M:AntDesign.MenuHelper.IsStrictlyPrefixWithSeparator(System.String,System.String)">
            <summary>
            Determines if a string value is strictly a prefix of another string, with a separator following the prefix.
            </summary>
            <param name="value">The string value to check.</param>
            <param name="prefix">The prefix to check for.</param>
            <returns>True if the value starts with the prefix followed by a separator; otherwise, false.</returns>
        </member>
        <member name="M:AntDesign.MenuHelper.EqualsHrefExactlyOrIfTrailingSlashAdded(System.String,System.String)">
            <summary>
            Compares two URIs for equality, accounting for optional trailing slashes.
            </summary>
            <param name="currentUriAbsolute">The absolute URI of the current location.</param>
            <param name="hrefAbsolute">The absolute URI to compare against.</param>
            <returns>True if the URIs are equal, or if adding a trailing slash to the current URI makes them equal; otherwise, false.</returns>
        </member>
        <member name="P:AntDesign.MenuItem.ChildContent">
            <summary>
            Display title
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.Key">
            <summary>
            Unique ID of the menu item
            </summary>
            <default value="Uniquely Generated ID" />
        </member>
        <member name="P:AntDesign.MenuItem.Disabled">
            <summary>
            Whether menu item is disabled
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.MenuItem.OnClick">
            <summary>
            Callback for when item is clicked
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.RouterLink">
            <summary>
            Href route
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.RouterMatch">
            <summary>
            Modifies the URL matching behavior for a NavLink
            </summary>
            <default value="NavLinkMatch.All" />
        </member>
        <member name="P:AntDesign.MenuItem.Title">
            <summary>
            Title of the menu item
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.Icon">
            <summary>
            Icon of the menu item
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.IconTemplate">
            <summary>
            Custom icon template, when Icon and IconTemplate are set at the same time, IconTemplate is preferred
            </summary>
        </member>
        <member name="P:AntDesign.MenuItemGroup.Title">
            <summary>
            Title of the group
            </summary>
        </member>
        <member name="P:AntDesign.MenuItemGroup.TitleTemplate">
            <summary>
            Title of the group
            </summary>
        </member>
        <member name="P:AntDesign.MenuItemGroup.ChildContent">
            <summary>
            SubMenus or MenuItems
            </summary>
        </member>
        <member name="P:AntDesign.MenuItemGroup.Key">
            <summary>
            Unique ID
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.ActiveClass">
            <summary>
            Gets or sets the CSS class name applied to the NavLink when the
            current route matches the NavLink href.
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.Match">
            <summary>
            Gets or sets a value representing the URL matching behavior.
            </summary>
        </member>
        <member name="M:AntDesign.MenuLink.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.MenuLink.OnParametersSet">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:AntDesign.MenuLink.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.SubMenu.Placement">
            <summary>
            Menu placement
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.PopupClassName">
            <summary>
            class name of the popup
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.Title">
            <summary>
            Title 
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.TitleTemplate">
            <summary>
            Title template
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.ChildContent">
            <summary>
            SubMenus or SubMenu items
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.Key">
            <summary>
            Unique ID of the SubMenu
            </summary>
            <default value="Uniquely Generated ID" />
        </member>
        <member name="P:AntDesign.SubMenu.Disabled">
            <summary>
            Whether SubMenu is disabled
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.SubMenu.IsOpen">
            <summary>
            Open state of the SubMenu
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.SubMenu.OnTitleClick">
            <summary>
            Callback executed when the SubMenu title is clicked
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Content">
            <summary>
            Content for message
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Duration">
            <summary>
            Time before auto-dismiss, in seconds
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Icon">
            <summary>
            Icon for message
            </summary>
        </member>
        <member name="E:AntDesign.MessageConfig.OnClose">
            <summary>
            Callback executed on close of message
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Key">
            <summary>
            Unique identifier for component
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Type">
            <summary>
            Style of message
            </summary>
        </member>
        <member name="M:AntDesign.IMessageService.Config(AntDesign.MessageGlobalConfig)">
            <summary>
            Configure global message options
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.IMessageService.Error(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show error message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Info(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show info message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Loading(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show loading message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Open(AntDesign.MessageConfig)">
            <summary>
            Open message with provided configuration
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Success(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show success message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Warning(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show warning message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Message">
                <summary>
                <para>Display global messages as feedback in response to user operations.</para>
            
                <h2>When To Use</h2>
                <list type="bullet">
                    <item>To provide feedback such as success, warning, error etc.</item>
                    <item>A message is displayed at top and center and will be dismissed automatically, as a non-interrupting light-weighted prompt.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.IMessageService" />
                <seealso cref="T:AntDesign.MessageConfig" />
        </member>
        <member name="P:AntDesign.MessageItem.Config">
            <summary>
            The message config
            </summary>
        </member>
        <member name="T:AntDesign.MessageService">
            <summary>
            Message Service
            </summary>
        </member>
        <member name="T:AntDesign.ButtonProps">
            <summary>
            button props
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmButtonOptions">
            <summary>
            config the confirm button's properties
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button1Props">
            <summary>
            the leftmost button properties in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button2Props">
            <summary>
            the secondary button properties in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button3Props">
            <summary>
            the third button properties in LTR layout
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmOptions">
            <summary>
            Confirm dialog options
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn1Text">
            <summary>
            OK
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn2Text">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn3Text">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Locale">
            <summary>
            Confirm Locale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.ClassName">
            <summary>
            the class name of the element of ".ant-modal" 
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Content">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Icon">
            <summary>
            Confirm left top icon
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Style">
            <summary>
            .ant-modal element's style
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.AutoFocusButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkType">
            <summary>
            set OK button type for the leftmost button: OK or Yes button
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkText">
            <summary>
            set OK button content for the leftmost button: OK or Yes button, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.CancelText">
            <summary>
            set Cancel button content for the second on the left button: Cancel or NO button, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button1Text">
            <summary>
            the leftmost button in LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button2Text">
            <summary>
            The second button on the left is in the LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button3Text">
            <summary>
            the rightmost button in LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OnCancel">
            <summary>
            for OK-Cancel Confirm dialog, cancel button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OnOk">
            <summary>
            for OK-Cancel Confirm dialog, OK button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkButtonProps">
            <summary>
             OK-Cancel Confirm dialog's OK button props. It is equivalent to Button1Props.
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.CancelButtonProps">
            <summary>
             OK-Cancel Confirm dialog's cancel button props. It is equivalent to Button2Props.
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button1Props">
            <summary>
            the leftmost button in LTR layout 
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button2Props">
            <summary>
            The second button on the left is in the LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button3Props">
            <summary>
            the rightmost button in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkCancel">
            <summary>
            show Cancel button for OK-Cancel Confirm dialog
            </summary>
        </member>
        <member name="M:AntDesign.ConfirmOptions.BuildButtonsDefaultOptions">
            <summary>
            set default options for buttons
            </summary>
        </member>
        <member name="T:AntDesign.DialogOptions">
            <summary>
            dialog options
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnClosed">
            <summary>
            trigger after Dialog is closed
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.BodyStyle">
            <summary>
            ant-modal-body style
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Closable">
            <summary>
            show ant-modal-closer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Draggable">
            <summary>
            Draggable modal
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.DragInViewport">
            <summary>
            Drag and drop only within the Viewport
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.CloseIcon">
            <summary>
            closer icon RenderFragment, the default is a "X"
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ConfirmLoading">
            <summary>
            Whether to apply loading visual effect for OK button or not
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Header">
            <summary>
            modal header
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Footer">
            <summary>
            modal footer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.WrapClassName">
            <summary>
            The class name of the container of the modal dialog
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ChildContent">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ClassName">
            <summary>
            the class name of the element of ".ant-modal"
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnCancel">
            <summary>
            for OK-Cancel Confirm dialog, cancel button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnOk">
            <summary>
            for OK-Cancel Confirm dialog, OK button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.MaxBodyHeight">
            <summary>
            max modal body content height
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Maximizable">
            <summary>
            show modal maximize button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.MaximizeBtnIcon">
            <summary>
            The icon of the maximize button when the modal is in normal state
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.RestoreBtnIcon">
            <summary>
            The icon of the maximize button when the modal is maximized
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.DefaultMaximized">
            <summary>
            Maximize the dialog during component initialization, and it will ignore the Maximizable value.
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Resizable">
            <summary>
            Resizable (Horizontal direction only)
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.DestroyOnClose">
            <summary>
            Whether to remove Modal from DOM after the Modal closed
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ForceRender">
            <summary>
            Whether to force render the Modal dom before opening.   
            </summary>
        </member>
        <member name="T:AntDesign.DialogOptionsBase">
            <summary>
            ModalOptions, ConfirmOptions and DialogOptions base class
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultMaximizeIcon">
            <summary>
            default Dialog close icon
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultCloseIcon">
            <summary>
            default Dialog close icon
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultHeader">
            <summary>
            default modal header
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultFooter">
            <summary>
            default modal footer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.PrefixCls">
            <summary>
            class name prefix
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.CancelButtonProps">
            <summary>
            Cancel Button's props
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.CancelText">
            <summary>
            modal default footer cancel text
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Centered">
            <summary>
            whether center display
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.GetContainer">
            <summary>
            get or set the modal parent DOM
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Keyboard">
            <summary>
            Whether support press esc to close
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Mask">
            <summary>
            Whether show mask or not
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.MaskClosable">
            <summary>
            Whether to close the modal dialog when the mask (area outside the modal) is clicked
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.MaskStyle">
            <summary>
            Style for dialog's mask element
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkButtonProps">
            <summary>
            Ok Button's props
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkText">
            <summary>
            Text of the OK button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkType">
            <summary>
            Button type of the OK button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Title">
            <summary>
            The modal dialog's title of String
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.TitleTemplate">
            <summary>
            The modal dialog's title of RenderFragment
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Width">
            <summary>
            Width of the modal dialog
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.ZIndex">
            <summary>
            The z-index of the Modal
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Rtl">
            <summary>
            Is RTL
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered
            点击确定按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered
            点击取消按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered
            击确定按钮时调用，可以重写它来放入自己的逻辑
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IModalTemplate.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered
            点击取消按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="P:AntDesign.ModalClosingEventArgs.Cancel">
            <summary>
            Whether the closing should be cancelled.
            Setting true if the closing should be cancelled; default is false.
            是否应取消关闭Modal。
            如果应取消关闭，请设置为 true; 默认为 false。
            </summary>
        </member>
        <member name="M:AntDesign.ModalClosingEventArgs.Reject">
            <summary>
            Reject to close the modal.
            </summary>
        </member>
        <member name="T:AntDesign.ModalOptions">
            <summary>
            The options of Modal dialog box
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.AfterClose">
            <summary>
            trigger after Dialog is closed
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Style">
            <summary>
            ant-modal style
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.BodyStyle">
            <summary>
            ant-modal-body style
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Closable">
            <summary>
            show ant-modal-closer 
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Draggable">
            <summary>
            Draggable modal
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.DragInViewport">
            <summary>
            Drag and drop only within the Viewport
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.CloseIcon">
            <summary>
            closer icon RenderFragment, the default is a "X"
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.ConfirmLoading">
            <summary>
            Whether to apply loading visual effect for OK button or not
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.DestroyOnClose">
            <summary>
            Whether to remove Modal from DOM after the Modal closed
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Footer">
            <summary>
            Modal footer. If Footer==null, the dialog will not have a footer
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.WrapClassName">
            <summary>
            The class name of the container of the modal dialog	
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.OnCancel">
            <summary>
            Specify a function that will be called when a user clicks mask, close button on top right or Cancel button.
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.OnOk">
            <summary>
            Specify a function that will be called when a user clicks the OK button
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Content">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Maximizable">
            <summary>
            show modal maximize button
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.MaximizeBtnIcon">
            <summary>
            The icon of the maximize button when the modal is in normal state
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.RestoreBtnIcon">
            <summary>
            The icon of the maximize button when the modal is maximized
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.DefaultMaximized">
            <summary>
            Maximize the Modal during component initialization, and it will ignore the Maximizable value.
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Resizable">
            <summary>
            Resizable
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Locale">
            <summary>
            The locale of the Modal, you can use it to customize the text for buttons.
            </summary>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnInitialized">
            <summary>
            Registration events
            </summary>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmOpen(AntDesign.ConfirmRef)">
            <summary>
            create and open a Confirm dialog
            </summary>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmUpdate(AntDesign.ConfirmRef)">
            <summary>
            update Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmClose(AntDesign.ConfirmRef)">
            <summary>
            destroy Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmRemove(AntDesign.ConfirmRef)">
            <summary>
            after Confirm dialog remove from DOM, to remove it from _confirmRefs 
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComfirmContainer.OnConfirmCloseAll">
            <summary>
            destroy all Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComfirmContainer.Dispose(System.Boolean)">
            <summary>
            Unregister events
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:AntDesign.Confirm">
            <summary>
            DOT NOT use Confirm Directly,
            please using ModalService or ConfirmService to create a Confirm dialog
            </summary>
        </member>
        <member name="P:AntDesign.Confirm.Config">
             <summary>
            
             </summary>
        </member>
        <member name="P:AntDesign.Confirm.ConfirmRef">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.Confirm.OnRemove">
            <summary>
            
            </summary>
        </member>
        <member name="M:AntDesign.Confirm.OnInitializedAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Confirm.OnAfterRenderAsync(System.Boolean)">
            <summary>
            
            </summary>
            <param name="firstRender"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.ConfirmLocale">
            <summary>
            Confirm dialog locale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.OkText">
            <summary>
            OK button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.CancelText">
            <summary>
            Cancel button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.YesText">
            <summary>
            Yes button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.NoText">
            <summary>
            No button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.RetryText">
            <summary>
            Retry button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.AbortText">
            <summary>
            Abort button text
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmLocale.IgnoreText">
            <summary>
            Ignore button text
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmRef">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmRef.Service">
            <summary>
            ModalService
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmRef.Config">
            <summary>
            Confirm dialog options
            </summary>
        </member>
        <member name="M:AntDesign.ConfirmRef.CloseAsync">
            <summary>
            close Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ConfirmRef.OpenAsync">
            <summary>
            Open Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ConfirmRef.UpdateConfigAsync">
            <summary>
            update Confirm dialog config which Visible=true
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ConfirmRef.UpdateConfigAsync(AntDesign.ConfirmOptions)">
            <summary>
            update Confirm dialog config with a new ConfirmOptions
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.ConfirmRef`1">
            <summary>
            ConfirmRef with return value 
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.ConfirmRef`1.OnCancel">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.ConfirmRef`1.OnOk">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.ConfirmRef`1.OkAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.ConfirmRef`1.CancelAsync(`0)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.ConfirmService">
            <summary>
            show a simple Confirm dialog like MessageBox of Windows, it's different from ModalService. ModalService can only create OK-Cancel Confirm dialog and return ConfirmRef, but ConfirmService return ConfirmResult
            </summary>
        </member>
        <member name="M:AntDesign.ConfirmService.Show(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},AntDesign.ConfirmButtons,AntDesign.ConfirmIcon,AntDesign.ConfirmButtonOptions,System.Nullable{AntDesign.ConfirmAutoFocusButton})">
            <summary>
            show a confirm dialog like MessageBox of Windows
            </summary>
            <param name="content">the content of dialog</param>
            <param name="title">the title of dialog</param>
            <param name="confirmButtons">the buttons of dialog</param>
            <param name="confirmIcon">the icon of dialog</param>
            <param name="options">the configuration options for dialog</param>
            <param name="autoFocusButton">the autofocus button</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ConfirmService.Show(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},AntDesign.ConfirmButtons,AntDesign.ConfirmIcon)">
            <summary>
            show a confirm dialog like MessageBox of Windows
            </summary>
            <param name="content">the content of dialog</param>
            <param name="title">the title of dialog</param>
            <param name="confirmButtons">the buttons of dialog</param>
            <param name="confirmIcon">the icon of dialog</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.ModalService">
            <summary>
            create and open a Modal dialog
            </summary>
        </member>
        <member name="M:AntDesign.ModalService.Confirm(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog
            </summary>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Info(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with info icon
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Success(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with success icon
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Error(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with error icon
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Warning(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with Warning icon
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.ConfirmAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.InfoAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with info icon,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.SuccessAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with success icon,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.ErrorAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with error icon,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.WarningAsync(AntDesign.ConfirmOptions)">
            <summary>
            create and open a OK-Cancel Confirm dialog with warning icon,
            and return a bool value which indicates whether the OK button has been clicked
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Update(AntDesign.ConfirmRef)">
            <summary>
            update Confirm which Visible=true
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.UpdateConfirmAsync(AntDesign.ConfirmRef)">
            <summary>
            update Confirm which Visible=true
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.Destroy(AntDesign.ConfirmRef)">
            <summary>
            close a Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.DestroyConfirmAsync(AntDesign.ConfirmRef)">
            <summary>
            close the Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.DestroyAll">
            <summary>
            close all Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.DestroyAllConfirmAsync">
            <summary>
            close all Confirm dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateAsync(AntDesign.ConfirmOptions)">
            <summary>
            Create and open a OK-Cancel Confirm asynchronous
            </summary>
            <param name="config">Options</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateConfirmAsync(AntDesign.ConfirmOptions)">
            <summary>
            Create and open a OK-Cancel Confirm asynchronous
            </summary>
            <param name="config">Options</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateAsync``3(AntDesign.ConfirmOptions,``1)">
            <summary>
            Create and open template Confirm dialog
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="config"></param>
            <param name="componentOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateConfirmAsync``3(AntDesign.ConfirmOptions,``1)">
            <summary>
            Create and open template Confirm dialog
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="config"></param>
            <param name="componentOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.OpenConfirmAsync(AntDesign.ConfirmRef)">
            <summary>
            open the Confirm dialog
            </summary>
            <param name="confirmRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CheckConfirmOptionsIsNull(AntDesign.ConfirmOptions)">
            <summary>
            check Confirm options is null
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:AntDesign.ModalService.CreateModal(AntDesign.ModalOptions)">
            <summary>
            Create and open a Modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModal``1(AntDesign.ModalOptions)">
            <summary>
            Create and open a Modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModal``2(AntDesign.ModalOptions,``1)">
            <summary>
            Create and open a Modal with template
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options">The modal options</param>
            <param name="componentOptions">Set options for template compoennt</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModal``3(AntDesign.ModalOptions,``1)">
            <summary>
            Create and open a Modal with template component
            </summary>
            <typeparam name="TComponent">The type of the template component.</typeparam>
            <typeparam name="TComponentOptions">The type of the template component options.</typeparam>
            <typeparam name="TResult">The result returned from the template component.</typeparam>
            <param name="options">The modal options</param>
            <param name="componentOptions">Set options for template compoennt</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModalAsync(AntDesign.ModalOptions)">
            <summary>
            Create and open a Modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModalAsync``1(AntDesign.ModalOptions)">
            <summary>
            Create and open a Modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModalAsync``2(AntDesign.ModalOptions,``1)">
            <summary>
            Create and open a Modal with template
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <param name="options"></param>
            <param name="componentOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateModalAsync``3(AntDesign.ModalOptions,``1)">
            <summary>
            Create and open a Modal with template
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="options"></param>
            <param name="componentOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateOrOpenModalAsync(AntDesign.ModalRef)">
            <summary>
            create or open a Modal dialog
            </summary>
            <param name="modalRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CreateOrOpenModalAsync``1(AntDesign.ModalRef{``0})">
            <summary>
            create or open a Modal dialog
            </summary>
            <param name="modalRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.CloseModalAsync(AntDesign.ModalRef)">
            <summary>
            close modal dialog
            </summary>
            <param name="modalRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalService.System#IDisposable#Dispose">
            <summary>
            Implement the interface IDisposable
            </summary>
        </member>
        <member name="T:AntDesign.Dialog">
            <summary>
            Dialog only control component show or hide,
            Elements are not removed from the DOM tree
            </summary>
        </member>
        <member name="F:AntDesign.Dialog._element">
            <summary>
            dialog root container
            </summary>
        </member>
        <member name="M:AntDesign.Dialog.GetStyle">
            <summary>
            ant-modal style
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.TryResetModalStyle">
            <summary>
            if Modal is draggable, reset the position style similar with the first show
            </summary>
        </member>
        <member name="M:AntDesign.Dialog.AppendToContainer">
            <summary>
             append To body
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.Dialog._dialogMouseDown">
            <summary>
            check is dialog click
            </summary>
        </member>
        <member name="F:AntDesign.Dialog._sentinelStart">
            <summary>
            TAB keyboard control
            </summary>
        </member>
        <member name="P:AntDesign.Dialog.SentinelStart">
            <summary>
            Tab start control id
            </summary>
        </member>
        <member name="M:AntDesign.Dialog.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Listening for Tab and ESC key events
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.OnCloserClick">
            <summary>
            closer(X) click event
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.OnMaxBtnClick">
            <summary>
            closer(X) click event
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.Show">
            <summary>
            show dialog through animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.CleanShowAnimationAsync">
            <summary>
            clear ant-model enter class, which will disable user-select.
            more details see style/mixins/modal-mask.less
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.Hide">
            <summary>
            Hide Dialog through animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.IsShow">
            <summary>
            Determine whether Dialog is displayed
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.OnParametersSetAsync">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:AntDesign.Dialog.OnAfterRenderAsync(System.Boolean)">
             <summary>
            
             </summary>
             <param name="isFirst"></param>
             <returns></returns>
        </member>
        <member name="T:AntDesign.DialogWrapper">
            <summary>
            A component that can exist in the DOM tree for a long time, unless you destroy it on your own initiative
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.Config">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.ChildContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.OnBeforeDestroy">
            <summary>
            Before destroy the component from the DOM tree. And you can cancel the destroy by set CancelEventArgs.Cancel = true
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.OnAfterShow">
            <summary>
            trigger when visible is true on OnAfterRenderAsync method
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.OnAfterHide">
            <summary>
            trigger when visible is false on OnAfterRenderAsync method
            </summary>
        </member>
        <member name="P:AntDesign.DialogWrapper.Dialog">
            <summary>
            
            </summary>
        </member>
        <member name="M:AntDesign.DialogWrapper.OnParametersSetAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DialogWrapper.OnAfterRenderAsync(System.Boolean)">
            <summary>
            
            </summary>
            <param name="firstRender"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DialogWrapper.DestroyAsync">
            <summary>
            Destroy the component from the DOM tree
            </summary>
        </member>
        <member name="T:AntDesign.Modal">
                <summary>
                <para>Modal dialogs.</para>
            
                <h2>When To Use</h2>
            
                <para>
                When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use <c>Modal</c> to create a new floating layer over the current page to get user feedback or display information. 
                Additionally, if you need show a simple confirmation dialog, you can use <c>ModalService.Confirm()</c>, and so on.
                </para>
                </summary>
                <seealso cref="T:AntDesign.ModalService" />
                <seealso cref="T:AntDesign.ConfirmService" />
                <seealso cref="T:AntDesign.ConfirmOptions" />
        </member>
        <member name="P:AntDesign.Modal.AfterClose">
            <summary>
            Callback after modal is closed.
            </summary>
        </member>
        <member name="P:AntDesign.Modal.AfterOpen">
            <summary>
            Callback after modal is opened.
            </summary>
        </member>
        <member name="P:AntDesign.Modal.BodyStyle">
            <summary>
            Body style for modal body element. Such as height, padding etc
            </summary>
        </member>
        <member name="P:AntDesign.Modal.CancelText">
            <summary>
            Text or RenderFragment of the Cancel button, it will override the ModalLocale
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Centered">
            <summary>
            centered
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Closable">
            <summary>
            Whether a close (x) button is visible on top right of the modal dialog or not
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Modal.Draggable">
            <summary>
            Whether the modal dialog box be dragged
            </summary>
        </member>
        <member name="P:AntDesign.Modal.DragInViewport">
            <summary>
            Drag and drop only within the Viewport
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Modal.CloseIcon">
            <summary>
            closer icon RenderFragment, the default is a "X"
            </summary>
            <default value="close-outline" />
        </member>
        <member name="P:AntDesign.Modal.ConfirmLoading">
            <summary>
            Whether to apply loading visual effect for OK button or not
            </summary>
        </member>
        <member name="P:AntDesign.Modal.DestroyOnClose">
            <summary>
            Whether to unmount child components on onClose
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Modal.Header">
            <summary>
            Header content
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Footer">
            <summary>
            Footer content, set as Footer=null when you don't need default buttons
            </summary>
        </member>
        <member name="P:AntDesign.Modal.GetContainer">
            <summary>
            get or set the modal parent DOM, default is null: which is specifying document.body
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Keyboard">
            <summary>
            Whether support press esc to close
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Modal.Mask">
            <summary>
            Whether show mask or not
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Modal.MaskClosable">
            <summary>
            Whether to close the modal dialog when the mask (area outside the modal) is clicked
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Modal.MaskStyle">
            <summary>
            Style for modal's mask element
            </summary>
        </member>
        <member name="P:AntDesign.Modal.OkText">
            <summary>
            Text of RenderFragment of the OK button, it will override the ModalLocale
            </summary>
            <default value="null" />
        </member>
        <member name="P:AntDesign.Modal.OkType">
            <summary>
            Button type of the OK button
            </summary>
            <default value="ButtonType.Primary" />
        </member>
        <member name="P:AntDesign.Modal.Title">
            <summary>
            The modal dialog's title
            </summary>
        </member>
        <member name="P:AntDesign.Modal.TitleTemplate">
            <summary>
            The modal dialog's title. Takes priority over Title.
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Visible">
            <summary>
            Whether the modal dialog is visible or not
            </summary>
        </member>
        <member name="P:AntDesign.Modal.VisibleChanged">
            <summary>
            Specify a function invoke when the modal dialog is visible or not
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Width">
            <summary>
            Width of the modal dialog, the default value is 520
            </summary>
            <default value="520" />
        </member>
        <member name="P:AntDesign.Modal.WrapClassName">
            <summary>
            The class name of the container of the modal dialog
            </summary>
        </member>
        <member name="P:AntDesign.Modal.ZIndex">
            <summary>
            The z-index of the Modal
            </summary>
            <default value="1000" />
        </member>
        <member name="P:AntDesign.Modal.OnCancel">
            <summary>
            Specify a function that will be called when a user clicks mask, close button on top right or Cancel button
            </summary>
        </member>
        <member name="P:AntDesign.Modal.OnOk">
            <summary>
            Specify a function that will be called when a user clicks the OK button
            </summary>
        </member>
        <member name="P:AntDesign.Modal.OkButtonProps">
            <summary>
            The OK button props
            </summary>
        </member>
        <member name="P:AntDesign.Modal.CancelButtonProps">
            <summary>
            The Cancel button props
            </summary>
        </member>
        <member name="P:AntDesign.Modal.ChildContent">
            <summary>
            Child content
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Rtl">
            <summary>
            Is RTL
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Locale">
            <summary>
            Modal Locale
            </summary>
            <default value="LocaleProvider.CurrentLocacle.Modal" />
        </member>
        <member name="P:AntDesign.Modal.MaxBodyHeight">
            <summary>
            max modal content body height
            </summary>
        </member>
        <member name="P:AntDesign.Modal.Maximizable">
            <summary>
            show modal maximize button
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Modal.MaximizeBtnIcon">
            <summary>
            The icon of the maximize button when the modal is in normal state
            </summary>
            <default value="fullscreen-outline" />
        </member>
        <member name="P:AntDesign.Modal.RestoreBtnIcon">
            <summary>
            The icon of the maximize button when the modal is maximized
            </summary>
            <default value="fullscreen-exit-outline" />
        </member>
        <member name="P:AntDesign.Modal.DefaultMaximized">
            <summary>
            Maximize the Modal during component initialization, and it will ignore the Maximizable value.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Modal.Resizable">
            <summary>
            Resizable (Horizontal direction only)
            </summary>
        </member>
        <member name="P:AntDesign.Modal.ForceRender">
            <summary>
            Whether to force to render the Modal dom before opening.   
            </summary>
        </member>
        <member name="T:AntDesign.ModalCancelFooter">
            <summary>
            modal footer Component
            </summary>
        </member>
        <member name="P:AntDesign.ModalCancelFooter.ModalProps">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.ModalFooter">
            <summary>
            modal footer Component
            </summary>
        </member>
        <member name="P:AntDesign.ModalFooter.ModalProps">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.ModalLocale">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ModalLocale.OkText">
            <summary>
            OK button text
            </summary>
        </member>
        <member name="P:AntDesign.ModalLocale.CancelText">
            <summary>
            Cancel button text
            </summary>
        </member>
        <member name="T:AntDesign.ModalOkFooter">
            <summary>
            modal footer Component
            </summary>
        </member>
        <member name="P:AntDesign.ModalOkFooter.ModalProps">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.ModalRef">
            <summary>
            The reference of the modal instance
            </summary>
        </member>
        <member name="P:AntDesign.ModalRef.Config">
            <summary>
            The modal options
            </summary>
        </member>
        <member name="M:AntDesign.ModalRef.OpenAsync">
            <summary>
            open the Modal dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalRef.CloseAsync">
            <summary>
            close the Modal dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalRef.UpdateConfigAsync">
            <summary>
            Update modal
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ModalRef.SetConfirmLoading(System.Boolean)">
            <summary>
            Set the loading state of the confirm button
            </summary>
            <param name="loading"></param>
        </member>
        <member name="T:AntDesign.ModalRef`1">
            <summary>
            ModalRef with return value
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.ModalRef`1.OnCancel">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.ModalRef`1.OnOk">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.ModalRef`1.OkAsync(`0)">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.ModalRef`1.CancelAsync(`0)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.ConfirmButtons">
            <summary>
            Confirm footer buttons type
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.OK">
            <summary>
            Only a OK button
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.OKCancel">
            <summary>
            two buttons: OK and a Cancel
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.YesNo">
            <summary>
            two buttons: Yes and No 
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.RetryCancel">
            <summary>
            two buttons: Retry and Cancel
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.AbortRetryIgnore">
            <summary>
            three buttons: Abort, Retry and Ignore
            </summary>
        </member>
        <member name="F:AntDesign.ConfirmButtons.YesNoCancel">
            <summary>
            three buttons: Yes, No and Cancel
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmIcon">
            <summary>
            Confirm icon type
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmResult">
            <summary>
            which the confirm button is clicked
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.AnimationClass">
            <summary>
            控制出现与消失的动画
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Btn">
            <summary>
            自定义关闭按钮
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.ClassName">
            <summary>
            自定义 CSS class
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.CloseIcon">
            <summary>
            自定义关闭图标
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Message">
            <summary>
            通知提醒标题，必选，string 或者 RenderFragment
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Description">
            <summary>
            通知提醒内容，必选，string 或者 RenderFragment
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Duration">
            <summary>
            自动关闭的延时，单位为秒。默认 4.5 秒后自动关闭，配置为 0 则不自动关闭
             </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Icon">
            <summary>
            自定义图标	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Key">
            <summary>
            当前通知唯一标志		
            </summary>
        </member>
        <member name="E:AntDesign.NotificationConfig.OnClose">
            <summary>
            当通知关闭时触发	
            </summary>
        </member>
        <member name="E:AntDesign.NotificationConfig.OnClick">
            <summary>
            点击通知时触发的回调函数	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Style">
            <summary>
            自定义内联样式	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.Placement">
            <summary>
            弹出位置
            </summary>
        </member>
        <member name="P:AntDesign.NotificationConfig.NotificationType">
            <summary>
            通知提醒框左侧的图标类型
            </summary>
        </member>
        <member name="T:AntDesign.NotificationGlobalConfig">
            <summary>
            AntNotification全局配置
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Bottom">
            <summary>
            消息从底部弹出时，距离底部的位置，单位像素。
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Top">
            <summary>
            消息从顶部弹出时，距离顶部的位置，单位像素。	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Rtl">
            <summary>
            是否开启 RTL 模式	
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.CloseIcon">
            <summary>
            自定义关闭图标
            </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Duration">
            <summary>
            自动关闭的延时，单位为秒。默认 4.5 秒后自动关闭，配置为 null 则不自动关闭
             </summary>
        </member>
        <member name="P:AntDesign.NotificationGlobalConfig.Placement">
            <summary>
            弹出位置
            </summary>
        </member>
        <member name="T:AntDesign.Notification">
                <summary>
                    <para>Display a notification message globally.</para>
            
                    <h2>When To Use</h2>
            
                    <para>To display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:</para>
            
                    <list type="bullet">
                        <item>A notification with complex content.</item>
                        <item>A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow.</item>
                        <item>A notification that is pushed by the application.</item>
                    </list>
            
                    <para>Note: Please confirm that the <c><AntContainer /></c> component has been added to <c>App.Razor</c>. If notifications are not displaying this is a common problem.</para>
                </summary>
                <seealso cref="T:AntDesign.NotificationService"/>
                <seealso cref="T:AntDesign.NotificationConfig"/>
                <seealso cref="T:AntDesign.NotificationRef"/>
        </member>
        <member name="M:AntDesign.Notification.Config(AntDesign.NotificationGlobalConfig)">
            <summary>
            modify global config
            </summary>
            <param name="defaultConfig"></param>
        </member>
        <member name="T:AntDesign.NotificationBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.NotificationRef">
            <summary>
            NotificationRef
            </summary>
        </member>
        <member name="P:AntDesign.NotificationRef.Config">
            <summary>
            the notification box's config
            </summary>
        </member>
        <member name="M:AntDesign.NotificationRef.OpenAsync">
            <summary>
            open the notification box
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationRef.UpdateConfigAsync">
            <summary>
            After modifying the Config property, update the notification box
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationRef.UpdateConfigAsync(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment})">
            <summary>
            update the notification box's description
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationRef.UpdateConfigAsync(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment})">
            <summary>
            update the notification box's description and message
            </summary>
            <param name="description"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationRef.CloseAsync">
            <summary>
            close the notification box
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.NotificationService">
            <summary>
            AntNotification Service
            </summary>
        </member>
        <member name="M:AntDesign.NotificationService.Config(AntDesign.NotificationGlobalConfig)">
            <summary>
            Provide default configuration for all notifications
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.CreateRefAsync(AntDesign.NotificationConfig)">
            <summary>
            just create a NotificationRef without open it
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationService.UpdateAsync(System.String,OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment},System.Nullable{OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment}})">
            <summary>
            update a existed notification box
            </summary>
            <param name="key"></param>
            <param name="description"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationService.Open(AntDesign.NotificationConfig)">
            <summary>
            Open a notification box
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Success(AntDesign.NotificationConfig)">
            <summary>
            open a notification box with NotificationType.Success style
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Error(AntDesign.NotificationConfig)">
            <summary>
            open a notification box with NotificationType.Error style
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Info(AntDesign.NotificationConfig)">
            <summary>
            open a notification box with NotificationType.Info style
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Warning(AntDesign.NotificationConfig)">
            <summary>
            open a notification box with NotificationType.Warning style
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Warn(AntDesign.NotificationConfig)">
            <summary>
            Equivalent to Warning method
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.NotificationService.Close(System.String)">
            <summary>
            close notification by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.NotificationService.Destroy">
            <summary>
            destroy all Notification box
            </summary>
        </member>
        <member name="T:AntDesign.PageHeader">
                <summary>
                <para>A header with common actions and design elements built in.</para>
            
                <h2>When To Use</h2>
            
                <para>PageHeader can be used to highlight the page topic, display important information about the page, and carry the action items related to the current page (including page-level operations, inter-page navigation, etc.) It can also be used as inter-page navigation.</para>
                </summary>
        </member>
        <member name="P:AntDesign.PageHeader.Ghost">
            <summary>
            Make background transparent
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.PageHeader.BackIcon">
            <summary>
            Icon for back button
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.BackIconTemplate">
            <summary>
            Back button RenderFragment
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.TitleTemplate">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.Subtitle">
            <summary>
            Sub Title
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.SubtitleTemplate">
            <summary>
            Sub Title
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.OnBack">
            <summary>
            Callback when clicking back
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.PageHeaderContent">
            <summary>
            Content section
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.PageHeaderFooter">
            <summary>
            Footer section
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.PageHeaderBreadcrumb">
            <summary>
            Breadcrumb section
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.PageHeaderAvatar">
            <summary>
            Avatar section
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.PageHeaderTitle">
            <summary>
            Title section
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.PageHeaderSubtitle">
            <summary>
            Sub title section
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.PageHeaderTags">
            <summary>
            Tags section after title
            </summary>
        </member>
        <member name="P:AntDesign.PageHeader.PageHeaderExtra">
            <summary>
            Operating area, at the end of the line of the title line
            </summary>
        </member>
        <member name="T:AntDesign.Pagination">
                <summary>
                <para>A long list can be divided into several pages using `Pagination`, and only one page will be loaded at a time.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When it will take a long time to load/render all items.</item>
                    <item>If you want to browse the data by navigating through pages.</item>
                </list>
                </summary>
        </member>
        <member name="P:AntDesign.Pagination.Total">
            <summary>
            Total number of data items	
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Pagination.DefaultCurrent">
            <summary>
            Default initial page number	
            </summary>
            <default value="1" />
        </member>
        <member name="P:AntDesign.Pagination.Disabled">
            <summary>
            Disable pagination
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Pagination.Current">
            <summary>
            Current page number
            </summary>
            <default value="1" />
        </member>
        <member name="P:AntDesign.Pagination.DefaultPageSize">
            <summary>
            Default number of data items per page
            </summary>
            <default value="10" />
        </member>
        <member name="P:AntDesign.Pagination.PageSize">
            <summary>
            Number of data items per page
            </summary>
            <default value="10" />
        </member>
        <member name="P:AntDesign.Pagination.OnChange">
            <summary>
            Called when the page number is changed, and it takes the resulting page number and pageSize as its arguments
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.HideOnSinglePage">
            <summary>
            Whether to hide pager on single page
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Pagination.ShowSizeChanger">
            <summary>
            Determine whether to show PageSize select
            </summary>
            <default value="true when Total >= TotalBoundaryShowSizeChanger" />
        </member>
        <member name="P:AntDesign.Pagination.PageSizeOptions">
            <summary>
            Specify the sizeChanger options
            </summary>
            <default value="10, 20, 50, 100" />
        </member>
        <member name="P:AntDesign.Pagination.OnShowSizeChange">
            <summary>
            Called when PageSize is changed
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.ShowQuickJumper">
            <summary>
            Determine whether you can jump to pages directly
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Pagination.GoButton">
            <summary>
            Quick jumper confirm button render fragment
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.ShowTitle">
            <summary>
            Show page item's title
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Pagination.ShowTotal">
            <summary>
            To display the total number and range
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.Size">
            <summary>
            Specify the size of Pagination, can be set to small.
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.Responsive">
            <summary>
            (Not implemented) If Size is not specified, Pagination would resize according to the width of the window
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Pagination.Simple">
            <summary>
            Whether to use simple mode
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Pagination.Locale">
            <summary>
            Localization options
            </summary>
            <default value="LocaleProvider.CurrentLocale.Pagination" />
        </member>
        <member name="P:AntDesign.Pagination.ItemRender">
            <summary>
            Custom rendering for page item
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.ShowLessItems">
            <summary>
            Show less page items
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Pagination.ShowPrevNextJumpers">
            <summary>
            Show or hide the next/previous buttons
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Pagination.Direction">
            <summary>
            Language direction
            </summary>
            <default value="ltr" />
        </member>
        <member name="P:AntDesign.Pagination.PrevIcon">
            <summary>
            Previous button
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.NextIcon">
            <summary>
            Next button
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.JumpPrevIcon">
            <summary>
            Jump previous button
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.JumpNextIcon">
            <summary>
            Jump next icon
            </summary>
        </member>
        <member name="P:AntDesign.Pagination.TotalBoundaryShowSizeChanger">
            <summary>
            Used to determine if the size changer should show using the default logic. Ignored if ShowSizeChanger provided.
            </summary>
            <default value="50" />
        </member>
        <member name="P:AntDesign.Pagination.UnmatchedAttributes">
            <summary>
            Any other parameters passed in get splatted onto the container element
            </summary>
        </member>
        <member name="M:AntDesign.Pagination.GetItemIcon(Microsoft.AspNetCore.Components.RenderFragment{AntDesign.PaginationItemRenderContext},System.String)">
            <summary>
            computed icon node that need to be rendered.
            </summary>
            <param name="icon"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.PaginationOptions.IsSmall">
            <summary>
            If pagination is small or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.PaginationOptions.Disabled">
            <summary>
            Whether the pagination is disabled or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.PaginationOptions.ChangeSize">
            <summary>
            Callback executed when the page size changes
            </summary>
        </member>
        <member name="P:AntDesign.PaginationOptions.Current">
            <summary>
            Current page
            </summary>
        </member>
        <member name="P:AntDesign.PaginationOptions.PageSize">
            <summary>
            Current pag size
            </summary>
        </member>
        <member name="P:AntDesign.PaginationOptions.PageSizeOptions">
            <summary>
            Options for page size selection
            </summary>
            <default value="{ 10, 20, 50, 100 }"/>
        </member>
        <member name="P:AntDesign.PaginationOptions.QuickGo">
            <summary>
            Callback executed when jumping to a specific page
            </summary>
        </member>
        <member name="P:AntDesign.PaginationOptions.GoButton">
            <summary>
            Quick jumper confirm button, this is for react version <c>ShowQuickJumper: { goButton: ReactNode }</c>
            </summary>
        </member>
        <member name="P:AntDesign.PaginationOptions.Locale">
            <summary>
            Locale used for localization of the component
            </summary>
            <default value="LocaleProvider.CurrentLocale.Pagination" />
        </member>
        <member name="T:AntDesign.Popconfirm">
                <summary>
                    <para>A simple and compact confirmation dialog of an action.</para>
            
                    <h2>When To Use</h2>
            
                    <para>A simple and compact dialog used for asking for user confirmation.</para>
                    <para>The difference with the <c>confirm</c> modal dialog is that it's more lightweight than the static popped full-screen confirm modal.</para>
            
                    <h2>Two types</h2>
            
                    <para>There are 2 rendering approaches for <c>Popconfirm</c>:</para>  
            
                    <list type="number">
                        <item>Wraps child element (content of the <c>Popconfirm</c>) with a <c>div</c> tag (default approach).</item>
                        <item>Child element is not wrapped with anything. This approach requires usage of <c>Unbound</c> tag inside <c>Popconfirm</c> and depending on the child element type (please refer to the first example):
                            <list type="bullet">
                                <item>html tag: has to have its <c>@ref</c> set to <c>@context.Current</c></item>
                                <item><c>Ant Design Blazor</c> component: has to have its <c>RefBack</c> attribute set to <c>@context</c>.</item>
                            </list>       
                        </item>
                    </list>
            
                    <para>Please ensure that the child node of <c>Popconfirm</c> accepts <c>onMouseEnter</c>, <c>onMouseLeave</c>, <c>onFocus</c>, <c>onClick</c> events.</para>
                </summary>
                <inheritdoc/>
                <seealso cref="T:AntDesign.ButtonProps" />
        </member>
        <member name="P:AntDesign.Popconfirm.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:AntDesign.Popconfirm.TitleTemplate">
            <summary>
            Title. Takes priority over Title.
            </summary>
        </member>
        <member name="P:AntDesign.Popconfirm.CancelText">
            <summary>
            Cancel button text
            </summary>
            <default value="Cancel" />
        </member>
        <member name="P:AntDesign.Popconfirm.OkText">
            <summary>
            Okay button text
            </summary>
            <default value="OK" />
        </member>
        <member name="P:AntDesign.Popconfirm.OkType">
            <summary>
            Okay button type
            </summary>
            <default value="primary" />
        </member>
        <member name="P:AntDesign.Popconfirm.Locale">
            <summary>
            Properties to pass through to the okay button
            </summary>
        </member>
        <member name="P:AntDesign.Popconfirm.OkButtonProps">
            <summary>
            Properties to pass through to the okay button
            </summary>
        </member>
        <member name="P:AntDesign.Popconfirm.CancelButtonProps">
            <summary>
            Properties to pass through to the cancel button
            </summary>
        </member>
        <member name="P:AntDesign.Popconfirm.Icon">
            <summary>
            Icon displayed by text
            </summary>
            <default value="exclamation-circle" />
        </member>
        <member name="P:AntDesign.Popconfirm.IconTemplate">
            <summary>
            Icon displayed by text. Takes priority over Icon.
            </summary>
        </member>
        <member name="P:AntDesign.Popconfirm.OnCancel">
            <summary>
            Callback executed when clicking cancel button
            </summary>
        </member>
        <member name="P:AntDesign.Popconfirm.OnConfirm">
            <summary>
            Callback executed when clicking okay button
            </summary>
        </member>
        <member name="P:AntDesign.Popconfirm.ArrowPointAtCenter">
            <summary>
            Point the tooltip arrow at the center
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Popconfirm.MouseEnterDelay">
            <summary>
            Delay (in seconds) before showing popconfirm when trigger is Hover and mouse enters
            </summary>
            <default value="0.1" />
        </member>
        <member name="P:AntDesign.Popconfirm.MouseLeaveDelay">
            <summary>
            Delay (in seconds) before hiding popconfirm when trigger is Hover and mouse leaves
            </summary>
            <default value="0.1" />
        </member>
        <member name="T:AntDesign.Popover">
                <summary>
                <para>The floating card popped by clicking or hovering.</para>
            
                <h2>When To Use</h2>
            
                <para>A simple popup menu to provide extra information or operations.</para>
            
                <para>Comparing with <c>Tooltip</c>, besides information <c>Popover</c> card can also provide action elements like links and buttons.</para>
            
                <h2>Two types</h2>
            
                <para>There are 2 rendering approaches for <c>Popover</c>: </para> 
                <list type="number">
                    <item>Wraps child element (content of the <c>Popover</c>) with a <c>div</c> tag (default approach).</item>
                    <item>Child element is not wrapped with anything. This approach requires usage of <c>Unbound</c> tag inside <c>Popover</c> and depending on the child element type (please refer to the first example):
                        <list type="bullet">
                            <item>html tag: has to have its <c>@ref</c> set to <c>@context.Current</c></item>
                            <item><c>Ant Design Blazor</c> component: has to have its <c>RefBack</c> attribute set to <c>@context</c>.</item>
                        </list>       
                    </item>
                </list>
                <para>Please ensure that the child node of <c>Popover</c> accepts <c>onMouseEnter</c>, <c>onMouseLeave</c>, <c>onFocus</c>, <c>onClick</c> events.</para>
                </summary>
        </member>
        <member name="P:AntDesign.Popover.Title">
            <summary>
            Title string of the card
            </summary>
        </member>
        <member name="P:AntDesign.Popover.TitleTemplate">
            <summary>
            Title content of the card. Takes priority over <see cref="P:AntDesign.Popover.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.Popover.Content">
            <summary>
            Content string of the card
            </summary>
        </member>
        <member name="P:AntDesign.Popover.ContentTemplate">
            <summary>
            Content of the card. Takes priority over <see cref="P:AntDesign.Popover.Content"/>
            </summary>
        </member>
        <member name="P:AntDesign.Popover.ArrowPointAtCenter">
            <summary>
            Point the arrow at the center of the wrapped element or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Popover.MouseEnterDelay">
            <summary>
            Delay in seconds, before tooltip is shown on mouse enter
            </summary>
            <default value="0.1" />
        </member>
        <member name="P:AntDesign.Popover.MouseLeaveDelay">
            <summary>
            Delay in seconds, before tooltip is hidden on mouse leave
            </summary>
            <default value="0.1" />
        </member>
        <member name="T:AntDesign.Progress">
                <summary>
                <para>Display the current progress of an operation flow.</para>
            
                <h2>When To Use</h2>
            
                <para>If it will take a long time to complete an operation, you can use `Progress` to show the current progress and status.</para>
            
                <list type="bullet">
                    <item>When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds.</item>
                    <item>When you need to display the completion percentage of an operation.</item>
                </list>
                </summary>
        </member>
        <member name="P:AntDesign.Progress.Size">
            <summary>
            progress size
            </summary>
            <default value="ProgressSize.Default" />
        </member>
        <member name="P:AntDesign.Progress.Type">
            <summary>
            to set the type, options: line circle dashboard
            </summary>
            <default value="ProgressType.Line" />
        </member>
        <member name="P:AntDesign.Progress.Format">
            <summary>
            template function of the content
            </summary>
            <default value="i%" />
        </member>
        <member name="P:AntDesign.Progress.Percent">
            <summary>
            to set the completion percentage
            </summary>
        </member>
        <member name="P:AntDesign.Progress.ShowInfo">
            <summary>
            whether to display the progress value and the status icon
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Progress.Status">
            <summary>
            to set the status of the Progress, options: success exception normal active(line only)
            </summary>
            <default value="ProgressStatus.Normal" />
        </member>
        <member name="P:AntDesign.Progress.StrokeLinecap">
            <summary>
            to set the style of the progress linecap
            </summary>
            <default value="ProgressStrokeLinecap.Round" />
        </member>
        <member name="P:AntDesign.Progress.SuccessPercent">
            <summary>
            segmented success percent
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Progress.TrailColor">
            <summary>
            color of unfilled part
            </summary>
        </member>
        <member name="P:AntDesign.Progress.StrokeWidth">
            <summary>
            to set the width of the progress bar, unit: px
            to set the width of the circular progress, unit: percentage of the canvas width
            to set the width of the dashboard progress, unit: percentage of the canvas width
            </summary>
            <default value="Type = line: 10, Type = circle or dashboard: 6" />
        </member>
        <member name="P:AntDesign.Progress.StrokeColor">
            <summary>
            color of progress bar, render linear-gradient when passing an object
            color of circular progress, render linear-gradient when passing an object
            </summary>
        </member>
        <member name="P:AntDesign.Progress.Steps">
            <summary>
            the total step count
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Progress.Width">
            <summary>
            to set the canvas width of the circular progress, unit: px
            to set the canvas width of the dashboard progress, unit: px
            </summary>
            <default value="120" />
        </member>
        <member name="P:AntDesign.Progress.GapDegree">
            <summary>
            the gap degree of half circle, 0 ~ 295
            </summary>
            <default value="75" />
        </member>
        <member name="P:AntDesign.Progress.GapPosition">
            <summary>
            the gap position, options: top bottom left right
            </summary>
            <default value="ProgressGapPosition.Bottom" />
        </member>
        <member name="T:AntDesign.Radio`1">
                <summary>
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>Used to select a single state from multiple options.</item>
                    <item>The difference from Select is that Radio is visible to the user and can facilitate the comparison of choice, which means there shouldn't be too many of them.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.RadioGroup`1"/>
        </member>
        <member name="P:AntDesign.Radio`1.ChildContent">
            <summary>
            Display label content for the radio
            </summary>
        </member>
        <member name="P:AntDesign.Radio`1.Value">
            <summary>
            Selected value
            </summary>
        </member>
        <member name="P:AntDesign.Radio`1.AutoFocus">
            <summary>
            Autofocus or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Radio`1.RadioButton">
            <summary>
            Set to <c>true</c> to style the radio as button group.
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Radio`1.Checked">
            <summary>
            Specifies whether the radio is selected
            </summary>
        </member>
        <member name="P:AntDesign.Radio`1.DefaultChecked">
            <summary>
            Specify if the radio button is checked initially or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Radio`1.CheckedChanged">
            <summary>
            Callback executed when the checked state changes
            </summary>
        </member>
        <member name="P:AntDesign.Radio`1.Disabled">
            <summary>
            Disable the radio buton
            </summary>
        </member>
        <member name="P:AntDesign.Radio`1.CheckedChange">
            <summary>
            Callback executed when the checked state changes
            </summary>
        </member>
        <member name="P:AntDesign.RadioGroup`1.ChildContent">
            <summary>
            Radio elements for the group. Use either this or <see cref="P:AntDesign.RadioGroup`1.Options"/>
            </summary>
        </member>
        <member name="P:AntDesign.RadioGroup`1.Disabled">
            <summary>
            If the group is disabled or not
            </summary>
        </member>
        <member name="P:AntDesign.RadioGroup`1.ButtonStyle">
            <summary>
            Button style for the group.
            </summary>
            <default value="RadioButtonStyle.Outline"/>
        </member>
        <member name="P:AntDesign.RadioGroup`1.Name">
            <summary>
            Input name for all the radios in the group
            </summary>
        </member>
        <member name="P:AntDesign.RadioGroup`1.DefaultValue">
            <summary>
            The default selected value for the group
            </summary>
        </member>
        <member name="P:AntDesign.RadioGroup`1.OnChange">
            <summary>
            Callback executed when the selected value changes
            </summary>
        </member>
        <member name="P:AntDesign.RadioGroup`1.Options">
            <summary>
            Options to display a radio for in the group. Use either this or <see cref="P:AntDesign.RadioGroup`1.ChildContent"/>
            </summary>
        </member>
        <member name="T:AntDesign.Rate">
                <summary>
                <para>Rate component.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>Show evaluation.</item>
                    <item>A quick rating operation on something.</item>
                </list>
                </summary>
        </member>
        <member name="P:AntDesign.Rate.AllowClear">
            <summary>
            Whether to allow clear or not when clicking again
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Rate.AllowHalf">
            <summary>
            Whether to allow selection of halves
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Rate.Disabled">
            <summary>
            Whether to disable the selection or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Rate.AutoFocus">
            <summary>
            Whether to focus on render or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Rate.Character">
            <summary>
            Custom character for each rate
            </summary>
        </member>
        <member name="P:AntDesign.Rate.Count">
            <summary>
            Number of icons to display for rating
            </summary>
            <default value="5"/>
        </member>
        <member name="P:AntDesign.Rate.Value">
            <summary>
            Current value for rating
            </summary>
        </member>
        <member name="P:AntDesign.Rate.ValueChanged">
            <summary>
            Callback executed when the rating changes
            </summary>
        </member>
        <member name="P:AntDesign.Rate.DefaultValue">
            <summary>
            Default value for when rating is rendered
            </summary>
        </member>
        <member name="P:AntDesign.Rate.Tooltips">
            <summary>
            Tooltip to show for each increment of rating, in order of index of rating 0-n
            </summary>
        </member>
        <member name="P:AntDesign.Rate.OnBlur">
            <summary>
            Callback executed when the rate looses focus
            </summary>
        </member>
        <member name="P:AntDesign.Rate.OnFocus">
            <summary>
            Callback executed when the rate gains focus
            </summary>
        </member>
        <member name="F:AntDesign.Rate._hasHalf">
            <summary>
            是否允许半选
            Whether to allow half-selection
            </summary>
        </member>
        <member name="F:AntDesign.Rate._hoverValue">
            <summary>
            鼠标悬停时从最左到光标位置的星星数。
            The number of stars from the far left to the cursor position when the hovered with mouse.
            </summary>
        </member>
        <member name="F:AntDesign.Rate._currentValue">
            <summary>
            当前被选中的星星数量
            Number of stars currently selected
            </summary>
        </member>
        <member name="F:AntDesign.Rate._isFocused">
            <summary>
            是否获取的输入焦点
            Wheter to get input focus.
            </summary>
        </member>
        <member name="F:AntDesign.Rate._valueWasSet">
            <summary>
            Indicates if Value has been changed. Needed to avoid reseting to DefaultValue if exists.
            </summary>
        </member>
        <member name="P:AntDesign.RateItemRenderContext.Type">
            <summary>
             'AntIcon' | 'Text'
            </summary>
        </member>
        <member name="T:AntDesign.Result">
                <summary>
                <para>Used to feed back the results of a series of operational tasks.</para>
            
                <h2>When To Use</h2>
            
                <para>Use when important operations need to inform the user to process the results and the feedback is more complicated.</para>
                </summary>
        </member>
        <member name="P:AntDesign.Result.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:AntDesign.Result.TitleTemplate">
            <summary>
            Title. Takes priority over Title.
            </summary>
        </member>
        <member name="P:AntDesign.Result.SubTitle">
            <summary>
            Sub Title
            </summary>
        </member>
        <member name="P:AntDesign.Result.SubTitleTemplate">
            <summary>
            Sub Title. Takes priority over SubTitle.
            </summary>
        </member>
        <member name="P:AntDesign.Result.Extra">
            <summary>
            Extra content displayed under all other content
            </summary>
        </member>
        <member name="P:AntDesign.Result.Status">
            <summary>
            Type of result. Influences styles and default image/icon. Possible values: success, error, info, warning, 404, 403, 500
            </summary>
            <default value="ResultStatus.Info" />
        </member>
        <member name="P:AntDesign.Result.Icon">
            <summary>
            Custom icon. Format: "{type}-{theme}"
            </summary>
        </member>
        <member name="P:AntDesign.Result.IsShowIcon">
            <summary>
            Show icon or not
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Result.ChildContent">
            <summary>
            Child content. Displayed between title/subtitle and extra.
            </summary>
        </member>
        <member name="T:AntDesign.Segmented`1">
                <summary>
                <para>Segmented Controls. This component is available since `v0.12.0`.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When displaying multiple options and user can select a single option</item>
                    <item>When switching the selected option, the content of the associated area changes.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.SegmentedItem`1"/>
        </member>
        <member name="P:AntDesign.Segmented`1.DefaultValue">
            <summary>
            Default selected value
            </summary>
        </member>
        <member name="P:AntDesign.Segmented`1.Disabled">
            <summary>
            Disable all segments
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Segmented`1.OnChange">
            <summary>
            The callback function that is triggered when the state changes
            </summary>
        </member>
        <member name="P:AntDesign.Segmented`1.Options">
            <summary>
            Options for the segments. Takes priority over <see cref="P:AntDesign.Segmented`1.Labels"/>
            </summary>
        </member>
        <member name="P:AntDesign.Segmented`1.Labels">
            <summary>
            Labels for the segments
            </summary>
        </member>
        <member name="P:AntDesign.Segmented`1.Size">
            <summary>
            Size of the UI element
            </summary>
        </member>
        <member name="P:AntDesign.Segmented`1.Value">
            <summary>
            Currently selected value
            </summary>
        </member>
        <member name="P:AntDesign.Segmented`1.ValueChanged">
            <summary>
            Callback executed when the selected segment changes
            </summary>
        </member>
        <member name="P:AntDesign.Segmented`1.ChildContent">
            <summary>
            Segments. Takes priority over <see cref="P:AntDesign.Segmented`1.Labels"/> and <see cref="P:AntDesign.Segmented`1.Options"/>
            </summary>
        </member>
        <member name="P:AntDesign.Segmented`1.Block">
            <summary>
            Make the component the width of the parent
            </summary>
        </member>
        <member name="P:AntDesign.SegmentedItem`1.Value">
            <summary>
            Value of the segment item
            </summary>
        </member>
        <member name="P:AntDesign.SegmentedItem`1.Label">
            <summary>
            Label for the UI of the segment item
            </summary>
        </member>
        <member name="P:AntDesign.SegmentedItem`1.Disabled">
            <summary>
            If the segment is disabled
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.SegmentedItem`1.ChildContent">
            <summary>
            UI content to display in the segment. Takes priority over <see cref="P:AntDesign.SegmentedItem`1.Label"/> and <see cref="P:AntDesign.SegmentedItem`1.Icon"/>
            </summary>
        </member>
        <member name="P:AntDesign.SegmentedItem`1.Icon">
            <summary>
            Icon to display next to the label of the segment. Only used when <see cref="P:AntDesign.SegmentedItem`1.ChildContent"/> is not provided.
            </summary>
        </member>
        <member name="P:AntDesign.Select.LabelTemplateItem`2.Ref">
            <summary>
            Returned ElementRef reference for DOM element.
            </summary>
        </member>
        <member name="M:AntDesign.Select.Internal.SelectContent`2.ClearInput">
            <summary>
            clear input value after the dropdown is closed if AutoClearSearchValue=true
            </summary>
        </member>
        <member name="M:AntDesign.Select.Internal.SelectContent`2.DiscoverySearch">
            <summary>
            discovery search value after the dropdown is opened
            </summary>
        </member>
        <member name="M:AntDesign.Select.Internal.SelectContent`2.GetFirstItemMaxWidth">
            <summary>
            Any item may overflow. In case of first item, when there
            are any other elements inside SelectContent (prefix, suffix, clear btn, etc)
            default MaxWidth will force th SelectContent to grow. Changing the MaxWidth
            allows the overflowing item to fit in a single line.
            TODO: use relative units
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.Select.Internal.SelectContent`2._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="T:AntDesign.Select.Internal.SelectOptionItem`2">
            <summary>
            The data model for a SelectOption that is used internally.
            </summary>
            <typeparam name="TItemValue"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:AntDesign.Select.Internal.SelectOptionItem`2.SelectedTagRef">
            <summary>
            ElementRef that will be used by <see cref="T:AntDesign.Select.Internal.SelectContent`2"/> only
            for selected Mode=Multiple and MaxTagCount=Responsive
            </summary>
        </member>
        <member name="P:AntDesign.Select.Internal.SelectSuffixIcon`2.ShowSearchIcon">
            <summary>
            Whether show search input in single mode.
            </summary>
        </member>
        <member name="T:AntDesign.Select`2">
                <summary>
                <para>Select component to select value from options.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>A dropdown menu for displaying choices - an elegant alternative to the native HTML <c>select</c> element.</item>
                    <item>Utilizing <see cref="T:AntDesign.Radio`1"/> is recommended when there are fewer total options (less than 5).</item>
                </list>
                </summary>
        </member>
        <member name="P:AntDesign.Select`2.Bordered">
            <summary>
            Toggle the border style.
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Select`2.EnableVirtualization">
            <summary>
            Whether to enable virtualization feature or not, only works for .NET 5 and higher
            </summary>
            <default value="false"/>
        </member>
        <member name="F:AntDesign.Select`2._dataSourceItemShallowCopyMehtod">
            <summary>
            MethodInfo will contain attached MemberwiseClone protected
            method. Due to its protection level, it has to be accessed
            using reflection. It will be used during generation of
            the DataSource shallow copy (which is a new list of DataSource
            items with shallow copy of each item).
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DataSource">
            <summary>
            The datasource for this component.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DataSourceEqualityComparer">
            <summary>
            EqualityComparer that will be used during DataSource change
            detection. If no comparer set, default .Net is going to be
            used.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DefaultActiveFirstOption">
            <summary>
            Activates the first item that is not deactivated.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DisabledName">
            <summary>
            The name of the property to be used as a disabled indicator.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DropdownMatchSelectWidth">
            <summary>
            Will match dropdown width. If <c>true</c>, matches width of the widest item in the dropdown. If <c>string</c>, matches width of the string's value (ex: 250px)
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Select`2.DropdownMaxWidth">
            <summary>
            Will not allow dropdown width to grow above stated in here value (eg. "768px")
            </summary>
            <default value="auto"/>
        </member>
        <member name="P:AntDesign.Select`2.GroupName">
            <summary>
            The name of the property to be used as a group indicator.
            If the value is set, the entries are displayed in groups.
            Use additional <see cref="P:AntDesign.SelectBase`2.SortByGroup"/> and <see cref="P:AntDesign.SelectBase`2.SortByLabel"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.IgnoreItemChanges">
            <summary>
            Is used to increase the speed. If you expect changes to the label name,
            group name or disabled indicator, disable this property.
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Select`2.ItemTemplate">
            <summary>
            Is used to customize the item style.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.NotFoundContent">
            <summary>
            Specify content to show when no result matches.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnBlur">
            <summary>
            Called when blur.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnCreateCustomTag">
            <summary>
            Called when custom tag is created.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnDataSourceChanged">
            <summary>
            Called when the datasource object/reference changes.
            It does not trigger if a value inside the datasource changes.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnDropdownVisibleChange">
            <summary>
            Called when the dropdown visibility changes.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.OnSearch">
            <summary>
            Callback function that is fired when input changed.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.ShowArrowIcon">
            <summary>
            Whether to show the drop-down arrow
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Select`2.TokenSeparators">
            <summary>
            Define what characters will be treated as token separators for newly created tags.
            Useful when creating new tags using only keyboard.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.ValueChanged">
            <summary>
            Used for the two-way binding.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.Value">
            <summary>
            Get or set the selected value.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.LabelProperty">
            <summary>
            Specifies the label property in the option object. If use this property, should not use <see cref="!:LabelName"/>
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.ValueProperty">
            <summary>
            Specifies the value property in the option object. If use this property, should not use <see cref="!:ValueName"/>
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DisabledPredicate">
            <summary>
            Specifies predicate for disabled options
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.DefaultValue">
            <summary>
            Used when Mode =  default - The value is used during initialization and when pressing the Reset button within Forms.
            </summary>
        </member>
        <member name="P:AntDesign.Select`2.IsGroupingEnabled">
            <summary>
            Indicates if the GroupName is used. When this value is True, the SelectOptions will be rendered in group mode.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.ProcessSelectedSelectOptions">
            <summary>
            Used only when ChildElement SelectOptions is used.
            Will run this process if after initalization an item
            is added that is also marked as selected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Select`2.CreateDeleteSelectOptions">
            <summary>
            Create or delete SelectOption when the datasource changed
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.SetClassMap">
            <summary>
            Sets the CSS classes to change the visual style
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.AllOptionsHidden">
            <summary>
            Returns True if the parameter IsHidden is set to true for all entries in the SelectOptions list
            </summary>
            <returns>true if all items are set to IsHidden(true)</returns>
        </member>
        <member name="M:AntDesign.Select`2.SetDropdownStyleAsync">
            <summary>
            Gets the BoundingClientRect of Ref (JSInvoke) and set the min-width and width in px.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.ElementScrollIntoViewAsync(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Scrolls to the item via JavaScript.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Select`2.ResetValue">
            <summary>
            Called by the Form reset method
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.SetDefaultActiveFirstItemAsync">
            <summary>
            If DefaultActiveFirstItem is True, the first item which is not IsDisabled(True) is set as selected.
            If there is no item it falls back to the clear method.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.TrySetDefaultValueAsync">
            <summary>
            Method invoked by OnAfterRenderAsync if the Value is null(default) and
            DefaultValue has a value or DefaultActiveFirstItem is True.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.TrySetDefaultValuesAsync">
            <summary>
            Method invoked by OnAfterRenderAsync if the Value is null(default) and
            DefaultValues has a values or DefaultActiveFirstItem is True.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.SetInitialValuesAsync">
            <summary>
            Sets the initial values after initialization, the method should only called once.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.AppendLabelValue(System.String)">
            <summary>
            Append a label item in tag mode
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:AntDesign.Select`2.EvaluateValueChangedOutsideComponent(AntDesign.Select.Internal.SelectOptionItem{`0,`1},`0)">
            <summary>
            When bind-Value is changed outside of the component, then component
            selected items have to be reselected according to new value passed.
            </summary>
            <param name="optionItem">The option item that has been selected.</param>
            <param name="value">The value of the selected option item.</param>
        </member>
        <member name="M:AntDesign.Select`2.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Method is called via EventCallBack if the value of the Input element was changed by keyboard
            </summary>
            <param name="e">Contains the value of the Input element</param>
        </member>
        <member name="M:AntDesign.Select`2.OnKeyUpAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method is called via EventCallBack if the keyboard key is no longer pressed inside the Input element.
            </summary>
            <param name="e">Contains the key (combination) which was pressed inside the Input element</param>
        </member>
        <member name="M:AntDesign.Select`2.OnKeyDownAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method is called via EventCallback if a key is pressed inside Input element.
            The method is used to get the TAB event if the user press TAB to cycle trough elements.
            If a TAB is received, the overlay will be closed and the Input element blures.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.SetInputBlurAsync">
            <summary>
            Check if Focused property is true;  Set the Focused property to false, change the
            style and blures the Input element via DOM. It also invoke the OnBlur Action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Select`2.ScrollToFirstSelectedItemAsync">
            <summary>
            Search the first selected item, set IsActive to False for all other items and call the scrollIntoView function via JavaScript.
            The method is used to scroll to the first selected item after opening the overlay.
            </summary>
        </member>
        <member name="M:AntDesign.Select`2.OnRemoveSelectedAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
            <summary>
            Method is called via EventCallBack if the user clicked on the Close icon of a Tag.
            </summary>
        </member>
        <member name="F:AntDesign.SelectBase`2._maxTagCount">
            <summary>
                How long (number of characters) a tag will be.
                Only for Mode = "multiple" or Mode = "tags"
            </summary>
            <value>
                The maximum length of the tag text.
            </value>
        </member>
        <member name="P:AntDesign.SelectBase`2.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening)
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.AllowClear">
            <summary>
            Show clear button. Has no effect if <see cref="P:AntDesign.AntInputComponentBase`1.Value"/> type default
            is also in the list of <see cref="T:AntDesign.SelectOption`2"/>,
            unless used with <see cref="P:AntDesign.SelectBase`2.ValueOnClear"/>.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.AutoClearSearchValue">
            <summary>
            Whether the current search will be cleared on selecting an item.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Disabled">
            <summary>
            Whether the Select component is disabled.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Mode">
            <summary>
            Set mode of Select - default | multiple | tags
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.EnableSearch">
            <summary>
            Indicates whether the search function is active or not. Always true for mode tags.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SearchDebounceMilliseconds">
            <summary>
            Delays the processing of the search input event until the user has stopped
            typing for a predetermined amount of time. Default to 250ms.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Loading">
            <summary>
            Show loading indicator. You have to write the loading logic on your own.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Open">
            <summary>
            Controlled open state of dropdown.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OpenChanged">
            <summary>
            Callback function that is called when open state changes.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Placeholder">
            <summary>
            Placeholder of select.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnFocus">
            <summary>
            Called when focus.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.AutoFocus">
            <summary>
            Auto focus.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SortByGroup">
            <summary>
            The name of the property to be used as a group indicator.
            If the value is set, the entries are displayed in groups.
            Use additional SortByGroup and SortByLabel.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SortByLabel">
            <summary>
            Sort items by label value. None | Ascending | Descending
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.HideSelected">
            <summary>
            Hides the selected items when they are selected.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ValueChanged">
            <summary>
            Used for the two-way binding.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ValuesChanged">
            <summary>
            Used for the two-way binding.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SuffixIcon">
            <summary>
            The custom suffix icon.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.PrefixIcon">
            <summary>
            The custom prefix icon.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.AccessKey">
            <summary>
            The accesskey global attribute.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.DefaultValues">
            <summary>
            Used when Mode =  multiple | tags - The values are used during initialization and when pressing the Reset button within Forms.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnClearSelected">
            <summary>
            Called when the user clears the selection.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ChildContent">
            <summary>
            Child content to be rendered inside the <see cref="T:AntDesign.Cascader"/>.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Unbound">
            <summary>
            ChildElement with ElementReference set to avoid wrapping div.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnSelectedItemChanged">
            <summary>
            Called when the selected item changes.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnSelectedItemsChanged">
            <summary>
            Called when the selected items changes.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ActiveOption">
            <summary>
                Currently active (highlighted) option.
                It does not have to be equal to selected option.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Values">
            <summary>
            Get or set the selected values.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.CustomTagLabelToValue">
            <summary>
                Converts custom tag (a string) to TItemValue type.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.HasValue">
            <summary>
                Determines if SelectOptions has any selected items
            </summary>
            <returns>true if SelectOptions has any selected Items, otherwise false</returns>
        </member>
        <member name="P:AntDesign.SelectBase`2.IsSearchEnabled">
            <summary>
                Returns whether the user can input a pattern to search matched items
            </summary>
            <returns>true if search is enabled</returns>
        </member>
        <member name="P:AntDesign.SelectBase`2.SortedSelectOptionItems">
            <summary>
                Sorted list of SelectOptionItems
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.SelectOptions">
            <summary>
            Used for rendering select options manually.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.MaxTagTextLength">
            <summary>
            How long (number of characters) a tag will be.
            Only for Mode = "multiple" or Mode = "tags"
            </summary>
            <value>
            The maximum length of the tag text.
            </value>
        </member>
        <member name="P:AntDesign.SelectBase`2.LabelInValue">
            <summary>
            Whether to embed label in value, turn the format of value from TItemValue to string (JSON)
            e.g. { "value": TItemValue, "label": "Label value" }
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.MaxTagCount">
            <summary>
                Max tag count to show. responsive will cost render performance.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ValueOnClear">
            <summary>
            When Clear button is pressed, Value will be set to
            whatever is set in ValueOnClear
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ItemLabel">
            <summary>
            Specifies the label property in the option object. If use this property, should not use <see cref="P:AntDesign.SelectBase`2.LabelName"/>
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ItemValue">
            <summary>
            Specifies the value property in the option object. If use this property, should not use <see cref="P:AntDesign.SelectBase`2.ValueName"/>
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.LabelName">
            <summary>
            The name of the property to be used for the label.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ValueName">
            <summary>
            The name of the property to be used for the value.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.OnValuesChangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                The Method is called every time if the value of the @bind-Values was changed by the two-way binding.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.EvaluateValuesChangedOutsideComponent(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                When bind-Values is changed outside of the component, then component
                selected items have to be reselected according to new values passed.
                TODO: (Perf) Consider using hash to identify if the passed values are different from currently selected.
            </summary>
            <param name="values">The values that need to be selected.</param>
        </member>
        <member name="M:AntDesign.SelectBase`2.CreateSelectOptionItem(System.String,System.Boolean)">
            <summary>
                Creates the select option item. Mostly meant to create new tags, that is why IsAddedTag is hardcoded to true.
            </summary>
            <param name="label">Creation based on passed label</param>
            <param name="isActive">if set to <c>true</c> [is active].</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.SelectBase`2.InvokeOnSelectedItemChanged(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
            <summary>
                A separate method to invoke ValuesChanged and OnSelectedItemsChanged to reduce code duplicates.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.SetValueAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
            <summary>
                The method is called every time if the user select/de-select a item by mouse or keyboard.
                Don't change the IsSelected property outside of this function.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.OnInputClearClickAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
                Method is called via EventCallBack after the user clicked on the Clear icon inside the Input element.
                Set the IsSelected and IsHidden properties for all items to False. It updates the overlay position if
                the SelectMode is Tags or Multiple. Invoke the OnClearSelected Action. Set the Value(s) to default.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.SetInputFocusAsync">
            <summary>
                Set the Focused property to true, change the
                style and set the Focus on the Input element via DOM. It also invoke the OnFocus Action.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.UpdateOverlayPositionAsync">
            <summary>
                Inform the Overlay to update the position.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.CloseAsync">
            <summary>
                Close the overlay
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.SelectBase`2.ResetValue">
            <summary>
                Called by the Form reset method
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.ClearSelectedAsync">
            <summary>
                Clears the selectValue(s) property and send the null(default) value back through the two-way binding.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.UnhideSelectOptions">
            <summary>
            Unhide all select options, except any that are selected in the case that <see cref="P:AntDesign.SelectBase`2.HideSelected"/> is true
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnMouseEnter">
            <summary>
            Called when mouse enter.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.OnMouseLeave">
            <summary>
            Called when mouse leave.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.PopupContainerSelector">
            <summary>
            Use this to fix overlay problems e.g. #area
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.DropdownRender">
            <summary>
            Customize dropdown content. The context is the original content.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.LabelTemplate">
            <summary>
            Is used to customize the label style.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.MaxTagPlaceholder">
            <summary>
            Placeholder for hidden tags. If used with ResponsiveTag.Responsive, implement your own handling logic.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.ShowSearchIcon">
            <summary>
            Whether show search input in single mode.
            </summary>
        </member>
        <member name="P:AntDesign.SelectBase`2.Placement">
            <summary>
            Placement of the overlay. Defaults to <see cref="F:AntDesign.Placement.BottomLeft"/>.
            </summary>
            <default value="Placement.BottomLeft" />
        </member>
        <member name="P:AntDesign.SelectBase`2.LastValueBeforeReset">
            <summary>
            When newly set Value is not found in SelectOptionItems, it is reset to
            default. This property holds the value before reset. It may be needed
            to be reaplied (for example when new Value is set at the same time
            as new SelectOption is added, but Value in the component is set
            before new SelectOptionItem has been created).
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.OnInputFocusAsync(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Method is called via EventCallBack if the Input element get the focus
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.OnInputBlurAsync(Microsoft.AspNetCore.Components.Web.FocusEventArgs)">
            <summary>
            Method is called via EventCallBack if the Input element loses the focus
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.SetInputBlurAsync">
            <summary>
            Check if Focused property is true;  Set the Focused property to false, change the
            style and blures the Input element via DOM. It also invoke the OnBlur Action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.SelectBase`2.OnRemoveSelectedAsync(AntDesign.Select.Internal.SelectOptionItem{`0,`1})">
            <summary>
            Method is called via EventCallBack if the user clicked on the Close icon of a Tag.
            </summary>
        </member>
        <member name="M:AntDesign.SelectBase`2.FocusIfInSearch">
            <summary>
            used to focus again the input box if it still during the search process 
            but lost the focus by clicking on the dropdown or closing tags.
            </summary>
        </member>
        <member name="P:AntDesign.SelectOption`2.Disabled">
            <summary>
            Disable this option
            The parameter should only be used if the SelectOption was created directly.
            </summary>
        </member>
        <member name="P:AntDesign.SelectOption`2.Label">
            <summary>
            Label of Select after selecting this Option
            The parameter should only be used if the SelectOption was created directly.
            </summary>
        </member>
        <member name="P:AntDesign.SelectOption`2.Value">
            <summary>
            Value of Select after selecting this Option
            The parameter should only be used if the SelectOption was created directly.
            </summary>
        </member>
        <member name="F:AntDesign.SelectOption`2._itemSet">
            <summary>
            Item of the SelectOption
            The parameter should only be used if the SelectOption was created directly.
            </summary>
        </member>
        <member name="T:AntDesign.Skeleton">
                <summary>
                <para>Provide a placeholder while you wait for content to load, or to visualise content that doesn't exist yet.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When resource need long time loading, like low network speed.</item>
                    <item>The component contains much information, such as List or Card.</item>
                    <item>Only works when loading data for the first time.</item>
                    <item>Could be replaced by Spin in any situation, but can provide a better user experience.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.SkeletonElement"/>
        </member>
        <member name="P:AntDesign.Skeleton.Active">
            <summary>
            Display active animation or not
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.Loading">
            <summary>
            Display skeleton when true
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.Title">
            <summary>
            Show title placeholder
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.TitleWidth">
            <summary>
            Width of the title placeholder
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.Avatar">
            <summary>
            Show avatar in placeholder
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.AvatarSize">
            <summary>
            Avatar size
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.AvatarShape">
            <summary>
            Avatar shape
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.Paragraph">
            <summary>
            Show paragraph skeleton
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.ParagraphRows">
            <summary>
            Number of rows for paragraph skeleton
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.ParagraphWidth">
            <summary>
            Width of paragraph skeleton
            </summary>
        </member>
        <member name="P:AntDesign.Skeleton.ChildContent">
            <summary>
            Content to display when skeleton is not active
            </summary>
        </member>
        <member name="P:AntDesign.SkeletonElement.Active">
            <summary>
            If the skeleton is active
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.SkeletonElement.Type">
            <summary>
            Type of the element. Possible values: input, avatar, button
            </summary>
        </member>
        <member name="P:AntDesign.SkeletonElement.Size">
            <summary>
            Size of element. Possible values: large, small, default. If type is avatar then an integer can be provided as well.
            </summary>
        </member>
        <member name="P:AntDesign.SkeletonElement.Shape">
            <summary>
            Shape of the avatar. Not used for input type.
            </summary>
            <default value="SkeletonElementShape.Default" />
        </member>
        <member name="T:AntDesign.Slider`1">
                <summary>
                <para>A Slider component for displaying current value and intervals in range.</para>
            
                <h2>When To Use</h2>
            
                <para>To input a value in a range.</para>
                </summary>
                <seealso cref="T:AntDesign.SliderMark"/>
        </member>
        <member name="P:AntDesign.Slider`1.DefaultValue">
            <summary>
            The default value of slider. When <see cref="P:AntDesign.Slider`1.Range"/> is false, use number, otherwise, use [number, number]
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Disabled">
            <summary>
            If true, the slider will not be interactable
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Dots">
            <summary>
            Currently not implemented. 
            Whether the thumb can drag over ticks only
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Included">
            <summary>
            Make effect when <see cref="P:AntDesign.Slider`1.Marks"/> not null, true means containment and false means coordinative
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Slider`1.Marks">
            <summary>
            Tick mark of Slider
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Max">
            <summary>
            The maximum value the slider can slide to
            </summary>
            <default value="100"/>
        </member>
        <member name="P:AntDesign.Slider`1.Min">
            <summary>
            The minimum value the slider can slide to
            </summary>
            <default value="0"/>
        </member>
        <member name="F:AntDesign.Slider`1._range">
            <summary>
            dual thumb mode
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Range">
            <summary>
            If the slider is a range slider or not. Determined by type of <c>TValue</c>
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Reverse">
            <summary>
            Order and direction of numbers and min/max. 
            <para>When true, Max is on the left and Min is on the right</para>
            <para>When false, Min is on the left and Max is on the right</para>
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Slider`1.Step">
            <summary>
            The granularity the slider can step through values. Must greater than 0, and be divided by (<see cref="P:AntDesign.Slider`1.Max"/> - <see cref="P:AntDesign.Slider`1.Min"/>). When <see cref="P:AntDesign.Slider`1.Marks"/> is not null, <see cref="P:AntDesign.Slider`1.Step"/> can be null.
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Vertical">
            <summary>
            If true, the slider will be vertical. If false, it will be horizontal.
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Slider`1.OnAfterChange">
            <summary>
            Callback executed when onmouseup is fired.
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.OnChange">
            <summary>
            Callback executed when the user changes the slider's value.
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.HasTooltip">
            <summary>
            Whether markers should have tooltips or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Slider`1.TipFormatter">
            <summary>
            Method to get display value for tooltip. Will pass slider value and get string for display back
            </summary>
            <default value="(value) => value.ToString()"/>
        </member>
        <member name="P:AntDesign.Slider`1.TooltipPlacement">
            <summary>
            Set Tooltip display position. See <see cref="T:AntDesign.Tooltip"/> for more information
            </summary>
            <default value="Right for vertical. Top for horizontal"/>
        </member>
        <member name="P:AntDesign.Slider`1.TooltipVisible">
            <summary>
            If true Tooltip will always show
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.GetTooltipPopupContainer">
            <summary>
            Not currently implemented. The DOM container of the Tooltip
            </summary>
        </member>
        <member name="P:AntDesign.Slider`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="P:AntDesign.SliderMark.Key">
            <summary>
            Number for mark to be on. Must be in the range of the Min and Max of the containing Slider
            </summary>
        </member>
        <member name="P:AntDesign.SliderMark.Value">
            <summary>
            Display content for the mark
            </summary>
        </member>
        <member name="P:AntDesign.SliderMark.Style">
            <summary>
            Style for the mark
            </summary>
        </member>
        <member name="T:AntDesign.Space">
                <summary>
                <para>Set components spacing.</para>
            
                <h2>When To Use</h2>
            
                <para>Avoid components clinging together and set a unified space.</para>
                </summary>
                <seealso cref="T:AntDesign.SpaceItem"/>
        </member>
        <member name="P:AntDesign.Space.Align">
            <summary>
            Alignment of items - start | end | center | baseline
            </summary>
        </member>
        <member name="P:AntDesign.Space.Direction">
            <summary>
            Item flow direction
            </summary>
            <default value="SpaceDirection.Horizontal" />
        </member>
        <member name="P:AntDesign.Space.Size">
            <summary>
            Size of space between items
            </summary>
            <default value="small" />
        </member>
        <member name="P:AntDesign.Space.Wrap">
            <summary>
            Wrap items to multiple lines or not. Ignored when Direction is vertical.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Space.Split">
            <summary>
            Content displayed in the space between items
            </summary>
        </member>
        <member name="P:AntDesign.Space.ChildContent">
            <summary>
            Content of space - should contain SpaceItem elements
            </summary>
        </member>
        <member name="T:AntDesign.SpaceItem">
            <summary>
            <see cref="T:AntDesign.Space"/> item, use to set item style
            </summary>
        </member>
        <member name="P:AntDesign.SpaceItem.ChildContent">
            <summary>
            Child content
            </summary>
        </member>
        <member name="T:AntDesign.Spin">
                <summary>
                    <para>A spinner for displaying loading state of a page or a section.</para>
            
                    <h2>When To Use</h2>
            
                    <para>When part of the page is waiting for asynchronous data or during a rendering process, an appropriate loading animation can effectively alleviate users' inquietude.</para>
                </summary>
        </member>
        <member name="P:AntDesign.Spin.Size">
            <summary>
            Size of the spinner. Possible values: small, default, large
            </summary>
            <default value="SpinSize.Default" />
        </member>
        <member name="P:AntDesign.Spin.Tip">
            <summary>
            Customize description content when Spin has children
            </summary>
        </member>
        <member name="P:AntDesign.Spin.Delay">
            <summary>
            Specifies a delay in milliseconds for loading state (prevent flush)
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Spin.Spinning">
            <summary>
            Whether spin is active
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Spin.WrapperClassName">
            <summary>
            Class name for the wrapper
            </summary>
        </member>
        <member name="P:AntDesign.Spin.Indicator">
            <summary>
            Custom display for the spinning indicator
            </summary>
        </member>
        <member name="P:AntDesign.Spin.ChildContent">
            <summary>
            Content the spin will indicate loading for
            </summary>
        </member>
        <member name="P:AntDesign.CountDown.Format">
            <summary>
            Format of the time
            </summary>
            <default value="hh:mm:ss"/>
        </member>
        <member name="P:AntDesign.CountDown.Value">
            <summary>
            The value of the countdown
            </summary>
        </member>
        <member name="P:AntDesign.CountDown.OnFinish">
            <summary>
            Callback executed when the countdown runs out
            </summary>
        </member>
        <member name="P:AntDesign.CountDown.RefreshInterval">
            <summary>
            Interval, in milliseconds, to update the UI on
            </summary>
            <default value="100ms" />
        </member>
        <member name="M:AntDesign.CountDown.Reset">
            <summary>
            Reset the countdown
            </summary>
        </member>
        <member name="T:AntDesign.Statistic`1">
                <summary>
                <para>Display statistic number.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When want to highlight some data.</item>
                    <item>When want to display statistic data with description.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.CountDown"/>
                <inheritdoc/>
        </member>
        <member name="P:AntDesign.Statistic`1.DecimalSeparator">
            <summary>
            Decimal separator for number formatting
            </summary>
            <default value="." />
        </member>
        <member name="P:AntDesign.Statistic`1.GroupSeparator">
            <summary>
            Group separator for number formatting
            </summary>
            <default value="," />
        </member>
        <member name="P:AntDesign.Statistic`1.Precision">
            <summary>
            Number of decimal places for rounding
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Statistic`1.CultureInfo">
            <summary>
            Specifies the culture to use for formatting the number.
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.Prefix">
            <summary>
            Prefix text for before the displayed value
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.PrefixTemplate">
            <summary>
            Prefix content for before the displayed value
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.Suffix">
            <summary>
            Suffix string for after the displayed value
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.SuffixTemplate">
            <summary>
            Suffix content for after the displayed value
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.Title">
            <summary>
            Title string for the value
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.TitleTemplate">
            <summary>
            Title content for the value
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.Value">
            <summary>
            Value for displaying
            </summary>
        </member>
        <member name="P:AntDesign.StatisticComponentBase`1.ValueStyle">
            <summary>
            Style for the value display
            </summary>
        </member>
        <member name="T:AntDesign.Step">
            <summary>
            A step in a Steps component
            </summary>
        </member>
        <member name="P:AntDesign.Step.Icon">
            <summary>
            Icon of the step
            </summary>
        </member>
        <member name="P:AntDesign.Step.Status">
            <summary>
            To specify the status. It will be automatically set by current of Steps if not configured. Possible Values: wait, process, finish, error
            </summary>
        </member>
        <member name="P:AntDesign.Step.Title">
            <summary>
            Title of the step
            </summary>
        </member>
        <member name="P:AntDesign.Step.TitleTemplate">
            <summary>
            Title of the step
            </summary>
        </member>
        <member name="P:AntDesign.Step.Subtitle">
            <summary>
            Subtitle of the step
            </summary>
        </member>
        <member name="P:AntDesign.Step.SubtitleTemplate">
            <summary>
            Subtitle of the step
            </summary>
        </member>
        <member name="P:AntDesign.Step.Description">
            <summary>
            Description of the step
            </summary>
            <default value="string.Empty" />
        </member>
        <member name="P:AntDesign.Step.DescriptionTemplate">
            <summary>
            Description of the step
            </summary>
        </member>
        <member name="P:AntDesign.Step.OnClick">
            <summary>
            Callback executed when clicking step
            </summary>
        </member>
        <member name="P:AntDesign.Step.Disabled">
            <summary>
            Disable click
            </summary>
        </member>
        <member name="T:AntDesign.Steps">
                <summary>
                <para>Navigation bar that guides users through the steps of a task.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When a given task is complicated or has a certain sequence in the series of subtasks, we can decompose it into several steps to make things easier.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.Step"/>
        </member>
        <member name="P:AntDesign.Steps.Current">
            <summary>
            Current step index, zero based
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Steps.Percent">
            <summary>
            Percent display for current step
            </summary>
        </member>
        <member name="P:AntDesign.Steps.ProgressDot">
            <summary>
            Custom rendering for progress dot. Will also set ShowProgressDot to true if set.
            </summary>
        </member>
        <member name="P:AntDesign.Steps.ShowProgressDot">
            <summary>
            Show progress dot as opposed to the title, description, icon, etc
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Steps.Direction">
            <summary>
            Direction of the step bar
            </summary>
            <default value="StepsDirection.Horizontal" />
        </member>
        <member name="P:AntDesign.Steps.LabelPlacement">
            <summary>
            Place title and description horizontal or vertical
            </summary>
            <default value="StepsLabelPlacement.Horizontal" />
        </member>
        <member name="P:AntDesign.Steps.Type">
            <summary>
            Type of steps. Possible Values: default, navigation
            </summary>
            <default value="StepsType.Default" />
        </member>
        <member name="P:AntDesign.Steps.Size">
            <summary>
            Size of steps. Possible Values: default, small
            </summary>
            <default value="StepsSize.Default" />
        </member>
        <member name="P:AntDesign.Steps.StartIndex">
            <summary>
            Starting step index
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Steps.Status">
            <summary>
            Status of the current step. Possible Values: wait, process, finish, error
            </summary>
            <default value="process" />
        </member>
        <member name="P:AntDesign.Steps.ChildContent">
            <summary>
            Child content should contain Step elements
            </summary>
        </member>
        <member name="P:AntDesign.Steps.OnChange">
            <summary>
            Callback executed when step changes. Received the index of the step changing to
            </summary>
        </member>
        <member name="T:AntDesign.Switch">
                <summary>
                <para>Switching Selector.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>If you need to represent the switching between two states or on-off state.</item>
                    <item>The difference between `Switch` and `Checkbox` is that Switch will trigger a state change directly when you toggle it, while Checkbox is generally used for state marking, which should work in conjunction with submit operation.</item>
                </list>
                </summary>
        </member>
        <member name="P:AntDesign.Switch.Loading">
            <summary>
            Whether switch is loading or not. Will display spinner on handle when true.
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Switch.CheckedChildren">
            <summary>
            String displayed inside switch when checked is true
            </summary>
        </member>
        <member name="P:AntDesign.Switch.CheckedChildrenTemplate">
            <summary>
            Content displayed inside switch when checked is true. Takes priority over <see cref="P:AntDesign.Switch.CheckedChildren"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Switch.Control">
            <summary>
            When true, the status of Switch no longer automatically changes the data based on the click event.
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Switch.OnClick">
            <summary>
            Callback executed when the switch is clicked. When used in combination with <see cref="P:AntDesign.Switch.Control"/> it allows manually controlling the Switch.
            </summary>
        </member>
        <member name="P:AntDesign.Switch.UnCheckedChildren">
            <summary>
            String displayed inside switch when checked is false.
            </summary>
        </member>
        <member name="P:AntDesign.Switch.UnCheckedChildrenTemplate">
            <summary>
            Content displayed inside switch when checked is false. Takes priority over <see cref="P:AntDesign.Switch.UnCheckedChildren"/>.
            </summary>
        </member>
        <member name="P:AntDesign.ActionColumn.CellRender">
            <summary>
            Column content for a row. Takes priority over <see cref="P:AntDesign.ColumnBase.ChildContent"/>
            </summary>
        </member>
        <member name="T:AntDesign.Column`1">
            <summary>
            The column definition, can be used to define a column for a <see cref="T:AntDesign.Table`1"/>.
            <para>
            We recommend using <see cref="T:AntDesign.PropertyColumn`2"/> instead.
            </para>
            </summary>
            <typeparam name="TData">
            The type of a property of the TItem objec. 
            </typeparam>
        </member>
        <member name="P:AntDesign.Column`1.FieldExpression">
            <summary>
            Expression to get the data for the field
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.FilterDropdown">
            <summary>
            Field this column represents
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.Field">
            <summary>
            Use @bind-Field to bind to a property of TItem, we recommend using <see cref="T:AntDesign.PropertyColumn`2"/> instead
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.FieldChanged">
            <summary>
            Only used for @bind-Field and get the expression, no other purpose
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.Title">
            <summary>
            Title of the column. Uses the following order of priority: <see cref="P:AntDesign.ColumnBase.Title"/>, <see cref="P:AntDesign.Column`1.DisplayName"/>, then <see cref="P:AntDesign.Column`1.FieldName"/>
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.DataIndex">
            <summary>
            The corresponding path of the column data in the data item, support for querying the nested path through the array
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.Format">
            <summary>
            Column data serialization rules, such as DateTime.ToString("XXX")
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.Sortable">
            <summary>
            Whether to allow sorting or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Column`1.SorterCompare">
            <summary>
            Comparison function for custom sort
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.SorterMultiple">
            <summary>
            Number of similtaneous sorts allowed
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.ShowSorterTooltip">
            <summary>
            Whether to show tooltip when hovering over sort button or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Column`1.SortDirections">
            <summary>
            Allowable sort directions
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.DefaultSortOrder">
            <summary>
            Default sort direction
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.OnCell">
            <summary>
            Set cell attributes
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.OnHeaderCell">
            <summary>
            Set header cell attributes
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.Filterable">
            <summary>
            Whether the column is filterable or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Column`1.Grouping">
            <summary>
            Whether the column is used for grouping or not
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.GroupBy">
            <summary>
            Specifies the grouping function for the column
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.Filters">
            <summary>
            Filter options for the column
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.DefaultFilters">
            <summary>
            Whether to allow multiple filters or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Column`1.FilterMultiple">
            <summary>
            Whether to allow multiple filters or not
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.FieldFilterType">
            <summary>
            Filter type for the column
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.OnFilter">
            <summary>
            Function that determines if the row is displayed when filtered
            <para>
            Parameter 1: The value of the filter item
            </para>
            <para>
            Parameter 2: The value of the column
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.Filtered">
            <summary>
            Whether the dataSource is filtered. Filter icon will be actived when it is true.
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.CellRender">
            <summary>
            Set the column content to be displayed in the table
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.DisplayName">
            <summary>
            Display name for the column
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.FieldName">
            <summary>
            Field name for the column
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.SortModel">
            <summary>
            Sort model of the column
            </summary>
        </member>
        <member name="P:AntDesign.Column`1.FilterModel">
            <summary>
            Filter model of the column
            </summary>
        </member>
        <member name="P:AntDesign.ColumnBase.Title">
            <summary>
            Title for column header
            </summary>
        </member>
        <member name="P:AntDesign.ColumnBase.TitleTemplate">
            <summary>
            Title content for column header
            </summary>
        </member>
        <member name="P:AntDesign.ColumnBase.Width">
            <summary>
            Width for column
            </summary>
        </member>
        <member name="P:AntDesign.ColumnBase.HeaderStyle">
            <summary>
            Style for the header cell
            </summary>
        </member>
        <member name="P:AntDesign.ColumnBase.RowSpan">
            <summary>
            Row span
            </summary>
            <default value="1" />
        </member>
        <member name="P:AntDesign.ColumnBase.ColSpan">
            <summary>
            Column span
            </summary>
            <default value="1" />
        </member>
        <member name="P:AntDesign.ColumnBase.HeaderColSpan">
            <summary>
            Header column span
            </summary>
            <default value="1" />
        </member>
        <member name="P:AntDesign.ColumnBase.Fixed">
            <summary>
            Fix a column
            </summary>
        </member>
        <member name="P:AntDesign.ColumnBase.ChildContent">
            <summary>
            Content of the column
            </summary>
        </member>
        <member name="P:AntDesign.ColumnBase.Ellipsis">
            <summary>
            Cut off header title with ellipsis when set to true
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.ColumnBase.Hidden">
            <summary>
            If the column is hidden or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.ColumnBase.Align">
            <summary>
            Alignment for column contents
            </summary>
        </member>
        <member name="P:AntDesign.ColumnBase.ColIndex">
            <summary>
            Index of this column in the table
            </summary>
        </member>
        <member name="P:AntDesign.GenerateColumns`1.Range">
            <summary>
            Specific the range of the columns that need to display.
            </summary>
        </member>
        <member name="P:AntDesign.GenerateColumns`1.HideColumnsByName">
            <summary>
            Hide the columns by the property name.
            </summary>
        </member>
        <member name="P:AntDesign.GenerateColumns`1.Definitions">
            <summary>
            An Action to defined each column
            </summary>
            <param name="propertyName">The name of the property binding the column. </param>
            <param name="column">The column instance, you need to explicitly cast to a concrete Column type. </param>
        </member>
        <member name="P:AntDesign.GenerateColumns`1.StartColumnIndex">
            <summary>
            Specify start column index, use it if auto indexes disabled and there are columns before generated ones
            </summary>
        </member>
        <member name="T:AntDesign.Table.Internal.TItemProxy">
            <summary>
            This class is used to create a instance of interface by DispatchProxy
            </summary>
        </member>
        <member name="P:AntDesign.PropertyColumn`2.Property">
            <summary>
            Defines the value to be displayed in this column's cells.
            </summary>
        </member>
        <member name="P:AntDesign.Selection.Type">
            <summary>
            The type of input to use for the selection column (checkbox or radio)
            </summary>
            <default value="SelectionType.Checkbox"/>
        </member>
        <member name="P:AntDesign.Selection.Disabled">
            <summary>
            Whether the selection column is disabled.
            </summary>
        </member>
        <member name="P:AntDesign.Selection.Key">
            <summary>
            No use now.
            </summary>
        </member>
        <member name="P:AntDesign.Selection.CheckStrictly">
            <summary>
            Check table row precisely; parent row and children rows are not associated
            </summary>
        </member>
        <member name="P:AntDesign.Selection.CellRender">
            <summary>
            Customize the content of the cell.
            </summary>
        </member>
        <member name="T:AntDesign.Table`1">
                <summary>
                <para>Displays rows of data.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>To display a collection of structured data.</item>
                    <item>To sort, search, paginate, filter data.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.PropertyColumn`2"/>
                <seealso cref="T:AntDesign.ActionColumn"/>
                <seealso cref="T:AntDesign.Selection"/>
                <seealso cref="T:AntDesign.TableModels.QueryModel`1" />
        </member>
        <member name="P:AntDesign.Table`1.AutoColIndexes">
            <summary>
            Enable or disable automatic column index assignments.
            Should be disabled if complex column structure is used and index assigned via ColIndex parameter.
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.RerenderStrategy">
            <summary>
            Render mode of table. See <see cref="T:AntDesign.RerenderStrategy"/> documentation for details.
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.DataSource">
            <summary>
            Data to display in table
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.ChildContent">
            <summary>
            Content of the table. Typically will contain <see cref="T:AntDesign.PropertyColumn`2"/> and <see cref="T:AntDesign.ActionColumn"/> elements.
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.GroupTitleTemplate">
            <summary>
            Template for the header of grouping blocks
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.GroupFooterTemplate">
            <summary>
            Template for the footer of grouping blocks
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.RowTemplate">
            <summary>
            Template for Rows
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.ColumnDefinitions">
            <summary>
            Template for column definitions
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.HeaderTemplate">
            <summary>
            Template for the header
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.ExpandTemplate">
            <summary>
            Template use for what to display when a row is expanded
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.DefaultExpandAllRows">
            <summary>
            Initially, whether to expand all rows
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.DefaultExpandMaxLevel">
            <summary>
            The max expand level when use DefaultExpandAllRows.
            This attribute is used to avoid endless loop when the tree records have circular reference.
            The default value is 4.
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.RowExpandable">
            <summary>
            Function to determine if a specific row is expandable
            </summary>
            <default value="true for any rows" />
        </member>
        <member name="P:AntDesign.Table`1.TreeChildren">
            <summary>
            Children tree items
            </summary>
            <default value="Enumerable.Empty&lt;TItem&gt;()" />
        </member>
        <member name="P:AntDesign.Table`1.OnChange">
            <summary>
            Callback executed when table initialized, paging, sorting, and filtering changes.
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.OnRow">
            <summary>
            Set row attributes
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.OnHeaderRow">
            <summary>
            Set header row attributes
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.Loading">
            <summary>
            Is the table loading
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Table`1.Title">
            <summary>
            Table title text
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.TitleTemplate">
            <summary>
            Table title content
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.Footer">
            <summary>
            Footer text
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.FooterTemplate">
            <summary>
            Footer content
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.Size">
            <summary>
            Table size
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.Locale">
            <summary>
            Default copywriting settings, currently including sorting, filtering, and empty data copywriting
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.Bordered">
            <summary>
            Bordered table or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Table`1.Striped">
            <summary>
            Striped table or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Table`1.ScrollX">
            <summary>
            Set horizontal scrolling, can also be used to specify the width of the scrolling area, can be set as pixel value, percentage
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.ScrollY">
            <summary>
            Set the vertical scroll, can also be used to specify the height of the scrolling area, can be set as a pixel value
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.AutoHeight">
            <summary>
            Automatically raise the table height to full screen display
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.ScrollBarWidth">
            <summary>
            Scroll bar width
            </summary>
            <default value="17px" />
        </member>
        <member name="P:AntDesign.Table`1.IndentSize">
            <summary>
            When displaying tree data, the width of each level of indentation, in px
            </summary>
            <default value="15" />
        </member>
        <member name="P:AntDesign.Table`1.ExpandIconColumnIndex">
            <summary>
            Index of the column where the custom expand icon is located
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Table`1.RowClassName">
            <summary>
            Function to determine the class name of a specific row
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.ExpandedRowClassName">
            <summary>
            Function to determine the class name of a specific row when expanded
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.OnExpand">
            <summary>
            Callback executed when row expands
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.SortDirections">
            <summary>
            Supported sorting methods, covering sortDirections in Table
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.TableLayout">
            <summary>
            The table-layout attribute of the table element, set to fixed means that the content will not affect the layout of the column
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.OnRowClick">
            <summary>
            Callback executed when a row is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.RemoteDataSource">
            <summary>
            If the datasource is remote or not for more complex use cases
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Table`1.Responsive">
            <summary>
            When set to true and the screen width is less than 960px, the table would switch to small-screen mode.
            In small-screen mode, only certain features are currently supported, and mis-styling will occur in tables with some features such as group, expanded columns, tree data, summary cell, etc.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Table`1.EmptyTemplate">
            <summary>
            Customize the empty template when the table is empty
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.RowKey">
            <summary>
            Specify the identifier of each row
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.Resizable">
            <summary>
            Enable resizable column
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.FieldFilterTypeResolver">
            <summary>
            Set the field filter type resolver
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.EnableVirtualization">
            <summary>
            Whether to enable virtualization feature or not, only works for .NET 5 and higher
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.AntDesign#ITable#OnColumnInitialized">
            <summary>
            This method will be called when all columns have been set
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.ReloadData">
            <summary>
            Reload the data for the table, go to page 1
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.ReloadData(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Reload the data for the table and go to specific page at page size
            </summary>
            <param name="pageIndex">Page to load after reload. Defaults to 1.</param>
            <param name="pageSize">Page size to use after reload. Defaults to the current value of <see cref="P:AntDesign.Table`1.PageSize"/></param>
        </member>
        <member name="M:AntDesign.Table`1.ReloadData(AntDesign.TableModels.QueryModel)">
            <summary>
            Reload the table's data from the provided query model
            </summary>
            <param name="queryModel"></param>
        </member>
        <member name="M:AntDesign.Table`1.ResetData">
            <summary>
            Reset the table to its default view. Goes to page 1, default page size and clears sorts and filters.
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.GetQueryModel">
            <summary>
            Get the query model for the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Table`1.InvokeDataSourceHasChanged">
            <summary>
            Call this method after data source has changed to refresh the state of the table.
            </summary>
            Make the method protected to allow derived classes to call it.
        </member>
        <member name="F:AntDesign.Table`1._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.RebuildColumns(System.Boolean)">
            <summary>
            For each column change, it needs to rerender four times
            <br/> 1. re-render once for recognize there is any column changed after calling at <see cref="M:AntDesign.Table`1.OnParametersSet"/>, trigger render the empty ChildContent.
            <br/> 2. re-render once for empty ChildContent after calling at <see cref="M:AntDesign.ITable.RebuildColumns(System.Boolean)" />, then trigger rendering for rebuild the origin content. 
            <br/> 3. re-render for rebuilding columns after calling at <see cref="M:AntDesign.Table`1.OnAfterRenderAsync(System.Boolean)"/>, and then trigger rendering for load data after the columns are ready.
            <br/> 4. re-render for reload data after calling at <see cref="M:AntDesign.Table`1.OnColumnInitialized" />
            </summary>
            <param name="add">Whether a column is added/removed</param>
            <remarks>
            lifecycle process: columns was changed -> render#1(true) -> column add/dispose -> call rebuild(call render#2) -> render#2(true) -> OnAfterRenderAsync#2 (call render#3) -> render#3(true)
            -> OnColumnInitialized call render#4 -> OnAfterRenderAsync#4 -> OnAfterRenderAsync#3 -> OnAfterRenderAsync#1 (the last 2 steps are duplicated and useless)
            </remarks>
            <returns>Whether to start rebuilding</returns>
        </member>
        <member name="P:AntDesign.Table`1.HidePagination">
            <summary>
            Whether to hide pagination or not.
            <para> Note: When the HidePagination is set to true, PageSize should not be set, so all the data will be displayed. Otherwise, if PageSize is set, the number of rows per page will be displayed according to PageSize. This requires the user to handle the logic of the pagging themselves. </para>
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.PaginationPosition">
            <summary>
            Position of the pagination. Valid values: topLeft, topCenter, topRight, bottomLeft, bottomCenter, bottomRight
            </summary>
            <default value="bottomRight"/>
        </member>
        <member name="P:AntDesign.Table`1.PaginationTemplate">
            <summary>
            Custom rendering for pagination
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.Total">
            <summary>
            Total records
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.TotalChanged">
            <summary>
            Callback executed when total records changes
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.PageIndex">
            <summary>
            Currently visible page. The first page is 1. If it is set to less than 1, the <see cref="P:AntDesign.Table`1.OnChange"/> callback won't be invoked.
            </summary>
            <default value="1"/>
        </member>
        <member name="P:AntDesign.Table`1.PageIndexChanged">
            <summary>
            Callback executed when currently visible page changes
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.PageSize">
            <summary>
            Number of records per page
            </summary>
            <default value="10"/>
        </member>
        <member name="P:AntDesign.Table`1.PageSizeChanged">
            <summary>
            Callback executed when page size changes
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.OnPageIndexChange">
            <inheritdoc cref="P:AntDesign.Table`1.PageIndexChanged"/>
        </member>
        <member name="P:AntDesign.Table`1.OnPageSizeChange">
            <inheritdoc cref="P:AntDesign.Table`1.PageSizeChanged"/>
        </member>
        <member name="P:AntDesign.Table`1.SelectedRows">
            <summary>
            Rows that are selected across pages
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.SelectedRowsChanged">
            <summary>
            Callback executed when the selected rows change
            </summary>
        </member>
        <member name="P:AntDesign.Table`1.OnSelectAll">
            <summary>
            Callback executed when the SelectAll button is clicked. <br/>
            This is useful for selecting all rows when the table is virtualized or not only shown on current page.
            <para>
            The argument is true when selecting all rows, false when unselecting all rows.
            </para>
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.SelectAll">
            <summary>
            Select all rows of current page
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.UnselectAll">
            <summary>
            Unselect all rows of current page
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Please use <see cref="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.IEnumerable{`0})"/> instead if possible,
            as this method won't correctly select items from invisible rows when virtualization is enabled.
            </summary>
        </member>
        <member name="M:AntDesign.Table`1.SetSelection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Set all selected items
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:AntDesign.Table`1.SetSelection(`0)">
            <summary>
            Select one item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AntDesign.Table`1.ClearSelectedRows">
            <summary>
            clear current pages' selected rows
            </summary>
        </member>
        <member name="T:AntDesign.TableFilter">
            <summary>
            Filter item definition
            </summary>
        </member>
        <member name="P:AntDesign.TableFilter.Text">
            <summary>
            The display text of the filter item
            </summary>
        </member>
        <member name="P:AntDesign.TableFilter.Value">
            <summary>
            The value of the filter item
            </summary>
        </member>
        <member name="P:AntDesign.TableFilter.Selected">
            <summary>
            Whether the filter item is selected
            </summary>
        </member>
        <member name="P:AntDesign.TableFilter.FilterCompareOperator">
            <summary>
            The compare operators supported by the filter item
            </summary>
        </member>
        <member name="P:AntDesign.TableFilter.FilterCondition">
            <summary>
            The condition of the filter item
            </summary>
        </member>
        <member name="M:AntDesign.TableModels.QueryModel`1.GetFilterExpression">
            <summary>
            Get current filters' expression for ORMs like Entity Framework.
            And you can get the filtered data by executing the expression with the data source.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.TableModels.RowData`1">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.TableModels.RowData`1.Children">
            <summary>
            hold the state of children rows
            </summary>
        </member>
        <member name="T:AntDesign.TableModels.RowData">
            <summary>
            Holds all data that is specific to a row, e.g. the row being expanded or not.
            See <see cref="P:AntDesign.TableModels.RowData.TableDataItem"/> for all properties that are specific to an item instead of a row.
            </summary>
        </member>
        <member name="T:AntDesign.TableModels.TableDataItem`1">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.TableModels.TableDataItem">
            <summary>
            Holds the properties of an item within a table.
            Is unique for each item in a table (e.g. even if the item is displayed more than once,
            there will only be one <see cref="T:AntDesign.TableModels.TableDataItem"/>).
            Therefore, all rows with the same item will be selected/deselected all at once.
            <br/>
            For row specific data, see <see cref="T:AntDesign.TableModels.RowData"/>.
            </summary>
        </member>
        <member name="M:AntDesign.TableModels.SortModel`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.ReuseTabs">
            <summary>
            Reuse of multiple page components within an application
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.TabPaneClass">
            <summary>
            Class name of the inner tab pane.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.TabPaneTemplate">
            <summary>
            Templates for customizing page content.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.Body">
            <summary>
            The content of the tab.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.Locale">
            <summary>
            Localization Settings.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.HidePages">
            <summary>
            Whether to hide the page display and keep only the title tab. Then you can use <see cref="T:AntDesign.ReusePages" /> to show the page conent.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.ReuseTabsRouteData">
            <summary>
            The routing information for the current page, which is a serializable version of <see cref="T:Microsoft.AspNetCore.Components.RouteData"/>.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabs.ChildContent">
            <summary>
            cover the base ChildContent
            </summary>
        </member>
        <member name="T:AntDesign.ReuseTabsPageAttribute">
            <summary>
            Attribute for ReuseTabsPage, used to set the page title and other properties.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageAttribute.Title">
            <summary>
            Specifies the title of the tab.
            <para>
             If you want to set a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>, you need implement <see cref="M:AntDesign.IReuseTabsPage.GetPageTitle"/> in the page.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageAttribute.Ignore">
            <summary>
            Weather the page wont be reused.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageAttribute.Closable">
            <summary>
            Weather the tab can be closed.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageAttribute.Pin">
            <summary>
            Weather the tab can be pinned and opened at the first time.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageAttribute.PinUrl">
            <summary>
            The url of the pinned page. Because when the tab is clicked, it need to navigate to the page through the url.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageAttribute.KeepAlive">
            <summary>
            Weather the page is keeping alive.
            <para>
             If true, the page will be kept in memory, otherwise, the page will be destroyed when it is not active.
             </para>
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageAttribute.Order">
            <summary>
            The order of the page, the smaller the order, the earlier the page will be displayed.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageAttribute.Singleton">
            <summary>
            Weather the page is a singleton.
            <para>
            If true, the page will be reused although the parameters is different, otherwise, another tab will be created.
            </para>
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageItem.Singleton">
            <summary>
            Weather the page is a singleton. If true, the page will be reused although the url is different, otherwise, another tab will be created.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageItem.Body">
            <summary>
            Page content
            </summary>5
        </member>
        <member name="P:AntDesign.ReuseTabsPageItem.Rendered">
            <summary>
            Weather the page is rendered. If false, the page will not be rendered.
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsPageItem.RouteData">
            <summary>
            Use to hold and update the route data of the page.
            </summary>
        </member>
        <member name="T:AntDesign.ReuseTabsService">
            <summary>
            The service for reuse tabs
            </summary>
        </member>
        <member name="P:AntDesign.ReuseTabsService.Pages">
            <summary>
            The page information list of the currently opened page, which can be used for caching and recovery
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CreateTab(System.String,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Create a tab without navigation, the page doesn't really render until the tab is clicked
            </summary>
            <param name="pageUrl">The url of target page</param>
            <param name="titleTemplate">The title show on the tab</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CreateTab(System.String,System.String)">
            <summary>
            Create a tab without navigation, the page doesn't really render until the tab is clicked
            </summary>
            <param name="pageUrl">The url of target page</param>
            <param name="title">The title show on the tab</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ClosePage(System.String)">
            <summary>
            Close the page corresponding to the specified url
            </summary>
            <param name="url">The specified page's url</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ClosePageByKey(System.String)">
            <summary>
            Close the page corresponding to the specified key
            </summary>
            <param name="key">The specified page's key</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CloseOther(System.String)">
            <summary>
            Close all pages except the page with the specified url
            </summary>
            <param name="url">The specified page's url</param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CloseAll">
            <summary>
            Close all pages that is Closable or is not Pinned
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.CloseCurrent">
            <summary>
            Close current page
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ReloadPage">
            <summary>
            Reload Current Page
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ReloadPage(System.String)">
            <summary>
            Reload the page corresponding to the specified url
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.Update">
            <summary>
            Update the state of the <see cref="T:AntDesign.ReuseTabs"/>
            </summary>
        </member>
        <member name="M:AntDesign.ReuseTabsService.UpdatePage(System.String,System.Action{AntDesign.ReuseTabsPageItem})">
            <summary>
            Update the options of the specified page
            </summary>
            <param name="url"> The url of the page </param>
            <param name="optionsAction"></param>
        </member>
        <member name="M:AntDesign.ReuseTabsService.GetAllAssembly">
            <summary>
            Get all assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ReuseTabsService.ScanPinnedPageAttribute">
            <summary>
            Scan ReuseTabsPageAttribute
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.ForceRender">
            <summary>
            Forced render of content in tabs, not lazy render after clicking on tabs
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.TabPane.Key">
            <summary>
            TabPane's key
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.Tab">
            <summary>
            Show text in <see cref="T:AntDesign.TabPane"/>'s head
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.TabTemplate">
            <summary>
            Template of TabPane's head
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.TabContextMenu">
            <summary>
            Template for customer context menu
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.Disabled">
            <summary>
            If the tab is disabled
            </summary>
        </member>
        <member name="P:AntDesign.TabPane.Closable">
            <summary>
            If the tab is closable
            </summary>
            <default value="true" />
        </member>
        <member name="T:AntDesign.Tabs">
                <summary>
                <para>Tabs make it easy to switch between different views.</para>
            
                <h2>When To Use</h2>
            
                <para>Ant Design has 3 types of Tabs for different situations.</para>
            
                <list type="bullet">
                    <item>Card Tabs: for managing too many closeable views.</item>
                    <item>Normal Tabs: for functional aspects of a page.</item>
                    <item><see cref="T:AntDesign.RadioGroup`1"/>: for secondary tabs.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.TabPane" />
        </member>
        <member name="P:AntDesign.Tabs.ChildContent">
            <summary>
            Content for tabs. Should include <c>TabPane</c> elements
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.ActiveKey">
            <summary>
            Current <see cref="T:AntDesign.TabPane"/>'s <see cref="P:AntDesign.TabPane.Key"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.ActiveKeyChanged">
            <summary>
            Callback executed when the active tab changes
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.Animated">
            <summary>
            Whether to change tabs with animation. Only works while <see cref="P:AntDesign.Tabs.TabPosition"/> = <see cref="F:AntDesign.TabPosition.Top"/> or <see cref="F:AntDesign.TabPosition.Bottom"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.InkBarAnimated">
            <summary>
            Whether the ink bar is animated
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Tabs.RenderTabBar">
            <summary>
            Replace the TabBar
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.DefaultActiveKey">
            <summary>
            Initial active <see cref="T:AntDesign.TabPane"/>'s <see cref="P:AntDesign.TabPane.Key"/>, if <see cref="P:AntDesign.Tabs.ActiveKey"/> is not set
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.HideAdd">
            <summary>
            Hide plus icon or not. Only works while <see cref="P:AntDesign.Tabs.Type"/> = <see cref="F:AntDesign.TabType.EditableCard"/>
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Tabs.Size">
            <summary>
            Preset tab bar size
            </summary>
            <default value="TabSize.Default" />
        </member>
        <member name="P:AntDesign.Tabs.TabBarExtraContent">
            <summary>
            Extra content in tab bar
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabBarExtraContentLeft">
            <summary>
            Extra content to the left of the tab bar
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabBarExtraContentRight">
            <summary>
            Extra content to the right of the tab bar
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabBarGutter">
            <summary>
            The gap between tabs
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Tabs.TabBarStyle">
            <summary>
            Tab bar style object
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabBarClass">
            <summary>
            Tab bar css class
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.TabPosition">
            <summary>
            Position of tabs
            </summary>
            <default value="TabPosition.Top" />
        </member>
        <member name="P:AntDesign.Tabs.Type">
            <summary>
            Basic style of tabs
            </summary>
            <default value="TabType.Line" />
        </member>
        <member name="P:AntDesign.Tabs.OnChange">
            <summary>
            Callback executed when active tab is changed
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.OnEdit">
            <summary>
            Callback executed when tab is added or removed. Only works while <see cref="P:AntDesign.Tabs.Type"/> = <see cref="F:AntDesign.TabType.EditableCard"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.OnClose">
            <summary>
            Callback when tab is closed
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.OnAddClick">
            <summary>
            Callback executed when add button clicked
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.AfterTabCreated">
            <summary>
            Callback executed after a tab is created
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.OnTabClick">
            <summary>
            Callback executed when tab is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.Draggable">
            <summary>
            Make tabs draggable
            </summary>
        </member>
        <member name="P:AntDesign.Tabs.Centered">
            <summary>
            If tabs are centered or not
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.Tabs.AddTabPane(AntDesign.TabPane)">
            <summary>
            Add <see cref="T:AntDesign.TabPane"/> to <see cref="T:AntDesign.Tabs"/>
            </summary>
            <param name="tabPane">The AntTabPane to be added</param>
            <exception cref="T:System.ArgumentNullException">Key is null</exception>
            <exception cref="T:System.ArgumentException">An AntTabPane with the same key already exists</exception>
        </member>
        <member name="M:AntDesign.Tabs.GoTo(System.Int32)">
            <summary>
            Activate the tab with the specified index
            </summary>
            <param name="tabIndex"></param>
        </member>
        <member name="M:AntDesign.Tabs.Next">
            <summary>
            Move to next tab
            </summary>
        </member>
        <member name="M:AntDesign.Tabs.Previous">
            <summary>
            Move to previous tab
            </summary>
        </member>
        <member name="M:AntDesign.Tabs.ActivatePane(System.String)">
            <summary>
            Activate the specified tab
            </summary>
            <param name="key">The key of the tab to activate</param>
        </member>
        <member name="T:AntDesign.Tag">
                <summary>
                <para>Tag for categorizing or markup.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>It can be used to tag by dimension or property.</item>
                    <item>When categorizing.</item>
                </list>
                </summary>
        </member>
        <member name="P:AntDesign.Tag.ChildContent">
            <summary>
            Tag content
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Closable">
            <summary>
            Whether the Tag can be closed
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Tag.Checkable">
            <summary>
            Whether the Tag can be checked
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Tag.Checked">
            <summary>
            Checked status of Tag
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Tag.CheckedChanged">
            <summary>
            Callback executed when Tag is checked/unchecked
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Color">
            <summary>
            Tag color. Can either be a predefined color (TagColor)
            or hex color.
            </summary>
            <default value="TagColor.Default" />
        </member>
        <member name="P:AntDesign.Tag.PresetColor">
            <summary>
            Tag color from the PresetColor list
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Icon">
            <summary>
            Set the tag's icon 
            </summary>
        </member>
        <member name="P:AntDesign.Tag.IconTheme">
            <summary>
            Define the icon theme.
            </summary>
            <default value="IconThemeType.Outline" />
        </member>
        <member name="P:AntDesign.Tag.OnClose">
            <summary>
            Callback executed when tag is closed
            </summary>
        </member>
        <member name="P:AntDesign.Tag.OnClosing">
            <summary>
            Triggered before true closing, can prevent the closing
            </summary>
        </member>
        <member name="P:AntDesign.Tag.OnClick">
            <summary>
            Callback executed when tag is clicked (it is not called 
            when closing icon is clicked).
            </summary>
        </member>
        <member name="P:AntDesign.Tag.Visible">
            <summary>
            Whether the Tag is closed or not
            </summary>
            <default value="true" />
        </member>
        <member name="T:AntDesign.TimePicker`1">
                <summary>
                <para>To select/input a time.</para>
            
                <h2>When To Use</h2>
            
                <para>By clicking the input box, you can select a time from a popup panel.</para>
                </summary>
                <inheritdoc />
        </member>
        <member name="T:AntDesign.Timeline">
                <summary>
                <para>Vertical display timeline.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When a series of information needs to be ordered by time (ascending or descending).</item>
                    <item>When you need a timeline to make a visual connection.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.TimelineItem" />
        </member>
        <member name="P:AntDesign.Timeline.Mode">
            <summary>
            Where the line will be in relation to the items - left, right or alternate
            </summary>
            <default value="TimelineMode.Left" />
        </member>
        <member name="P:AntDesign.Timeline.Reverse">
            <summary>
            Reverse nodes or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Timeline.Pending">
            <summary>
            Set the last ghost node's existence or its content
            </summary>
        </member>
        <member name="P:AntDesign.Timeline.PendingDot">
            <summary>
            Set the dot of the last ghost node when pending is true	
            </summary>
        </member>
        <member name="P:AntDesign.Timeline.ChildContent">
            <summary>
            Content of timeline. Should contain <c>TimelineItem</c> elements
            </summary>
        </member>
        <member name="P:AntDesign.TimelineItem.ChildContent">
            <summary>
            The content of the timeline item.
            </summary>
        </member>
        <member name="P:AntDesign.TimelineItem.Dot">
            <summary>
            The dot of the timeline item.
            </summary>
        </member>
        <member name="P:AntDesign.TimelineItem.Color">
            <summary>
            The color of the timeline item.
            </summary>
            <default value="TimelineDotColor.Blue" />
        </member>
        <member name="P:AntDesign.TimelineItem.Label">
            <summary>
            The label of the timeline item.
            </summary>
        </member>
        <member name="T:AntDesign.Tooltip">
                <summary>
                <para>A simple text popup tip.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>The tip is shown on mouse enter, and is hidden on mouse leave. The <c>Tooltip</c> doesn't support complex text or operations.</item>
                    <item>To provide an explanation of a button/text/operation. It's often used instead of the html <c>title</c> attribute.</item>
                </list>
            
                <h2>Two types</h2>
            
                <para>There are 2 rendering approaches for <c>Tooltip</c>:</para>
                <list type="number">
                    <item>Wraps child element (content of the <c>Tooltip</c>) with a <c>div</c> (default approach).</item>
                    <item>
                        Child element is not wrapped with anything. This approach requires usage of <c>Unbound</c> tag inside <c>Tooltip</c> and depending on the child element type (please refer to the first example):
                        <list type="bullet">
                            <item>html tag: has to have its <c>@ref</c> set to <c>@context.Current</c> </item>
                            <item><c>Ant Design Blazor</c> component: has to have its <c>RefBack</c> attribute set to <c>@context</c>.</item>
                        </list>
                    </item>
                </list>
            
                <para>Please ensure that the child node of <c>Tooltip</c> accepts <c>onMouseEnter</c>, <c>onMouseLeave</c>, <c>onFocus</c>, <c>onClick</c> events.</para>
                </summary>
        </member>
        <member name="P:AntDesign.Tooltip.Title">
            <summary>
            The text shown in the tooltip
            </summary>
        </member>
        <member name="P:AntDesign.Tooltip.TitleTemplate">
            <summary>
            Content shown in the tooltip
            </summary>
        </member>
        <member name="P:AntDesign.Tooltip.ArrowPointAtCenter">
            <summary>
            Whether the arrow is pointed at the center of target
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Tooltip.MouseEnterDelay">
            <summary>
            Delay in seconds, before tooltip is shown on mouse enter
            </summary>
            <default value="0.1" />
        </member>
        <member name="P:AntDesign.Tooltip.MouseLeaveDelay">
            <summary>
            Delay in seconds, before tooltip is hidden on mouse leave
            </summary>
            <default value="0.1" />
        </member>
        <member name="P:AntDesign.Tooltip.TabIndex">
            <summary>
            Tab index of the tooltip
            </summary>
            <default value="0" />
        </member>
        <member name="T:AntDesign.Transfer">
                <summary>
                <para>Double column transfer choice box.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>It is a select control essentially which can be use for selecting multiple items.</item>
                    <item>Transfer can display more information for items and take up more space.</item>
                </list>
            
                <para>Transfer the elements between two columns in an intuitive and efficient way.</para>
            
                <para>
                    One or more elements can be selected from either column, one click on the proper `direction` button, and the transfer is done. 
                    The left column is considered the `source` and the right column is considered the `target`. 
                    As you can see in the API description, these names are reflected in.
                </para>
                </summary>
        </member>
        <member name="P:AntDesign.Transfer.DataSource">
            <summary>
            Used for setting the source data. 
            The elements that are part of this array will be present jn the left column, except for the elements whose keys are included in <see cref="P:AntDesign.Transfer.TargetKeys"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.Titles">
            <summary>
            Titles for the columns left to right. Must be an array with 2 elements.
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.Operations">
            <summary>
            Labels to display next to the icons for the operations, from top to bottom. Must be an array with 2 elements.
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.Disabled">
            <summary>
            Whether the component is disabled or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Transfer.ShowSearch">
            <summary>
            Whether to show search bars in the columns or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Transfer.ShowSelectAll">
            <summary>
            Whether to show select all buttons in the columns or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Transfer.TargetKeys">
            <summary>
            Keys of elements that are listed in the right column
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.SelectedKeys">
            <summary>
            Currently selected items
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.OnChange">
            <summary>
            Callback executed when an item moves columns
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.OnScroll">
            <summary>
            Callback executed when a column is scrolled
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.OnSearch">
            <summary>
            Callback executed when a column is searched
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.OnSelectChange">
            <summary>
            Callbac executed when the selected items change in either column
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.Render">
            <summary>
            Custom render for the items in the columns
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.Locale">
            <summary>
            Locacle used for localization of text
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.Footer">
            <summary>
            Footer string displayed in the footer of each column
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.FooterTemplate">
            <summary>
            Footer content displayed in the footer of each column
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.ChildContent">
            <summary>
            Child content
            </summary>
        </member>
        <member name="P:AntDesign.Transfer.ListStyle">
            <summary>
            A custom CSS style used for rendering the transfer columns
            </summary>
        </member>
        <member name="T:AntDesign.TreeSelect`2">
                <summary>
                <para>Tree selection control.</para>
            
                <h2>When To Use</h2>
            
                <para>
                    <c>TreeSelect</c> is similar to <c>Select</c>, but the values are provided in a tree like structure. 
                    Any data whose entries are defined in a hierarchical manner is fit to use this control. 
                    Examples of such case may include a corporate hierarchy, a directory structure, and so on.
                </para>
                </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.Multiple">
            <summary>
            Whether to allow multiple selections or not
            </summary>
            <default value="false unless TreeCheckable is true"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TreeCheckable">
            <summary>
            Whether tree nodes are able to be selected or not, which would select all leafs under that node.
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TreeCheckStrictly">
            <summary>
            Check treeNode precisely; parent treeNode and children treeNodes are not associated
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ShowCheckedStrategy">
            <summary>
            Specify how to show checked values when TreeCheckable is true and TreeCheckStrictly is false 
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.CheckOnClickNode">
            <summary>
            Whether to check the checkbox when user click the tree node.  
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.OnBlur">
            <summary>
            Callback executed when the component looses focus
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TitleTemplate">
            <summary>
            Get or set the template to render the title of the tree node
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TitleIconTemplate">
            <summary>
             Customize the icon templates
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.Nodes">
            <summary>
            Nodes to render in the tree. Use either this or <see cref="P:AntDesign.TreeSelect`2.DataSource"/>
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.DataSource">
            <summary>
            Datasource for the tree. Can be a list of any custom object type by providing the expressions to get children, leafs, titles, etc. Use either this or <see cref="!:ChildContent"/>
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TreeDefaultExpandAll">
            <summary>
            Whether to expand all nodes by default
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TreeDefaultExpandParent">
            <summary>
            Whether to expand parent nodes by default
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TreeDefaultExpandedKeys">
            <summary>
            Set the keys of the default expanded tree nodes
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ExpandOnClickNode">
            <summary>
            Whether to expand the parent node when clicking on a tree node
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.SearchExpression">
            <inheritdoc cref="P:AntDesign.Tree`1.SearchExpression"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.OnSearch">
            <summary>
            Callback executed when the user searches for a value
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.MatchedStyle">
            <summary>
            Set the style of the matched text
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.MatchedClass">
            <summary>
            Set the class of the matched text
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.RootValue">
            <summary>
            The value of the root node
            </summary>
            <default value="0"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.DropdownMatchSelectWidth">
            <summary>
            Determine whether the dropdown menu and the select input are the same width. Default set min-width same as input. Will ignore when value less than select width. false will disable virtual scroll
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.DropdownMaxWidth">
            <summary>
            Maximum width of the dropdown
            </summary>
            <default value="auto"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.PopupContainerMaxHeight">
            <summary>
            Maximum height of the dropdown
            </summary>
            <default value="256px"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ShowIcon">
            <summary>
            show treeNode icon icon
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ShowLeafIcon">
            <summary>
            Whether to show leaf icon
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TreeAttributes">
            <summary>
            Set the attributes of the tree
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.OnNodeLoadDelayAsync">
            <summary>
            Callback executed when the tree node is loaded
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.OnTreeNodeSelect">
            <summary>
            Callback executed when the tree node is selected
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TitleExpression">
            <inheritdoc cref="P:AntDesign.Tree`1.TitleExpression"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.DropdownStyle">
            <summary>
            Set the style of the dropdown menu
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ShowTreeLine">
            <summary>
            Whether to show lines in the tree or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.KeyExpression">
            <inheritdoc cref="P:AntDesign.Tree`1.KeyExpression"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.IconExpression">
            <inheritdoc cref="P:AntDesign.Tree`1.IconExpression"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.IsLeafExpression">
            <inheritdoc cref="P:AntDesign.Tree`1.IsLeafExpression"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ChildrenExpression">
            <inheritdoc cref="P:AntDesign.Tree`1.ChildrenExpression"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.DisabledExpression">
            <inheritdoc cref="P:AntDesign.Tree`1.DisabledExpression"/>
        </member>
        <member name="P:AntDesign.TreeSelect`2.CheckableExpression">
            <summary>
            Specifies a method to return a checkable node
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.SelectableExpression">
            <summary>
            Specifies a method to return a selectable node
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.ExpandedKeys">
            <summary>
            (Controlled) expands the specified tree node
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.TreeComponent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.Value">
            <summary>
            The selected value
            </summary>
        </member>
        <member name="P:AntDesign.TreeSelect`2.Values">
            <summary>
            The selected values
            </summary>
        </member>
        <member name="M:AntDesign.TreeSelect`2.CheckAll">
            <summary>
            Check all nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeSelect`2.UncheckAll">
            <summary>
            Uncheck all nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeSelect`2.SelectAll">
            <summary>
            Select all nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeSelect`2.DeselectAll">
            <summary>
            Deselect all nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeSelect`2.ExpandAll(System.Func{AntDesign.TreeNode{`1},System.Boolean},System.Boolean)">
            <summary>
            Expand all nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeSelect`2.CollapseAll(System.Func{AntDesign.TreeNode{`1},System.Boolean},System.Boolean)">
            <summary>
            Collapse all nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeSelect`2.GetNode(`0)">
            <summary>
            Get TreeNode by Key
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="T:AntDesign.Tree`1">
                <summary>
                <para>A hierarchical list structure component.</para>
            
                <h2>When To Use</h2>
            
                <para>
                    Almost anything can be represented in a tree structure. 
                    Examples include directories, organization hierarchies, biological classifications, countries, etc. 
                    The `Tree` component is a way of representing the hierarchical relationship between these things. 
                    You can also expand, collapse, and select a treeNode within a `Tree`.
                </para>
                </summary>
                <seealso cref="T:AntDesign.TreeNode`1" />
        </member>
        <member name="F:AntDesign.Tree`1._allNodes">
            <summary>
            All of the node
            </summary>
        </member>
        <member name="F:AntDesign.Tree`1._checkedNodes">
            <summary>
            All the checked nodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ShowExpand">
            <summary>
            Shows an expansion icon before the node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ShowLine">
            <summary>
            Shows a connecting line
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ShowIcon">
            <summary>
            show treeNode icon icon
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.BlockNode">
            <summary>
            Whether treeNode fill remaining horizontal space
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Draggable">
            <summary>
            Whether the node allows drag and drop
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Disabled">
            <summary>
            The tree is disabled
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ShowLeafIcon">
            <summary>
            Displays the cotyledon icon
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SwitcherIcon">
            <summary>
            Specific the Icon type of switcher
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Nodes">
            <summary>
            Nodes for the tree. Use either this, <see cref="P:AntDesign.Tree`1.DataSource"/>, or <see cref="P:AntDesign.Tree`1.ChildContent"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ChildContent">
            <summary>
            Nodes for the tree. Use either this, <see cref="P:AntDesign.Tree`1.DataSource"/>, or <see cref="P:AntDesign.Tree`1.Nodes"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ChildNodes">
            <summary>
            tree childnodes
            Add values when the node is initialized
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.AddChildNode(AntDesign.TreeNode{`0})">
            <summary>
            Add a node
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="P:AntDesign.Tree`1.Selectable">
            <summary>
            Whether can be selected
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Multiple">
            <summary>
            Allows selecting multiple treeNodes
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.TriggerOnSelect(AntDesign.TreeNode{`0})">
            <summary>
            Trigger the event OnSelect
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:AntDesign.Tree`1.TriggerOnUnselect(AntDesign.TreeNode{`0})">
            <summary>
            Trigger the event OnUnselect
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:AntDesign.Tree`1.SelectAll">
            <summary>
            Select all nodes
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.DeselectAll">
            <summary>
            Deselect all nodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedKey">
            <summary>
            @bind-SelectedKey
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedKeyChanged">
            <summary>
            @bind-SelectedKeys
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedNode">
            <summary>
            @bind-SelectedNode
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedNodeChanged">
            <summary>
            @bind-SelectedNode
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedData">
            <summary>
            @bing-SelectedData
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedDataChanged">
            <summary>
            @bind-SelectedData
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedKeys">
            <summary>
            The selected keys
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedKeysChanged">
            <summary>
            @bind-SelectedKeys
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedNodes">
            <summary>
            The collection of selected nodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedNodesChanged">
            <summary>
            @bind-SelectedNodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedDatas">
            <summary>
            The selected data set
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectedDatasChanged">
            <summary>
            @bind-SelectedDatas
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.UpdateSelectedKeys">
            <summary>
            Update binding data
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.Checkable">
            <summary>
            Add a Checkbox before the node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.CheckOnClickNode">
            <summary>
            Check or uncheck the node by click TreeNodeTitle if checkable
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.CheckStrictly">
            <summary>
            Check treeNode precisely; parent treeNode and children treeNodes are not associated
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.CheckedKeys">
            <summary>
            Checked  keys
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.CheckedKeysChanged">
            <summary>
             @bind-CheckedKeys
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.UncheckAll">
            <summary>
            Unchecks all nodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DefaultCheckedKeys">
            <summary>
            Specifies the keys of the default checked treeNodes
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DisableCheckKeys">
            <summary>
            Disable node Checkbox
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SearchValue">
            <summary>
            search value
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SearchExpression">
            <summary>
            Function used to indicate if a node matches the search
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.MatchedStyle">
            <summary>
            Style for the piece of a node that matches search
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.MatchedClass">
            <summary>
            Class name for the piece of a node that matches search
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DataSource">
            <summary>
            Datasource for the tree. Can be a list of any custom object type by providing the expressions to get children, leafs, titles, etc. Use either this or <see cref="P:AntDesign.Tree`1.ChildContent"/>
            Use either this, <see cref="P:AntDesign.Tree`1.Nodes"/>, or <see cref="P:AntDesign.Tree`1.ChildContent"/>
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.TitleExpression">
            <summary>
            Specifies a method that returns the text of the node.
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.KeyExpression">
            <summary>
            Specifies a method that returns the key of the node.
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.IconExpression">
            <summary>
            Specifies a method to return the node icon.
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.IsLeafExpression">
            <summary>
            Specifies a method that returns whether the expression is a leaf node.
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ChildrenExpression">
            <summary>
            Specifies a method to return the children of a node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DisabledExpression">
            <summary>
            Specifies a method to return a disabled node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.CheckableExpression">
            <summary>
            Specifies a method to return a checkable node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SelectableExpression">
            <summary>
            Specifies a method to return a selectable node
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnNodeLoadDelayAsync">
            <summary>
            Lazy load callbacks
            </summary>
            <remarks>You must use async and the return type is Task, otherwise you may experience load lag and display problems</remarks>
        </member>
        <member name="P:AntDesign.Tree`1.OnClick">
            <summary>
            Click the tree node callback
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDblClick">
            <summary>
            Double-click the node callback
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnContextMenu">
            <summary>
            Right-click tree node callback
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnCheck">
            <summary>
            checked the tree node callback
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnExpandChanged">
            <summary>
            Click the expansion tree node icon to call back
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.IndentTemplate">
            <summary>
            The indentation template
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.TitleTemplate">
            <summary>
            Customize the header template
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.TitleIconTemplate">
            <summary>
             Customize the icon templates
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.SwitcherIconTemplate">
            <summary>
            Customize toggle icon templates
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DragItem">
            <summary>
            当前拖拽项
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDragStart">
            <summary>
            Called when the drag and drop begins
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDragEnter">
            <summary>
            Called when drag and drop into a releasable target
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDragLeave">
            <summary>
            Called when drag and drop away from a releasable target
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDrop">
            <summary>
            Triggered when drag-and-drop drops succeed
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.OnDragEnd">
            <summary>
            Drag-and-drop end callback
            </summary>
            <remarks>this callback method must be set</remarks>
        </member>
        <member name="M:AntDesign.Tree`1.GetNode(System.String)">
            <summary>
            Get TreeNode from Key
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:AntDesign.Tree`1.FindFirstOrDefaultNode(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
            <summary>
            Find Node
            </summary>
            <param name="predicate">Predicate</param>
            <param name="recursive">Recursive Find</param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.Tree`1.ExpandOnClickNode">
            <summary>
            Expand or collapse the node by click TreeNodeTitle
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DefaultExpandAll">
            <summary>
            Whether to default to all nodes expanded or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Tree`1.DefaultExpandParent">
            <summary>
            The parent node is expanded by default
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.DefaultExpandedKeys">
            <summary>
            Expand the specified tree node by default
            </summary>
        </member>
        <member name="P:AntDesign.Tree`1.ExpandedKeys">
            <summary>
            (Controlled) expands the specified tree node
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.ExpandAll(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
            <summary>
            Expand all nodes
            </summary>
        </member>
        <member name="M:AntDesign.Tree`1.CollapseAll(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
            <summary>
            Collapse all nodes
            </summary>
        </member>
        <member name="P:AntDesign.TreeEventArgs`1.TargetNode">
            <summary>
            目标节点
            </summary>
        </member>
        <member name="P:AntDesign.TreeEventArgs`1.OriginalEvent">
            <summary>
            原生事件
            </summary>
        </member>
        <member name="P:AntDesign.TreeEventArgs`1.DropBelow">
            <summary>
            Whether to drop dragged node as a sibling (below) or as a child of target node.  
            </summary>
        </member>
        <member name="P:AntDesign.TreeIndent`1.TreeComponent">
            <summary>
            Root Tree
            </summary>
        </member>
        <member name="P:AntDesign.TreeIndent`1.SelfNode">
            <summary>
            Current Node
            </summary>
        </member>
        <member name="P:AntDesign.TreeIndent`1.TreeLevel">
            <summary>
            Left indent level of current node
            </summary>
        </member>
        <member name="M:AntDesign.TreeIndent`1.GetParentNode(AntDesign.TreeNode{`0},System.Int32)">
            <summary>
            To find specific level parent node
            </summary>
            <param name="node"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.TreeNode`1.TreeComponent">
            <summary>
            Tree
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.ParentNode">
            <summary>
            Parent Node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Nodes">
             <summary>
            
             </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.HasChildNodes">
            <summary>
            Whether child nodes exist
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.TreeLevel">
            <summary>
            Current Node Level
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.NodeIndex">
            <summary>
            record the index in children nodes list of parent node.
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.IsLastNode">
            <summary>
            Determine if it is the last node in the same level nodes.
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.AddNode(AntDesign.TreeNode{`0})">
            <summary>
            add node to parent node
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.FindFirstOrDefaultNode(System.Func{AntDesign.TreeNode{`0},System.Boolean},System.Boolean)">
            <summary>
            Find a node
            </summary>
            <param name="predicate">Predicate</param>
            <param name="recursive">Recursive Find</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNode`1.GetSiblingNodes">
            <summary>
            Get the sibling nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNode`1.GetPreviousNode">
            <summary>
            Get the previous node
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNode`1.GetNextNode">
            <summary>
            Get the next node 
            </summary>
            <returns></returns>
        </member>
        <member name="P:AntDesign.TreeNode`1.Key">
            <summary>
            Specifies the unique identifier name of the current node。
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Disabled">
            <summary>
            The disabled state is subject to the parent node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Selected">
            <summary>
            Selected or not
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.SelectedChanged">
            <summary>
            Triggered when the selected state changes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetSelected(System.Boolean)">
            <summary>
            Setting Selection State
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AntDesign.TreeNode`1.Loading">
            <summary>
            Whether the load state is asynchronous (affects the display of the expansion icon)
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.DragTarget">
            <summary>
            Whether or not to release the target
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.DragTargetBottom">
             <summary>
            
             </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetTargetBottom(System.Boolean)">
            <summary>
            Sets the node to release the target location
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AntDesign.TreeNode`1.TargetContainer">
             <summary>
            
             </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetParentTargetContainer(System.Boolean)">
            <summary>
            Sets the drag and drop target node container
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.GetParentChildNodes">
            <summary>
            Gets the children of the parent node
            </summary>
            <returns></returns>
        </member>
        <member name="P:AntDesign.TreeNode`1.IsLeaf">
            <summary>
            Whether it is a leaf node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Expanded">
            <summary>
            Expand the node or not
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.Expand(System.Boolean)">
            <summary>
            Expand the node
            </summary>
            <param name="expanded"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.ExpandAll">
            <summary>
            Expand all child nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.CollapseAll">
            <summary>
            Collapse all child nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SwitchAllNodes(AntDesign.TreeNode{`0},System.Boolean)">
            <summary>
            节点展开关闭
            </summary>
            <param name="node"></param>
            <param name="expanded"></param>
        </member>
        <member name="P:AntDesign.TreeNode`1.RealDisplay">
            <summary>
            The real expand state, as long as there is a expaneded node on the path, then all the folds below
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.OnSwitcherClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Nodes switch
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.TreeNode`1.SwitcherOpen">
            <summary>
            switcher is opened
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.SwitcherClose">
            <summary>
            switcher is close
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.OpenPropagation(System.Boolean)">
            <summary>
            expaned parents
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Checked">
            <summary>
            Check the TreeNode or not 
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.DisableCheckbox">
            <summary>
            Disable checkbox
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.OnCheckBoxClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Triggered when the selection box is clicked
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetChecked(System.Boolean)">
            <summary>
            Set the checkbox state
            </summary>
            <param name="check"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.CheckAllChildren">
            <summary>
            Checks all child nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.UnCheckAllChildren">
            <summary>
            Unchecks all child nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.SetChildChecked(AntDesign.TreeNode{`0},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the checkbox status of child nodes
            </summary>
            <param name="subnode"></param>
            <param name="check"></param>
            <param name="isManual"></param>
            <param name="forceRecursive"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.UpdateCheckState(System.Nullable{System.Boolean})">
            <summary>
            Update check status
            </summary>
            <param name="halfChecked"></param>
        </member>
        <member name="P:AntDesign.TreeNode`1.Draggable">
            <summary>
            Whether the node is draggable
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Icon">
            <summary>
            The icon in front of the node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.IconTemplate">
            <summary>
            Customize the icon template
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.SwitcherIcon">
            <summary>
            Specific the icon of the switcher
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.SwitcherIconTemplate">
            <summary>
            Customize the switcher icon template
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Title">
            <summary>
            The title of the node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.TitleTemplate">
            <summary>
            Customize the title template
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.Matched">
            <summary>
            title是否包含SearchValue(搜索使用)
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.HasChildMatched">
            <summary>
            子节点存在满足搜索条件，所以夫节点也需要显示
            </summary>
        </member>
        <member name="P:AntDesign.TreeNode`1.DataItem">
            <summary>
            The data of the node, it's the data item in the data source
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.GetParentChildDataItems">
            <summary>
            获得上级数据集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNode`1.AddChildNode(`0)">
            <summary>
            Add child node
            </summary>
            <param name="dataItem"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.AddNextNode(`0)">
            <summary>
            Add a node next the node
            </summary>
            <param name="dataItem"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.AddPreviousNode(`0)">
            <summary>
            Add a node before the node
            </summary>
            <param name="dataItem"></param>
        </member>
        <member name="M:AntDesign.TreeNode`1.Remove">
            <summary>
            remove
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.MoveInto(AntDesign.TreeNode{`0})">
            <summary>
            The node moves into the child node
            </summary>
            <param name="treeNode">target node</param>
        </member>
        <member name="M:AntDesign.TreeNode`1.MoveUp">
            <summary>
            Move up the nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.MoveDown">
            <summary>
            Move down the node
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.Downgrade">
             <summary>
            
             </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.Upgrade">
            <summary>
            Upgrade nodes
            </summary>
        </member>
        <member name="M:AntDesign.TreeNode`1.DragMoveInto(AntDesign.TreeNode{`0})">
            <summary>
            Drag and drop into child nodes
            </summary>
            <param name="treeNode">目标</param>
        </member>
        <member name="M:AntDesign.TreeNode`1.DragMoveDown(AntDesign.TreeNode{`0})">
            <summary>
            Drag and drop to the bottom of the target
            </summary>
            <param name="treeNode">目标</param>
        </member>
        <member name="P:AntDesign.TreeNodeCheckbox`1.TreeComponent">
            <summary>
            Root Tree
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeCheckbox`1.SelfNode">
            <summary>
            Current Node
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeCheckbox`1.OnCheckBoxClick">
            <summary>
            Trigger on checkbox click
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.TreeComponent">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.SelfNode">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.IsSwitcherOpen">
            <summary>
            节点是否处于展开状态
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.IsSwitcherClose">
            <summary>
            节点是否处于关闭状态
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeSwitcher`1.OnSwitcherClick">
            <summary>
            Trigger when the switcher is clicked
            </summary>
        </member>
        <member name="F:AntDesign.TreeNodeTitle`1._dragTargetClientX">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeTitle`1.TreeComponent">
            <summary>
            树控件本身
            </summary>
        </member>
        <member name="P:AntDesign.TreeNodeTitle`1.SelfNode">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDblClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnContextMenu(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragStart(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragLeave(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Leaving releases the target
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragEnter(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragOver(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Can be treated as a child if the target is moved to the right beyond the OffsetX distance  
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDrop(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:AntDesign.TreeNodeTitle`1.OnDragEnd(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Drag the end
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:AntDesign.Text">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:AntDesign.Text.Keyboard">
            <summary>
            Keyboard style
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Title.Level">
            <summary>
            Level of heading (ex: h1 would be 1). Must be between 1 and 5, inclusive. If outside that range it will default back to 1.
            </summary>
            <default value="1"/>
        </member>
        <member name="T:AntDesign.TypographyBase">
                <summary>
                <para>Basic text writing, including headings, body text, lists, and more.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When need to display a title or paragraph contents in Articles/Blogs/Notes.</item>
                    <item>When you need copyable/editable/ellipsis texts.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.Text"/>
                <seealso cref="T:AntDesign.Title"/>
                <seealso cref="T:AntDesign.Paragraph"/>
        </member>
        <member name="P:AntDesign.TypographyBase.Code">
            <summary>
            Code style
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TypographyBase.Copyable">
            <summary>
            If the text can be copied or not. Will add a copy icon to end of text if true.
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TypographyBase.CopyConfig">
            <summary>
            Configure what happens when copying
            </summary>
        </member>
        <member name="P:AntDesign.TypographyBase.Delete">
            <summary>
            Strikethrough style
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TypographyBase.Disabled">
            <summary>
            Disabled style
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TypographyBase.Editable">
            <summary>
            Control if editable or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TypographyBase.EditConfig">
            <summary>
            Configure editing
            </summary>
        </member>
        <member name="P:AntDesign.TypographyBase.Ellipsis">
            <summary>
            Display ellipsis when text overflows. Should set width when ellipsis needed
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TypographyBase.EllipsisConfig">
            <summary>
            Configure ellipsis
            </summary>
        </member>
        <member name="P:AntDesign.TypographyBase.Mark">
            <summary>
            Highlight the text
            </summary>
        </member>
        <member name="P:AntDesign.TypographyBase.Underline">
            <summary>
            Underline the text
            </summary>
        </member>
        <member name="P:AntDesign.TypographyBase.Strong">
            <summary>
            Bold the text
            </summary>
        </member>
        <member name="P:AntDesign.TypographyBase.OnChange">
            <summary>
            Callback executed when the user edits the content
            </summary>
        </member>
        <member name="P:AntDesign.TypographyBase.Type">
            <summary>
            Content type - styles text. Possible values: secondary, warning, danger
            </summary>
        </member>
        <member name="P:AntDesign.TypographyBase.ChildContent">
            <summary>
            Content to wrap
            </summary>
        </member>
        <member name="T:AntDesign.Upload">
                <summary>
                <para>Upload file by selecting or dragging.</para>
            
                <h2>When To Use</h2>
            
                <para>Uploading is the process of publishing information (web pages, text, pictures, video, etc.) to a remote server via a web page or upload tool.</para>
            
                <list type="bullet">
                    <item>When you need to upload one or more files.</item>
                    <item>When you need to show the process of uploading.</item>
                    <item>When you need to upload files by dragging and dropping.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.UploadInfo"/>
                <seealso cref="T:AntDesign.UploadFileItem"/>
        </member>
        <member name="P:AntDesign.Upload.BeforeUpload">
            <summary>
            Function which will be executed before uploading each file. 
            Uploading will be stopped if false is returned.
            Warning：This function is not supported in IE9.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.BeforeAllUploadAsync">
            <summary>
            Hook function which will be executed before starting the overall upload.
            Uploading will be stopped if false is returned.
            Warning：This function is not supported in IE9.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.BeforeAllUpload">
            <summary>
            Hook function which will be executed before starting the overall upload.
            Uploading will be stopped if false is returned.
            Warning：This function is not supported in IE9.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.Name">
            <summary>
            The name of uploading file
            </summary>
        </member>
        <member name="P:AntDesign.Upload.Action">
            <summary>
            Uploading URL
            </summary>
        </member>
        <member name="P:AntDesign.Upload.Disabled">
            <summary>
            Disable upload button
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Upload.Data">
            <summary>
            Additional data to be uploaded with the files
            </summary>
        </member>
        <member name="P:AntDesign.Upload.ListType">
            <summary>
            Built-in stylesheets, support for three types: <c>Text</c>, <c>Picture</c> or <c>PictureCard</c>
            </summary>
            <default value="UploadListType.Text" />
        </member>
        <member name="P:AntDesign.Upload.Directory">
            <summary>
            Support upload whole directory.
            See <see href="https://caniuse.com/input-file-directory">Can I Use</see> for browser support
            </summary>
        </member>
        <member name="P:AntDesign.Upload.Multiple">
            <summary>
            Whether to support selected multiple file. IE10+ supported. 
            When set to true, will allow selecting multiple files with holding down Ctrl key
            </summary>
        </member>
        <member name="P:AntDesign.Upload.Accept">
            <summary>
            File types that can be accepted. 
            See <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept">input's accept attribute</see>
            </summary>
        </member>
        <member name="P:AntDesign.Upload.ShowUploadList">
            <summary>
            Show the list of files uploading or not
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Upload.ShowDownloadIcon">
            <summary>
            List of files that have been uploaded (controlled)
            </summary>
        </member>
        <member name="P:AntDesign.Upload.ShowPreviewIcon">
            <summary>
            Show the preview icon or not
            </summary>
        </member>
        <member name="P:AntDesign.Upload.ShowRemoveIcon">
            <summary>
            Show the remove icon or not
            </summary>
        </member>
        <member name="P:AntDesign.Upload.FileList">
            <summary>
            Get or set the list of files that have been uploaded
            </summary>
        </member>
        <member name="P:AntDesign.Upload.Locale">
            <summary>
            Locale for UI text
            </summary>
        </member>
        <member name="P:AntDesign.Upload.FileListChanged">
            <summary>
            Event callback executed when the files list changes
            </summary>
        </member>
        <member name="P:AntDesign.Upload.DefaultFileList">
            <summary>
            Default list of files that have been uploaded.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.Headers">
            <summary>
            Set request headers, valid above IE10.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.OnSingleCompleted">
            <summary>
            A callback function, will be executed when a single file upload has succeeded or failed
            </summary>
        </member>
        <member name="P:AntDesign.Upload.OnCompleted">
            <summary>
            A callback function, will be executed when all uploads have succeeded or failed
            </summary>
        </member>
        <member name="P:AntDesign.Upload.OnChange">
            <summary>
            A callback function, can be executed when uploading state has changed for any reason. 
            The function will be called when uploading is in progress, completed or failed.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.OnRemove">
            <summary>
            A callback function executed when the remove file button is clicked.
            When true is returned, file will be removed and <see cref="P:AntDesign.Upload.FileListChanged"/> will be executed.
            When false is returned, the removal will be cancelled.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.OnPreview">
            <summary>
            A callback function, will be executed when file link or preview icon is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Upload.OnDownload">
            <summary>
            Callback executed when file name link is clicked in upload list.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.ChildContent">
            <summary>
            Content of the upload button
            </summary>
        </member>
        <member name="P:AntDesign.Upload.ShowButton">
            <summary>
            Whether to show the upload button or not.
            </summary>
            <defaut value="true"/>
        </member>
        <member name="P:AntDesign.Upload.Drag">
            <summary>
            Whether to allow drag and drop of files or not.
            </summary>
        </member>
        <member name="P:AntDesign.Upload.Method">
            <summary>
            HTTP method of upload request
            </summary>
            <default value="post"/>
        </member>
        <member name="P:AntDesign.UploadFileItem.Id">
            <summary>
            GUID to identify the file
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.FileName">
            <summary>
            The file name
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.Percent">
            <summary>
            Percentage uploaded
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.ObjectURL">
            <summary>
            Object URL for the file
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.Url">
            <summary>
            URL for the actual file
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.Response">
            <summary>
            Response from the server
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.State">
            <summary>
            State of the upload
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.Size">
            <summary>
            Size of the file
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.Ext">
            <summary>
            Extension for the file
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.Type">
            <summary>
            Type of file
            </summary>
        </member>
        <member name="P:AntDesign.UploadFileItem.ImageExtensions">
            <summary>
            File extensions that are considered images
            </summary>
        </member>
        <member name="M:AntDesign.UploadFileItem.IsPicture">
            <summary>
            Check if the file is a picture. See <see cref="P:AntDesign.UploadFileItem.ImageExtensions"/> for the extensions which will cause this to return true.
            </summary>
            <returns>Boolean indicating if the file is a picture or not.</returns>
        </member>
        <member name="P:AntDesign.UploadInfo.File">
            <summary>
            The file for the current operation
            </summary>
        </member>
        <member name="P:AntDesign.UploadInfo.FileList">
            <summary>
            The current list of files
            </summary>
        </member>
        <member name="T:AntDesign.Watermark">
            <summary>
            
            <para>
            Add specific text or patterns to the page.
            </para>
            
            <h2>When To Use</h2>
            
            <list type="bullet">
            <item>Use when the page needs to be watermarked to identify the copyright.</item>
            <item>Suitable for preventing information theft.</item>
            </list>
            </summary>
        </member>
        <member name="P:AntDesign.Watermark.Width">
            <summary>
            The width of the watermark, the default value of <c>content</c> is its own width
            </summary>
            <default value="120"/>
        </member>
        <member name="P:AntDesign.Watermark.Height">
            <summary>
            The height of the watermark, the default value of <c>content</c> is its own height
            </summary>
            <default value="64"/>
        </member>
        <member name="P:AntDesign.Watermark.Rotate">
            <summary>
            When the watermark is drawn, the rotation Angle, unit <c>°</c>
            </summary>
            <default value="-22"/>
        </member>
        <member name="P:AntDesign.Watermark.Alpha">
            <summary>
            transparency, value range [0-1]
            </summary>
            <default value="1f"/>
        </member>
        <member name="P:AntDesign.Watermark.FontSize">
            <summary>
            font size
            </summary>
            <default value="16"/>
        </member>
        <member name="P:AntDesign.Watermark.FontColor">
            <summary>
            font color 
            </summary>
            <default value="rgba(0,0,0,.15)"/>
        </member>
        <member name="P:AntDesign.Watermark.FontFamily">
            <summary>
            font family
            </summary>
            <default value="sans-serif"/>
        </member>
        <member name="P:AntDesign.Watermark.FontWeight">
            <summary>
            font weight. The value can be <c>normal</c>, <c>light</c>, <c>weight</c> and number. 
            </summary>
            <default value="normal"/>
        </member>
        <member name="P:AntDesign.Watermark.FontStyle">
            <summary>
            font style. The value can be <c>none</c>, <c>normal</c>, <c>italic</c> and <c>oblique</c>.
            </summary>
            <default value="normal"/>
        </member>
        <member name="P:AntDesign.Watermark.Content">
            <summary>
            Watermark text content
            </summary>
        </member>
        <member name="P:AntDesign.Watermark.Contents">
            <summary>
            Multiple-line watermark text contents
            </summary>
        </member>
        <member name="P:AntDesign.Watermark.ZIndex">
            <summary>
            The z-index of the appended watermark element.
            </summary>
            <default value="9"/>
        </member>
        <member name="P:AntDesign.Watermark.Gap">
            <summary>
            The spacing between watermarks.
            <para>X: the x-axis spacing between watermarks</para>
            <para>Y: the y-axis spacing between watermarks</para>
            </summary>
            <default value="(100, 100)"/>
        </member>
        <member name="P:AntDesign.Watermark.Image">
            <summary>
            Image source, it is recommended to export 2x or 3x image, high priority (support base64 format)
            </summary>
        </member>
        <member name="P:AntDesign.Watermark.Offset">
            <summary>
            The offset of the watermark from the upper left corner of the container. The default is <c>gap/2</c>.
            </summary>
            <default value="(gap[0]/2, gap[1]/2)"/>
        </member>
        <member name="P:AntDesign.Watermark.LineSpace">
            <summary>
            The line spacing, only applies when there are multiple lines (content is configured as an array)
            </summary>
            <default value="16"/>
        </member>
        <member name="P:AntDesign.Watermark.Scrolling">
            <summary>
            Enable infinite scrolling text effect
            </summary>
        </member>
        <member name="P:AntDesign.Watermark.ScrollingSpeed">
            <summary>
            The interval of motion displacement, in milliseconds.
            </summary>
            <default value="3000"/>
        </member>
        <member name="P:AntDesign.Watermark.Repeat">
            <summary>
            set or get whether to repeat the watermark
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Watermark.Grayscale">
            <summary>
            Whether the picture needs gray scale display (color to gray) 
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Watermark.ChildContent">
            <summary>
            The child Content
            </summary>
        </member>
        <member name="P:AntDesign.BreadcrumbItem.ChildContent">
            <summary>
            Inner content of item
            </summary>
        </member>
        <member name="P:AntDesign.BreadcrumbItem.Overlay">
            <summary>
            Overlay for a dropdown menu
            </summary>
        </member>
        <member name="P:AntDesign.BreadcrumbItem.Href">
            <summary>
            Link for the item. Providing this wraps the ChildContent in an anchor tag for this link.
            </summary>
        </member>
        <member name="P:AntDesign.BreadcrumbItem.OnClick">
            <summary>
            Click callback
            </summary>
        </member>
        <member name="P:AntDesign.CardMeta.Title">
            <summary>
            Title string
            </summary>
        </member>
        <member name="P:AntDesign.CardMeta.TitleTemplate">
            <summary>
            Title content. Takes priority over <see cref="P:AntDesign.CardMeta.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.CardMeta.Description">
            <summary>
            Description string
            </summary>
        </member>
        <member name="P:AntDesign.CardMeta.DescriptionTemplate">
            <summary>
            Description content. Takes priority over <see cref="P:AntDesign.CardMeta.Description"/>
            </summary>
        </member>
        <member name="P:AntDesign.CardMeta.Avatar">
            <summary>
            Avatar string. Will be passed to <see cref="T:AntDesign.Avatar"/> component's <see cref="P:AntDesign.Avatar.Src"/>
            </summary>
        </member>
        <member name="P:AntDesign.CardMeta.AvatarTemplate">
            <summary>
            Avatar content. Takes priority over <see cref="P:AntDesign.CardMeta.Avatar"/>
            </summary>
        </member>
        <member name="P:AntDesign.Content.ChildContent">
            <summary>
            The inner content
            </summary>
        </member>
        <member name="P:AntDesign.Footer.ChildContent">
            <summary>
            The inner content
            </summary>
        </member>
        <member name="P:AntDesign.Header.ChildContent">
            <summary>
            The inner content
            </summary>
        </member>
        <member name="P:AntDesign.SummaryCell.CellRender">
            <summary>
            Set the content of the cell.
            </summary>
        </member>
        <member name="P:AntDesign.SummaryRow.ChildContent">
            <summary>
            Summary row content.
            </summary>
        </member>
    </members>
</doc>
