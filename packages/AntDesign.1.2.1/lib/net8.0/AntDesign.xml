<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AntDesign</name>
    </assembly>
    <members>
        <member name="T:AntDesign.Affix">
                <summary>
                <para>Wrap Affix around another component to make it stick the viewport.</para>
                <h2>When To Use</h2>
                <list type="bullet">
                    <item>On longer web pages, its helpful for some content to stick to the viewport. This is common for menus and actions.</item>
                    <item>Please note that Affix should not cover other content on the page, especially when the size of the viewport is small.</item>
                </list>
                <para><strong>Important</strong>: Children of <c>Affix</c> must not have the property <c>position: absolute</c>, but you can set <c>position: absolute</c> on <c>Affix</c> itself</para>
                </summary> 
        </member>
        <member name="P:AntDesign.Affix.OffsetBottom">
            <summary>
            Offset from the bottom of the viewport (in pixels)
            </summary>
        </member>
        <member name="P:AntDesign.Affix.OffsetTop">
            <summary>
            Offset from the top of the viewport (in pixels)
            </summary>
        </member>
        <member name="P:AntDesign.Affix.TargetSelector">
            <summary>
            The CSS selector that specifies the scrollable area DOM node
            </summary>
            <default value="window" />
        </member>
        <member name="P:AntDesign.Affix.ChildContent">
            <summary>
            Additional Content
            </summary>
        </member>
        <member name="P:AntDesign.Affix.OnChange">
            <summary>
            Callback for when Affix state is changed. A boolean indicating if the Affix is currently affixed is passed.
            </summary>
        </member>
        <member name="T:AntDesign.Alert">
            <summary>
            <para>Alert component for feedback.</para>
            <h2>When To Use</h2>
            <list type="bullet">
            <item>When you need to show alert messages to users.</item>
            <item>When you need a persistent static container which is closable by user actions.</item>
            </list>
            </summary>
        </member>
        <member name="P:AntDesign.Alert.AfterClose">
            <summary>
            Called when close animation is finished
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Banner">
            <summary>
            Whether to show as banner
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Alert.Closable">
            <summary>
            Whether Alert can be closed
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Alert.CloseText">
            <summary>
            Close text to show
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Description">
            <summary>
            Additional content of Alert
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Icon">
            <summary>
            Custom icon, effective when showIcon is true
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Message">
            <summary>
            Content of Alert
            </summary>
        </member>
        <member name="P:AntDesign.Alert.MessageTemplate">
            <summary>
            Template for content
            </summary>
        </member>
        <member name="P:AntDesign.Alert.ShowIcon">
            <summary>
            Whether to show icon.
            </summary>
        </member>
        <member name="P:AntDesign.Alert.Type">
            <summary>
            Type of Alert styles, options: success, info, warning, error
            </summary>
        </member>
        <member name="P:AntDesign.Alert.OnClose">
            <summary>
            Callback when Alert is closed.
            </summary>
        </member>
        <member name="P:AntDesign.Alert.ChildContent">
            <summary>
            Additional Content
            </summary>
        </member>
        <member name="P:AntDesign.Alert.IconType">
            <summary>
            Icon to show.
            </summary>
        </member>
        <member name="F:AntDesign.Alert._isClosed">
            <summary>
            Indicator if the component is closed or not.
            </summary>
        </member>
        <member name="F:AntDesign.Alert._isClosing">
            <summary>
            Just before we close the component we set this indicator to show a closing animation.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.SetClassMap">
            <summary>
            Sets the default classes.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.OnInitialized">
            <summary>
            Start-up code.
            </summary>
        </member>
        <member name="M:AntDesign.Alert.OnCloseHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the close callback.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Anchor">
            <summary>
            <para>Hyperlinks to scroll on one page.</para>
            
            <h2>When To Use</h2>
            <para>For displaying anchor hyperlinks on page and jumping between them.</para>
            </summary>
            <seealso cref="T:AntDesign.AnchorLink" />
        </member>
        <member name="P:AntDesign.Anchor.Key">
            <summary>
            used to refresh links list when the key changed.
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.ChildContent">
            <summary>
            The content of the component.
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.Affix">
            <summary>
            Fixed mode of Anchor
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Anchor.Bounds">
            <summary>
            Bounding distance of anchor area
            </summary>
            <default value="5" />
        </member>
        <member name="P:AntDesign.Anchor.GetContainer">
            <summary>
            Scrolling container
            </summary>
            <default value="window" />
        </member>
        <member name="P:AntDesign.Anchor.OffsetBottom">
            <summary>
            Pixels to offset from bottom when calculating position of scroll
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.OffsetTop">
            <summary>
            Pixels to offset from top when calculating position of scroll
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Anchor.ShowInkInFixed">
            <summary>
            Whether show ink-balls in Fixed mode
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Anchor.OnClick">
            <summary>
            set the handler to handle click event
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.GetCurrentAnchor">
            <summary>
            Customize the anchor highlight
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.TargetOffset">
            <summary>
            Anchor scroll offset, default as <see cref="P:AntDesign.Anchor.OffsetTop"/>
            </summary>
        </member>
        <member name="P:AntDesign.Anchor.OnChange">
            <summary>
            Callback executed when the anchor changes, either by click or scrolling
            </summary>
        </member>
        <member name="T:AntDesign.AnchorLink">
            <summary>
            Link in an Anchor list. Designed to be a child of Anchor
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.ChildContent">
            <summary>
            Additional content. Does not override Title.
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Href">
            <summary>
            Target of hyperlink
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Title">
            <summary>
            Content of hyperlink
            </summary>
        </member>
        <member name="P:AntDesign.AnchorLink.Target">
            <summary>
            Specifies where to display the linked URL
            </summary>
        </member>
        <member name="T:AntDesign.AutoComplete`1">
                <summary>
                <para>Autocomplete function of input field.</para>
                 
                <h2>When To Use</h2>
                When there is a need for autocomplete functionality.
                </summary>
                <inheritdoc />
                <seealso cref="T:AntDesign.AutoCompleteOption" />
                <seealso cref="T:AntDesign.TriggerBoundaryAdjustMode"/>
        </member>
        <member name="P:AntDesign.AutoComplete`1.Placeholder">
            <summary>
            Input element placeholder
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.Disabled">
            <summary>
            Disable
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.DefaultActiveFirstOption">
            <summary>
            Make first option active by default or not
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.AutoComplete`1.Backfill">
            <summary>
            Backfill selected item into the input when using keyboard to select items
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.AutoComplete`1.DebounceMilliseconds">
            <summary>
            Delays the processing of the KeyUp event until the user has stopped
            typing for a predetermined amount of time
            </summary>
            <default value="250"/>
        </member>
        <member name="P:AntDesign.AutoComplete`1.AutoCompleteOptions">
            <summary>
            List object collection
            </summary>
        </member>
        <member name="F:AntDesign.AutoComplete`1._optionDataItems">
            <summary>
            List data collection
            </summary>
        </member>
        <member name="F:AntDesign.AutoComplete`1._options">
            <summary>
            List bound data source collection
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.Options">
            <summary>
            Options to display in dropdown
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionDataItems">
            <summary>
            Bind the data source of the list data item format
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OnSelectionChange">
            <summary>
            Callback executed when selection changes
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OnActiveChange">
            <summary>
            Callback executed when active item changes
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OnInput">
            <summary>
            Callback executed when input changes
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OnPanelVisibleChange">
            <summary>
            Callback executed when panel visibility changes
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.ChildContent">
            <summary>
            Content for dropdown
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionTemplate">
            <summary>
            Option template
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OptionFormat">
            <summary>
            Formatting options, you can customize the display format
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OverlayTemplate">
            <summary>
            All option templates
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.CompareWith">
            <summary>
            Contrast, used to compare whether two objects are the same
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.FilterExpression">
            <summary>
            Filter expression
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.AllowFilter">
            <summary>
            Allow filtering
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.AutoComplete`1.Width">
            <summary>
            Width of input, pixels when an int is given, full value given to CSS width property when a string is given
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OverlayClassName">
            <summary>
            Class name passed to overlay
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.OverlayStyle">
            <summary>
            Style passed to overlay
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.PopupContainerSelector">
            <summary>
            Container selector for the popup
            </summary>
            <default value="body" />
        </member>
        <member name="P:AntDesign.AutoComplete`1.SelectedItem">
            <summary>
            Selected item from dropdown
            </summary>
        </member>
        <member name="P:AntDesign.AutoComplete`1.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening). Check 
            </summary>
            <default value="TriggerBoundaryAdjustMode.InView"/>
        </member>
        <member name="P:AntDesign.AutoComplete`1.ShowPanel">
            <summary>
            Display options dropdown
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.AutoComplete`1.OpenPanel">
            <summary>
            Open panel
            </summary>
        </member>
        <member name="M:AntDesign.AutoComplete`1.ClosePanel">
            <summary>
            Close panel
            </summary>
        </member>
        <member name="P:AntDesign.AutoCompleteOption.ChildContent">
            <summary>
            Label for the option. Takes priority over Label
            </summary>
        </member>
        <member name="P:AntDesign.AutoCompleteOption.Value">
            <summary>
            Value for the option
            </summary>
        </member>
        <member name="P:AntDesign.AutoCompleteOption.Label">
            <summary>
            Label for the option
            </summary>
            <default value="Value.ToString()" />
        </member>
        <member name="P:AntDesign.AutoCompleteOption.Disabled">
            <summary>
            If option is disabled or not
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.AutoCompleteOption.CalcSelected">
            <summary>
            计算当前计算选择状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Avatar">
                <summary>
                <para>Avatars can be used to represent people or objects. It supports images, icons, or letters.</para>
                </summary>
                <seealso cref="T:AntDesign.AvatarGroup" />
        </member>
        <member name="P:AntDesign.Avatar.ChildContent">
            <summary>
            Content to display inside avatar shape. Takes priority over <see cref="P:AntDesign.Avatar.Text"/>
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Shape">
            <summary>
            Shape of the avatar
            </summary>
            <default value="AvatarShape.Circle"/>
        </member>
        <member name="P:AntDesign.Avatar.Size">
            <summary>
            Size of the avatar. See <see cref="T:AntDesign.AvatarSize"/> for possible values.
            </summary>
            <default value="AvatarSize.Default"/>
        </member>
        <member name="P:AntDesign.Avatar.Text">
            <summary>
            Text string to display in the avatar. Typical use is for displaying initials.
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Src">
            <summary>
            Image src for the avatar. If this fails to load, <see cref="P:AntDesign.Avatar.Icon"/> and <see cref="P:AntDesign.Avatar.ChildContent"/>/<see cref="P:AntDesign.Avatar.Text"/> will continue to show.
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.SrcSet">
            <summary>
            A list of sources to use for different screen resolutions. Passed straight to the <c>img</c> tag.
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Alt">
            <summary>
            Alternate text for the image
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Icon">
            <summary>
            Icon to display
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.OnError">
            <summary>
            Callback executed when image passed to <see cref="P:AntDesign.Avatar.Src"/> fails to load
            </summary>
        </member>
        <member name="P:AntDesign.Avatar.Overflow">
            <summary>
            more than group max count
            </summary>
        </member>
        <member name="P:AntDesign.AvatarGroup.ChildContent">
            <summary>
            The child content
            </summary>
        </member>
        <member name="P:AntDesign.AvatarGroup.MaxCount">
            <summary>
            Max avatars to show
            </summary>
        </member>
        <member name="P:AntDesign.AvatarGroup.MaxStyle">
            <summary>
            The style of excess avatar style
            </summary>
        </member>
        <member name="P:AntDesign.AvatarGroup.MaxPopoverPlacement">
            <summary>
            The placement of excess avatar Popover
            </summary>
        </member>
        <member name="T:AntDesign.BackTop">
                <summary>
                <para>Makes it easy to go back to the top of the page.</para>
                
                <h2>When To Use</h2>
                <list type="bullet">
                    <item>When the page content is very long.</item>
                    <item>When you need to go back to the top very frequently in order to view the contents.</item>
                </list>
                </summary>
        </member>
        <member name="P:AntDesign.BackTop.Icon">
            <summary>
            Icon for the button
            </summary>
            <default value="vertical-align-top" />
        </member>
        <member name="P:AntDesign.BackTop.ChildContent">
            <summary>
            Content for the button. Takes priority over icon.
            </summary>
        </member>
        <member name="P:AntDesign.BackTop.VisibilityHeight">
            <summary>
            Scroll offset at which the button becomes visible, in px
            </summary>
            <default value="400" />
        </member>
        <member name="P:AntDesign.BackTop.TargetSelector">
            <summary>
            The scrollable area the button is for
            </summary>
            <default value="window" />
        </member>
        <member name="P:AntDesign.BackTop.OnClick">
            <summary>
            Callback executed when BackTop gets clicked. Won't override default functionality.
            </summary>
        </member>
        <member name="T:AntDesign.Badge">
                <summary>
                    <para>Small numerical value or status descriptor for UI elements.</para>
            
                    <h2>When To Use</h2>
            
                    <para>Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.</para>
                </summary>
                <seealso cref="T:AntDesign.BadgeRibbon" />
        </member>
        <member name="P:AntDesign.Badge.Color">
            <summary>
            Customize Badge status dot color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.PresetColor">
            <summary>
            Set Badge status dot to a preset color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Count">
            <summary>
            Number to show in badge
            </summary>
        </member>
        <member name="P:AntDesign.Badge.CountTemplate">
            <summary>
            Template to show in place of Count
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Dot">
            <summary>
            Whether to display a dot instead of count
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Badge.Offset">
            <summary>
            Set offset of the badge dot, like (left, top)
            </summary>
        </member>
        <member name="P:AntDesign.Badge.OverflowCount">
            <summary>
            Max count to show
            </summary>
            <default value="99"/>
        </member>
        <member name="P:AntDesign.Badge.ShowZero">
            <summary>
            Whether to show badge when count is zero
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Badge.Status">
            <summary>
            Set Badge dot to a status color. Usage of this parameter will make the badge a status dot.
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Text">
            <summary>
            The display text next to the status dot
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Title">
            <summary>
            Text to show when hovering over the badge. Defaults to the value of Count
            </summary>
        </member>
        <member name="P:AntDesign.Badge.Size">
            <summary>
            Size of the badge
            </summary>
        </member>
        <member name="P:AntDesign.Badge.ChildContent">
            <summary>
            Wrapping this item.
            </summary>
        </member>
        <member name="M:AntDesign.Badge.SetClassMap">
            <summary>
            Sets the default CSS classes.
            </summary>
        </member>
        <member name="M:AntDesign.Badge.OnInitialized">
            <summary>
            Startup code
            </summary>
        </member>
        <member name="T:AntDesign.BadgeRibbon">
            <summary>
            Small numerical value or status descriptor for UI elements.
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Color">
            <summary>
            Customize ribbon color
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Text">
            <summary>
            Text string of ribbon.
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.TextTemplate">
            <summary>
            Text content of the ribbon. Takes priority over <see cref="P:AntDesign.BadgeRibbon.Text"/>
            </summary>
        </member>
        <member name="P:AntDesign.BadgeRibbon.Placement">
            <summary>
            Set placement of ribbon.
            </summary>
            <default value="end"/>
        </member>
        <member name="P:AntDesign.BadgeRibbon.ChildContent">
            <summary>
            Wrapping this item.
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.SetClassMap">
            <summary>
            Sets the default CSS classes.
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.OnInitialized">
            <summary>
            Startup code
            </summary>
        </member>
        <member name="M:AntDesign.BadgeRibbon.OnParametersSet">
            <summary>
            Runs every time a parameter is set.
            </summary>
        </member>
        <member name="T:AntDesign.Breadcrumb">
                <summary>
                    <para>A breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.</para>
            
                    When To Use
            
                    <list type="bullet">
                        <item>When the system has more than two layers in a hierarchy.</item>
                        <item>When you need to inform the user of where they are.</item>
                        <item>When the user may need to navigate back to a higher level.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.BreadcrumbItem" />
        </member>
        <member name="P:AntDesign.Breadcrumb.ChildContent">
            <summary>
            Content of the Breadcrumb. Should contain BreadcrumbItem elements
            </summary>
        </member>
        <member name="P:AntDesign.Breadcrumb.AutoGenerate">
            <summary>
            Not currently used. Planned for future development.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Breadcrumb.Separator">
            <summary>
            Separator between items
            </summary>
            <default value="/" />
        </member>
        <member name="T:AntDesign.BreadcrumbOption">
            <summary>
            Not currently used. Planned for future development.
            </summary>
        </member>
        <member name="T:AntDesign.Button">
                <summary>
                    <para>To trigger an operation.</para>
            
                    <h2>When To Use</h2>
            
                    <para>A button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.</para>
                    <para>In Ant Design we provide 4 types of button.</para>
            
                    <list type="bullet">
                        <item>Primary button: indicate the main action, one primary button at most in one section.</item>
                        <item>Default button: indicate a series of actions without priority.</item>
                        <item>Dashed button: used for adding action commonly.</item>
                        <item>Link button: used for external links.</item>
                    </list>
            
                    <para>And 4 other properties additionally.</para>
            
                    <list type="bullet">
                        <item><c>Danger</c>: used for actions of risk, like deletion or authorization.</item>
                        <item><c>Ghost</c>: used in situations with complex background, home pages usually.</item>
                        <item><c>Disabled</c>: when actions is not available.</item>
                        <item><c>Loading</c>: add loading spinner in button, avoiding multiple submits too.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.DownloadButton" />
        </member>
        <member name="P:AntDesign.Button.AriaLabel">
            <summary>
            Sets the value of the aria-label attribute
            </summary>
        </member>
        <member name="P:AntDesign.Button.Color">
            <summary>
            Set the color of the button.
            </summary>
            <default value="Color.None" />
        </member>
        <member name="P:AntDesign.Button.Block">
            <summary>
            Option to fit button width to its parent width
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.ChildContent">
            <summary>
            Content of the button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Danger">
            <summary>
            Set the danger status of button.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.Disabled">
            <summary>
            Whether the `Button` is disabled.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.Ghost">
            <summary>
            Make background transparent and invert text and border colors
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.HtmlType">
            <summary>
            Set the original html type of the button element.
            </summary>
            <default value="button" />
        </member>
        <member name="P:AntDesign.Button.Icon">
            <summary>
            Set the icon component of button.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Loading">
            <summary>
            Show loading indicator. You have to write the loading logic on your own.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Button.AutoLoading">
            <summary>
            Whether to trigger and keep the loading state until the event callback is done.
            </summary>
        </member>
        <member name="P:AntDesign.Button.OnClick">
            <summary>
            Callback when `Button` is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Button.OnClickStopPropagation">
            <summary>
            Do not propagate events when button is clicked.
            </summary>
        </member>
        <member name="P:AntDesign.Button.Shape">
            <summary>
            Can set button shape: `circle` | `round` or `null` (default, which is rectangle).
            </summary>
            <default value="null" />
        </member>
        <member name="P:AntDesign.Button.Size">
            <summary>
            Set the size of button.
            </summary>
            <default value="ButtonSize.Default" />
        </member>
        <member name="P:AntDesign.Button.Type">
            <summary>
            Type of the button.
            </summary>
            <default value="ButtonType.Default" />
        </member>
        <member name="P:AntDesign.Button.NoSpanWrap">
            <summary>
            Do not wrap with &lt;span&gt;
            </summary>
        </member>
        <member name="T:AntDesign.DownloadButton">
            <summary>
            Use to download a file. inherits <see cref="T:AntDesign.Button"/>
            </summary>
        </member>
        <member name="P:AntDesign.DownloadButton.Url">
            <summary>
            The download url of a file
            </summary>
        </member>
        <member name="P:AntDesign.DownloadButton.FileName">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="T:AntDesign.Calendar">
                <summary>
                <para>Container for displaying data in calendar form.</para>
            
                <h2>When To Use</h2>
            
                <para>When data is in the form of dates, such as schedules, timetables, prices calendar, lunar calendar. This component also supports Year/Month switch.</para>
                </summary>
        </member>
        <member name="P:AntDesign.Calendar.Value">
            <summary>
            Selected value for calendar
            </summary>
            <default value="DateTime.Now"/>
        </member>
        <member name="P:AntDesign.Calendar.DefaultValue">
            <summary>
            Default value for selected date. When set, will set <see cref="P:AntDesign.Calendar.Value"/>
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.ValidRange">
            <summary>
            Validate range of dates or selection
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.Mode">
            <summary>
            Display mode. See <see cref="T:AntDesign.CalendarMode"/> for valid options
            </summary>
            <default value="CalendarMode.Month"/>
        </member>
        <member name="P:AntDesign.Calendar.FullScreen">
            <summary>
            Whether the calendar should take up all available space or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Calendar.OnSelect">
            <summary>
            Callback executed when a date is selected
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.OnChange">
            <summary>
            Callback executed when a date is selected
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.HeaderRender">
            <summary>
            Function to render a custom header
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.DateCellRender">
            <summary>
            Customize the display of the date cell, the returned content will be appended to the cell
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.DateFullCellRender">
            <summary>
            Customize the display of the date cell, the returned content will override the cell
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.MonthCellRender">
            <summary>
            Customize the display of the month cell, the returned content will be appended to the cell
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.MonthFullCellRender">
            <summary>
            Customize the display of the month cell, the returned content will override the cell
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.OnPanelChange">
            <summary>
            Callback executed when the type of calendar being viewed changes
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.DisabledDate">
            <summary>
            Function to determine if a specific date is disabled
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.Locale">
            <summary>
            Locale information for UI and date formatting
            </summary>
        </member>
        <member name="P:AntDesign.Calendar.CultureInfo">
            <summary>
            Culture information used for formatting
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.ParentTrigger">
            <summary>
            Used in nested overlays (for example menu -> submenu) when
            trigger is another overlay.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.Trigger">
            <summary>
            Component that will trigger the overlay to show.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.VerticalOffset">
            <summary>
            vertical offset between Trigger and Overlay, default is 4
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.HorizontalOffset">
            <summary>
            horizontal offset between Trigger and Overlay, default is 4
            </summary>
        </member>
        <member name="P:AntDesign.Internal.Overlay.HiddenMode">
            <summary>
            By default Overlay does not render its content if Overlay hasn't been
            activated (shown at least once). Setting HiddenMode = true will
            go through rendering process.
            Use case: Select component, when using <see cref="T:AntDesign.SimpleSelectOption"/> or <see cref="T:AntDesign.SelectOption`2"/>
            needs HiddenMode = true, so the select options are initialized and
            potential defaults can be rendered properly.
            </summary>
        </member>
        <member name="M:AntDesign.Internal.Overlay.UpdateChildState(AntDesign.Internal.Overlay,System.Boolean)">
            <summary>
            set if there any child overlay show or hide
            overlay would not hide if any child is showing
            </summary>
            <param name="child"></param>
            <param name="isChildOverlayShow"></param>
        </member>
        <member name="M:AntDesign.Internal.Overlay.IsHiding">
            <summary>
            when overlay is complete hide, IsPopup return true
            when overlay is hiding(playing hide animation), IsPopup return false, IsHiding return true.
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.Internal.Overlay._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="M:AntDesign.Internal.Overlay.WaitFor(System.Func{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Will probe a check predicate every given milliseconds until predicate is true or until
            runs out of number of probings.
            </summary>
            <param name="check">A predicate that will be run every time after waitTimeInMilisecondsPerProbing will pass.</param>
            <param name="probings">Maximum number of probings. After this number is reached, the method finishes.</param>
            <param name="waitTimeInMilisecondsPerProbing">How long to wait between each probing.</param>
            <returns>Task</returns>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening). Check
            enum for details.
            </summary>
            <default value="TriggerBoundaryAdjustMode.InView" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.ChildContent">
            <summary>
            Trigger (link, button, etc)
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.ComplexAutoCloseAndVisible">
            <summary>
            Whether need both auto-off and Visible control closing.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Disabled">
            <summary>
            Whether the trigger is disabled.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.HiddenMode">
            <summary>
            Property forwarded to Overlay component. Consult the Overlay
            property for more detailed explanation.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.InlineFlexMode">
            <summary>
            (not used in Unbound) Sets wrapping div style to `display: inline-flex;`.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.IsButton">
            <summary>
            Behave like a button: when clicked invoke OnClick
            (unless OnClickDiv is overriden and does not call base).
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnClick">
            <summary>
            Callback when triggger is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMaskClick">
            <summary>
             Callback - equivalent of OnMouseUp event on the trigger trigger.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseEnter">
            <summary>
            Callback when mouse enters trigger boundaries.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnMouseLeave">
            <summary>
            Callback when mouse leaves trigger boundaries.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnOverlayHiding">
            <summary>
            Callback when overlay is hiding.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OnVisibleChange">
            <summary>
            Callback when overlay visibility is changing.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Overlay">
            <summary>
            Overlay content (what will be rendered after trigger is activated)
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayClassName">
            <summary>
            Overlay container custom css class.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayEnterCls">
            <summary>
            Css class added to overlay when overlay is shown.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayHiddenCls">
            <summary>
            Css class added to overlay when overlay is hidden.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayLeaveCls">
            <summary>
            Css class added to overlay when overlay is hiding.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.OverlayStyle">
            <summary>
            Css style that will be added to overlay div.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Placement">
            <summary>
            The position of the Dropdown overlay relative to the target. 
            Can be: Top, Left, Right, Bottom, TopLeft, TopRight, BottomLeft, BottomRight, LeftTop, LeftBottom, RightTop, RightBottom
            </summary>
            <default value="PlacementType.BottomLeft" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.PlacementCls">
            <summary>
            Override default placement class which is based on `Placement` parameter.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.PopupContainerSelector">
            <summary>
            Define what is going to be the container of the overlay.
            Example use case: when overlay has to be contained in a
            scrollable area.
            </summary>
            <default value="body" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Trigger">
            <summary>
            Trigger mode. Could be multiple by passing an array.
            </summary>
            <default value="TriggerType.Hover" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.TriggerCls">
            <summary>
            The trigger element CSS class.
            </summary>
            <default value="ant-dropdown-trigger" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.TriggerReference">
            <summary>
            Manually set reference to triggering element.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Unbound">
            <summary>
            ChildElement with ElementReference set to avoid wrapping div.
            </summary>
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.Visible">
            <summary>
            Toggles overlay viability.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Internal.OverlayTrigger.VisibleChanged">
            <summary>
            Callback when visibility is changed.
            </summary>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handle the trigger click.
            </summary>
            <param name="args">MouseEventArgs</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.OnMouseUp(System.Text.Json.JsonElement)">
            <summary>
            on document mouse up
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.Close">
            <summary>
            Will hide the overlay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.IsOverlayShow">
            <summary>
            Checks if overlay is currently in visible state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Internal.OverlayTrigger.SetVisible(System.Boolean)">
            <summary>
            Toggle overlay visibility.
            </summary>
            <param name="visible">boolean: visibility true/false</param>
        </member>
        <member name="M:AntDesign.Internal.DateTimeInputMaskConverter.Convert(System.String,System.String)">
            <summary>
            Convert string value to mask
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Card">
                <summary>
                    <para>Simple rectangular container.</para>
            
                    <h2>When To Use</h2>
                    
                    <list type="bullet">
                        <item>A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.CardGrid"/>
                <seealso cref="T:AntDesign.CardMeta"/>
                <seealso cref="T:AntDesign.CardAction"/>
        </member>
        <member name="P:AntDesign.Card.ChildContent">
            <summary>
            Content for the card's body. Shown below <see cref="P:AntDesign.Card.Body"/>
            </summary>
        </member>
        <member name="P:AntDesign.Card.Body">
            <summary>
            Content for the card's body. Shown above <see cref="P:AntDesign.Card.ChildContent"/>
            </summary>
        </member>
        <member name="P:AntDesign.Card.ActionTemplate">
            <summary>
            Content to put in the actions section of the card. Takes priority over <see cref="P:AntDesign.Card.Actions"/>
            </summary>
        </member>
        <member name="P:AntDesign.Card.Bordered">
            <summary>
            Toggles rendering of the border around the card
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Card.Hoverable">
            <summary>
            Make card hoverable
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Card.Loading">
            <summary>
            Shows a loading indicator while the contents of the card are being fetched
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Card.BodyStyle">
            <summary>
            Style string for body section
            </summary>
        </member>
        <member name="P:AntDesign.Card.Cover">
            <summary>
            Cover content for card. Displayed below header and above body
            </summary>
        </member>
        <member name="P:AntDesign.Card.Actions">
            <summary>
            Actions for the card
            </summary>
        </member>
        <member name="P:AntDesign.Card.Type">
            <summary>
            Card style type, can be set to inner or not set
            </summary>
        </member>
        <member name="P:AntDesign.Card.Size">
            <summary>
            Size of the card
            </summary>
        </member>
        <member name="P:AntDesign.Card.Title">
            <summary>
            Title string for header
            </summary>
        </member>
        <member name="P:AntDesign.Card.TitleTemplate">
            <summary>
            Title content for header. Takes priority over <see cref="P:AntDesign.Card.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.Card.Extra">
            <summary>
            Content to render in the top-right corner of the card
            </summary>
        </member>
        <member name="T:AntDesign.CardAction">
            <summary>
            Easy way to set the action of the card.
            </summary>
        </member>
        <member name="P:AntDesign.CardAction.ChildContent">
            <summary>
            The action of the card.
            </summary>
        </member>
        <member name="P:AntDesign.CardGrid.ChildContent">
            <summary>
            Content for that section of the grid
            </summary>
        </member>
        <member name="P:AntDesign.CardGrid.Hoverable">
            <summary>
            If the section should be hoverable. Adds dropshadow and lifts up when hovered if true.
            </summary>
            <default value="false"/>
        </member>
        <member name="T:AntDesign.Carousel">
                <summary>
                    <para>A carousel component. Scales with its container.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>When there is a group of content on the same level.</item>
                        <item>When there is insufficient content space, it can be used to save space in the form of a revolving door.</item>
                        <item>Commonly used for a group of pictures/cards.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.CarouselSlick"/>
        </member>
        <member name="P:AntDesign.Carousel.ChildContent">
            <summary>
            Content of the carousel. Typically <see cref="T:AntDesign.CarouselSlick"/> elements
            </summary>
        </member>
        <member name="P:AntDesign.Carousel.DotPosition">
            <summary>
            The position of the dots, which can be one of Top, Bottom, Left or Right, <see cref="T:AntDesign.CarouselDotPosition"/>
            </summary>
        </member>
        <member name="P:AntDesign.Carousel.Autoplay">
            <summary>
            Whether to scroll automatically
            </summary>
        </member>
        <member name="P:AntDesign.Carousel.Effect">
            <summary>
            Transition effect, <see cref="T:AntDesign.CarouselEffect"/>
            </summary>
        </member>
        <member name="M:AntDesign.Carousel.Next">
            <summary>
            Slides the carousel to the next slide
            </summary>
        </member>
        <member name="M:AntDesign.Carousel.Previous">
            <summary>
            Slides the carousel to the previous slide
            </summary>
        </member>
        <member name="M:AntDesign.Carousel.GoTo(System.Int32)">
            <summary>
            Slides the carousel to the specified slide
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AntDesign.CarouselSlick.ChildContent">
            <summary>
            Content to display when on this part of the carousel
            </summary>
        </member>
        <member name="T:AntDesign.Cascader">
                <summary>
                    <para>Cascade selection box.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>When you need to select from a set of associated data set. Such as province/city/district, company level, things classification.</item>
                        <item>When selecting from a large data set, with multi-stage classification separated for easy selection.</item>
                        <item>Chooses cascade items in one float layer for better user experience.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.CascaderNode"/>
                <seealso cref="T:AntDesign.TriggerBoundaryAdjustMode"/>
        </member>
        <member name="P:AntDesign.Cascader.ChangeOnSelect">
            <summary>
            Change value on each selection if set to true, only chage on final selection if false.
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.DefaultValue">
            <summary>
            Initially selected value
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.ExpandTrigger">
            <summary>
            When to expand the current item - click or hover
            </summary>
            <default value="click" />
        </member>
        <member name="P:AntDesign.Cascader.NotFoundContent">
            <summary>
            Empty description for when not found
            </summary>
            <default value="No Data (in current locale)" />
        </member>
        <member name="P:AntDesign.Cascader.ShowSearch">
            <summary>
            Allow searching or not
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.OnChange">
            <summary>
            Callback executed when the selected value changes
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.SelectedNodesChanged">
            <summary>
            Callback executed when the selected value changes
            </summary>
        </member>
        <member name="P:AntDesign.Cascader.Options">
            <summary>
            Options for the overlay
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.InputOnToggle">
            <summary>
            输入框单击(显示/隐藏浮层)
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.CascaderOnBlur">
            <summary>
            输入框/浮层失去焦点(隐藏浮层)
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.ClearSelected">
            <summary>
            清除已选择项
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.NodeOnClick(AntDesign.CascaderNode)">
            <summary>
            下拉节点单击
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AntDesign.Cascader.NodeOnMouseOver(AntDesign.CascaderNode)">
            <summary>
            下拉节点移入
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetSelectedNode(AntDesign.CascaderNode,AntDesign.SelectedTypeEnum)">
            <summary>
            Selected nodes
            </summary>
            <param name="cascaderNode"></param>
            <param name="selectedType"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetSelectedNodeWithParent(AntDesign.CascaderNode,System.Collections.Generic.List{AntDesign.CascaderNode}@)">
            <summary>
            Set all parent nodes to be selected
            </summary>
            <param name="node"></param>
            <param name="list"></param>
        </member>
        <member name="M:AntDesign.Cascader.ProcessParentAndDefault">
            <summary>
            handles parent nodes and defaults after Options updating
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.InitCascaderNodeState(System.Collections.Generic.List{AntDesign.CascaderNode},AntDesign.CascaderNode,System.Int32,System.Boolean)">
            <summary>
            Initialize nodes (Level, ParentNode)
            </summary>
            <param name="list"></param>
            <param name="parentNode"></param>
            <param name="level"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:AntDesign.Cascader.RefreshNodeValue(System.String)">
            <summary>
            Refresh the selected value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetDefaultValue(System.String)">
            <summary>
            Set the default value
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="M:AntDesign.Cascader.SetValue(System.String)">
            <summary>
            Set the binding value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Cascader.RefreshDisplayText">
            <summary>
            rebuild the display text
            </summary>
        </member>
        <member name="M:AntDesign.Cascader.GetNodeByValue(System.Collections.Generic.IEnumerable{AntDesign.CascaderNode},System.String)">
            <summary>
            Get the node based on the specified value
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.CascaderNode.Label">
            <summary>
            Label displayed for value
            </summary>
        </member>
        <member name="P:AntDesign.CascaderNode.Value">
            <summary>
            Value for when option is selected
            </summary>
        </member>
        <member name="P:AntDesign.CascaderNode.Disabled">
            <summary>
            Disable the option or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.CascaderNode.Children">
            <summary>
            Options under this one
            </summary>
        </member>
        <member name="T:AntDesign.Checkbox">
                <summary>
                <para>Checkbox component.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>Used for selecting multiple values from several options.</item>
                    <item>If you use only one checkbox, it is the same as using Switch to toggle between two states. </item>
                </list>
            
                <para>The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.</para>
                </summary>
                <seealso cref="P:AntDesign.Checkbox.CheckboxGroup"/>
        </member>
        <member name="P:AntDesign.Checkbox.ChildContent">
            <summary>
            Content to display next to checkbox
            </summary>
        </member>
        <member name="P:AntDesign.Checkbox.CheckedChange">
            <summary>
            Callback executed when checked state changes
            </summary>
        </member>
        <member name="P:AntDesign.Checkbox.Indeterminate">
            <summary>
            Indeterminate checked state of checkbox
            </summary>
        </member>
        <member name="P:AntDesign.Checkbox.Label">
            <summary>
            Label for checkbox
            </summary>
        </member>
        <member name="T:AntDesign.CheckboxGroup`1">
            <summary>
            Display a group of related checkboxes
            </summary>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.ChildContent">
            <summary>
            Display content in the group. Use <see cref="P:AntDesign.CheckboxGroup`1.MixedMode"/> to specify where this should render if using with <see cref="P:AntDesign.CheckboxGroup`1.Options"/>
            </summary>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.Options">
            <summary>
            Options for checkboxes
            </summary>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.MixedMode">
            <summary>
            When both <see cref="P:AntDesign.CheckboxGroup`1.ChildContent"/> and <see cref="P:AntDesign.CheckboxGroup`1.Options"/> are used this specifies which should render first.
            </summary>
            <default value="CheckboxGroupMixedMode.ChildContentFirst"/>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.OnChange">
            <summary>
            Callback executed when the checked options change
            </summary>
        </member>
        <member name="P:AntDesign.CheckboxGroup`1.Disabled">
            <summary>
            Disable all checkboxes in the group
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.CheckboxGroup`1.OnCheckboxChange(AntDesign.Checkbox,System.Boolean)">
            <summary>
            Called when [checkbox change].
            </summary>
            <param name="checkbox">The checkbox.</param>
            <param name="invokeOnChange">Flag for whether or not to depart for a change event.</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Collapse">
                <summary>
                    <para>A content area which can be collapsed and expanded.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>Can be used to group or hide complex regions to keep the page clean.</item>
                        <item><c>Accordion</c> is a special kind of <c>Collapse</c>, which allows only one panel to be expanded at a time.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.Panel"/>
        </member>
        <member name="P:AntDesign.Collapse.Accordion">
            <summary>
            Enable/disable accordion mode. When true, only one panel can be open at once. When opening another the rest collapse.
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Collapse.Bordered">
            <summary>
            Enable/disable border
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.Collapse.ExpandIconPosition">
            <summary>
            Expand icon position
            </summary>
            <default value="CollapseExpandIconPosition.Left"/>
        </member>
        <member name="P:AntDesign.Collapse.DefaultActiveKey">
            <summary>
            Default <see cref="T:AntDesign.Panel"/> element's <see cref="P:AntDesign.Panel.Key"/>
            </summary>
        </member>
        <member name="P:AntDesign.Collapse.OnChange">
            <summary>
            Callback executed when open panels change
            </summary>
        </member>
        <member name="P:AntDesign.Collapse.ExpandIcon">
            <summary>
            Icon to display in <see cref="P:AntDesign.Collapse.ExpandIconPosition"/>
            </summary>
            <default value="right"/>
        </member>
        <member name="P:AntDesign.Collapse.ExpandIconTemplate">
            <summary>
            Expand icon content to display in <see cref="P:AntDesign.Collapse.ExpandIconPosition"/>. Takes priority over <see cref="P:AntDesign.Collapse.ExpandIcon"/>
            </summary>
        </member>
        <member name="P:AntDesign.Collapse.Animation">
            <summary>
            Whether enable the expand/collapse animation
            </summary>
        </member>
        <member name="P:AntDesign.Collapse.ChildContent">
            <summary>
            Content of the collapse. Typically contains <see cref="T:AntDesign.Panel"/> elements
            </summary>
        </member>
        <member name="M:AntDesign.Collapse.Activate(System.String[])">
            <summary>
            Activate the specified panels
            </summary>
            <param name="activeKeys"></param>
        </member>
        <member name="M:AntDesign.Collapse.Deactivate(System.String[])">
            <summary>
            Deactivate the specified panels
            </summary>
            <param name="inactiveKeys"></param>
        </member>
        <member name="P:AntDesign.Panel.Active">
            <summary>
            If the panel is active or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Panel.Key">
            <summary>
            Unique identifier for the panel
            </summary>
        </member>
        <member name="P:AntDesign.Panel.Disabled">
            <summary>
            If true, the panel cannot be opened or closed.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Panel.ShowArrow">
            <summary>
            Display an arrow or not for the panel
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Panel.Extra">
            <summary>
            Extra string for the corner of the panel
            </summary>
        </member>
        <member name="P:AntDesign.Panel.ExtraTemplate">
            <summary>
            Extra content for the corner of the panel. Takes priority over <see cref="P:AntDesign.Panel.Extra"/>
            </summary>
        </member>
        <member name="P:AntDesign.Panel.Header">
            <summary>
            Header string for the panel
            </summary>
        </member>
        <member name="P:AntDesign.Panel.HeaderTemplate">
            <summary>
            Header content for the panel. Takes priority over <see cref="P:AntDesign.Panel.Header"/>
            </summary>
        </member>
        <member name="P:AntDesign.Panel.OnActiveChange">
            <summary>
            Callback executed when this panel's active status changes
            </summary>
        </member>
        <member name="P:AntDesign.Panel.ChildContent">
            <summary>
            Content for the panel.
            </summary>
        </member>
        <member name="M:AntDesign.Panel.SetActive(System.Boolean)">
            <summary>
            Set the active state of the panel
            </summary>
            <param name="active"></param>
        </member>
        <member name="M:AntDesign.Panel.Toggle">
            <summary>
            Toggle the active state of the panel
            </summary>
        </member>
        <member name="T:AntDesign.Comment">
                <summary>
                <para>A comment displays user feedback and discussion to website content.</para>
            
                <h2>When To Use</h2>
            
                <para>Comments can be used to enable discussions on an entity such as a page, blog post, issue or other.</para>
                </summary>
        </member>
        <member name="P:AntDesign.Comment.Author">
            <summary>
            Author string
            </summary>
        </member>
        <member name="P:AntDesign.Comment.AuthorTemplate">
            <summary>
            Author content. Takes priority over <see cref="P:AntDesign.Comment.Author"/>
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Avatar">
            <summary>
            Avatar string. Gets passed as the <see cref="P:AntDesign.Avatar.Src"/> to the <see cref="T:AntDesign.Avatar"/> component.
            </summary>
        </member>
        <member name="P:AntDesign.Comment.AvatarTemplate">
            <summary>
            Avatar content. Takes priority over <see cref="P:AntDesign.Comment.Avatar"/>
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Content">
            <summary>
            Content string for the comment
            </summary>
        </member>
        <member name="P:AntDesign.Comment.ContentTemplate">
            <summary>
            Content for the comment. Takes priority over <see cref="P:AntDesign.Comment.Content"/>
            </summary>
        </member>
        <member name="P:AntDesign.Comment.ChildContent">
            <summary>
            Used primarily for nesting comments for functionality such as replies
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Datetime">
            <summary>
            Date string for the comment
            </summary>
        </member>
        <member name="P:AntDesign.Comment.DatetimeTemplate">
            <summary>
            Date content for the comment. Takes priority over <see cref="P:AntDesign.Comment.Datetime"/>
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Actions">
            <summary>
            List of actions to show at the bottm of the comment
            </summary>
        </member>
        <member name="P:AntDesign.Comment.Placement">
            <summary>
            Sets the direction of the comment with <see cref="T:AntDesign.CommentPlacement" />.
            </summary>
            <default value="left"/>
        </member>
        <member name="P:AntDesign.AntComponentBase.RefBack">
            <summary>
            A <see cref="T:AntDesign.ForwardRef" /> instance. You can get a reference to the internal DOM by using <see cref="P:AntDesign.ForwardRef.Current" />.
            </summary>
        </member>
        <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,System.Boolean)">
            <summary>
            Standard Focus. From Net5 uses Blazor extension method on ElementReference.
            Before, uses JS implemented exactly the same as Net5 JS.
            </summary>
            <param name="target">Element that will receive focus.</param>
            <param name="preventScroll">Whether to scroll to focused element</param>
        </member>
        <member name="M:AntDesign.AntComponentBase.FocusAsync(Microsoft.AspNetCore.Components.ElementReference,AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus with behaviors. Behavior will work only for elements that are
            HTMLInputElement or HTMLTextAreaElement. Otherwise will only focus.
            </summary>
            <param name="target">Element that will receive focus.</param>
            <param name="behavior">Behavior of focused element</param>
            <param name="preventScroll">Whether to scroll to focused element</param>
        </member>
        <member name="M:AntDesign.AntComponentBase.BlurAsync(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Standard Blur. Uses JS interop.
            </summary>
            <param name="target">Element that will receive focus.</param>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Id">
            <summary>
            ID for the component's HTML
            </summary>
            <default value="Uniquely Generated ID" />
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Ref">
            <summary>
            Returned ElementRef reference for DOM element.
            It would set the value into <see cref="P:AntDesign.AntComponentBase.RefBack"/> that user can get the <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> outside.
            </summary>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Class">
            <summary>
            Specifies one or more class names for an DOM element.
            </summary>
        </member>
        <member name="P:AntDesign.AntDomComponentBase.Style">
            <summary>
            Specifies an inline style for a DOM element.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.AutoFocus">
            <summary>
            Whether to autofocus on the input or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.Checked">
            <summary>
            If the input is checked or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.OnChange">
            <summary>
            Callback executed when the input changes
            </summary>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.CheckedChanged">
            <summary>
            Gets or sets a callback that updates the bound checked value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputBoolComponentBase.Disabled">
            <summary>
            Disable the input
            </summary>
            <default value="false"/>
        </member>
        <member name="T:AntDesign.AntInputComponentBase`1">
            <summary>
            Base class for any input control that optionally supports an <see cref="P:AntDesign.AntInputComponentBase`1.EditContext"/>.
            reference:https://github.com/dotnet/aspnetcore/blob/master/src/Components/Web/src/Forms/InputBase.cs
            </summary>
            <typeparam name="TValue">the natural type of the input's value</typeparam>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValidationMessages">
            <summary>
            Validation messages for the FormItem
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.AdditionalAttributes">
            <summary>
            Gets or sets a collection of additional attributes that will be applied to the created element.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValueChanged">
            <summary>
            Callback that updates the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValueExpression">
            <summary>
            An expression that identifies the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.ValuesExpression">
            <summary>
            An expression that identifies the enumerable of bound values.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.Size">
            <summary>
            The size of the input box. Note: in the context of a form,
            `InputSize.Large` is used. Available: `InputSize.Large` `InputSize.Default` `InputSize.Small`
            </summary>
            <default value="InputSize.Default"/>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CultureInfo">
            <summary>
            What Culture will be used when converting string to value and value to string
            Useful for InputNumber component.
            </summary>
            <default value="CultureInfo.CurrentCulture"/>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.EditContext">
            <summary>
            Gets the associated <see cref="P:AntDesign.AntInputComponentBase`1.EditContext"/>.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.FieldIdentifier">
            <summary>
            Gets the <see cref="P:AntDesign.AntInputComponentBase`1.FieldIdentifier"/> for the bound value.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CurrentValue">
            <summary>
            Gets or sets the current value of the input.
            </summary>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString">
            <summary>
            Gets or sets the current value of the input, represented as a string.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Forms.InputBase`1"/>.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.FormatValueAsString(`0)">
            <summary>
            Formats the value as a string. Derived classes can override this to determine the formating used for <see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString"/>.
            </summary>
            <param name="value">The value to format.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <summary>
            Parses a string to create an instance of <typeparamref name="TValue"/>. Derived classes can override this to change how
            <see cref="P:AntDesign.AntInputComponentBase`1.CurrentValueAsString"/> interprets incoming values.
            </summary>
            <param name="value">The string value to be parsed.</param>
            <param name="result">An instance of <typeparamref name="TValue"/>.</param>
            <param name="validationErrorMessage">If the value could not be parsed, provides a validation error message.</param>
            <returns>True if the value could be parsed; otherwise false.</returns>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.OnValueChange(`0)">
            <summary>
            When this method is called, Value is only has been modified, but the ValueChanged is not triggered, so the outside bound Value is not changed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.OnValueChangeAsync(`0)">
            <summary>
            When this method is called, Value is only has been modified, but the ValueChanged is not triggered, so the outside bound Value is not changed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.OnCurrentValueChange(`0)">
            <summary>
            When this method is called, Value and CurrentValue have been modified, and the ValueChanged has been triggered, so the outside bound Value is changed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AntDesign.AntInputComponentBase`1.NameAttributeValue">
            <summary>
            Gets the value to be used for the input's "name" attribute.
            </summary>
        </member>
        <member name="M:AntDesign.AntInputComponentBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.TemplateComponentBase`1">
            <summary>
            
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
        </member>
        <member name="P:AntDesign.TemplateComponentBase`1.Options">
            <summary>
            The options that allow you to pass in templates from the outside
            </summary>
        </member>
        <member name="T:AntDesign.CloseEventArgs`1">
            <summary>
            Can be used to conditionally block closing events
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AntDesign.CloseEventArgs`1.Cancel">
            <summary>
            If true, the component will be prevented from closing
            </summary>
        </member>
        <member name="T:AntDesign.Color">
            <summary>
            Ant Design Color: https://ant.design/docs/spec/colors
            </summary>
        </member>
        <member name="M:AntDesign.Core.Extensions.ArrayExtensions.Scroll``1(``0[],System.Int32)">
            <summary>
            scroll left the elements
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceArray"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Append text if condition is <c>true</c>
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCode`1">
            <summary>
            Provides a hash comparison of two parameter values
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCode`1.HashCodeEquals(`0,`0)">
            <summary>
            Calculate whether the hash of two parameter values is equal
            </summary>
            <param name="parameter1">Parameter 1</param>
            <param name="parameter2">Parameter 2</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCode`1.GetHashCode(`0)">
            <summary>
            Calculate the hash value of the parameter
            </summary>
            <param name="parameter">Parameter</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeExtensions">
            <summary>
            Provide HashCode calculation of component parameters and other functions
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeExtensions.GetParametersHashCode``1(``0)">
            <summary>
            Compute the HashCode for all parameters
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="component">Component</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider">
            <summary>
            HashCode provider
            <para>It is used to calculate the parameter value of HashCode</para>
            <para>The collection type computes the HashCode for each element,
            and the other types simply return the value raised by the default GetHashCode method of the object
            </para>
            <para>For the consideration of reflection performance, the complex model will not disassemble and calculate the HashCode of its attributes, so it is suggested that the model rewrite the GetHashCode method by itself</para>
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.GetHashCode(System.Object)">
            <summary>
            Gets the hash value of the parameter value
            </summary>
            <param name="parameter">Parameter type</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.HashCodeProvider.Create(System.Type)">
            <summary>
            Create the appropriate hash provider for the parameter
            </summary>
            <param name="parameterType">Parameter type</param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.EnumerableHashCodeProvider">
            <summary>
            The hash provider for the IEnumerable type
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.DictionaryHashCodeProvider">
            <summary>
            The hash providers for dictionary types
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.HashCodeProvider.OtherHashCodeProvider">
            <summary>
            The hash providers for other types
            </summary>
        </member>
        <member name="T:AntDesign.Core.HashCodes.ParameterDescriptor`1">
            <summary>
            Represents a parameter descriptor for a component
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="F:AntDesign.Core.HashCodes.ParameterDescriptor`1.Descriptors">
            <summary>
            Gets a description of all the parameters of the component
            </summary>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            A parameter descriptor for a component
            </summary>
            <param name="property">属性类型</param>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.IsEventCallBack(System.Reflection.PropertyInfo)">
            <summary>
            Check whether it is of type EventCallback
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.CreateGetFunc(System.Reflection.PropertyInfo)">
            <summary>
            Create the get delegate for the property
            </summary>
            <param name="property">Property</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.HashCodes.ParameterDescriptor`1.GetValueHashCode(`0)">
            <summary>
            Returns the hash of the parameter value
            </summary>
            <param name="component">组件</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.Formatter`1.ParseSpanTimeFormatString(System.String)">
            <summary>
            parse other characters in format string.
            </summary>
            <remarks>refer to https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings#other-characters</remarks>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.Formatter.ToPercentWithoutBlank(System.Double)">
            <summary>
            under WASM mode, when format a double number to percentage, there will be a blank between number and %, '35.00 %'
            use this method instead to avoid the blank space
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``2(``0,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet``1(System.Object,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGet(System.Object,System.String)">
            <summary>
            Get member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``2(``0,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault``1(System.Object,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathGetOrDefault(System.Object,System.String)">
            <summary>
            Get nullable member value by path, it will catch all exceptions and return null
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet(System.Object,System.String,System.Object)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``2(``0,System.String,``1)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
            <typeparam name="TITem"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathExtensions.PathSet``1(System.Object,System.String,``0)">
            <summary>
            Set member value by path
            </summary>
            <param name="item"></param>
            <param name="path"></param>
            <param name="value"></param>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get a get value delegate, the type of the delegate depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Func&lt;TItem, TValue&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;object, TValue&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;object, object&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = false.<br/>
            'Func&lt;TItem, TValue?&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Func&lt;object, TValue?&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Func&lt;object, object?&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = true.<br/>
            </summary>
            <param name="itemType">Type of access object</param>
            <param name="path">String path</param>
            <param name="paramType">If you want to pass in the item as an object, set it to true</param>
            <param name="valueType">If you want to get the value as an object, set it to true</param>
            <param name="checkNull">If true, the delegate will check the path is not null and return value or default value, if the type of return value is ValueType, the delegate will return Nullable&lt;T&gt;,
            if false, the delegate will not check the path not null, so that if the path contains null value or key not found, it will throw exception</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get a get value lambda expression, the type of the lambda expression depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Expression&lt;Func&lt;TItem, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;object, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;object, object&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = false.<br/>
            'Expression&lt;Func&lt;TItem, TValue?&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Expression&lt;Func&lt;object, TValue?&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue), <paramref name="checkNull"/> = true.<br/>
            'Expression&lt;Func&lt;object, object?&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object), <paramref name="checkNull"/> = true.<br/>
            </summary>
            <param name="itemType">Type of access object</param>
            <param name="path">String path</param>
            <param name="paramType">If you want to pass in the item as an object, set it to true</param>
            <param name="valueType">If you want to get the value as an object, set it to true</param>
            <param name="checkNull">If true, the delegate will check the path is not null and return value or default value, if the type of return value is ValueType, the delegate will return Nullable&lt;T&gt;,
            if false, the delegate will not check the path not null, so that if the path contains null value or key not found, it will throw exception</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetExpression(System.String,System.Type,System.Type,System.Type,System.Boolean)">
            <summary>
            Get the get value expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <param name="paramType"></param>
            <param name="valueType"></param>
            <param name="checkNull"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get a set value delegate, the type of the delegate depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Action&lt;TItem, TValue&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Action&lt;object, TValue&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Action&lt;object, object&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object).<br/>
            </summary>
            <param name="itemType">Type of item</param>
            <param name="path">Member path string</param>
            <param name="paramType">Type of incoming object</param>
            <param name="valueType">Type of the assignment object</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get a set value lambda expression, the type of the lambda expression depends on <paramref name="paramType"/> and <paramref name="valueType"/>:<br/>
            'Expression&lt;Action&lt;TItem, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(TItem), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Expression&lt;Action&lt;object, TValue&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(TValue).<br/>
            'Expression&lt;Action&lt;object, object&gt;&gt;': <paramref name="paramType"/> = typeof(object), <paramref name="valueType"/> = typeof(object).<br/>
            </summary>
            <param name="itemType">Type of item</param>
            <param name="path">Member path string</param>
            <param name="paramType">Type of incoming object</param>
            <param name="valueType">Type of the assignment object</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetExpression(System.String,System.Type,System.Type,System.Type)">
            <summary>
            Get the set value expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <param name="paramType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``2(System.String)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate``1(System.String,System.Type)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegate(System.String,System.Type)">
            <summary>
            Get a get value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``2(System.String)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda``1(System.String,System.Type)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambda(System.String,System.Type)">
            <summary>
            Get a get value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``2(System.String)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault``1(System.String,System.Type)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetDelegateDefault(System.String,System.Type)">
            <summary>
            Get a get nullable value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``2(System.String)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault``1(System.String,System.Type)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.GetLambdaDefault(System.String,System.Type)">
            <summary>
            Get a get nullable value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``2(System.String)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate``1(System.String,System.Type)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetDelegate(System.String,System.Type)">
            <summary>
            Get a set value delegate
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``2(System.String)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="path"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda``1(System.String,System.Type)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.MemberPath.PathHelper.SetLambda(System.String,System.Type)">
            <summary>
            Get a set value lambda expression
            </summary>
            <param name="itemType"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            C.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ClassGetPropertyOrNull(System.Linq.Expressions.Expression,System.String)">
            <summary>
            C?.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ValueTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            V.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValueOrNull(System.Linq.Expressions.Expression)">
            <summary>
            NV?.Value
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetValue(System.Linq.Expressions.Expression)">
            <summary>
            NV!.Value, maybe InvalidOperationException for no value
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetPropOrNull(System.Linq.Expressions.Expression,System.String)">
            <summary>
            NV?.Value.Prop
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.NullableTypeGetProperty(System.Linq.Expressions.Expression,System.String)">
            <summary>
            NV!.Value.Prop, maybe InvalidOperationException for no value
            </summary>
            <param name="expression"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsClass(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is class, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsValueType(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is ValueType and not Nullable&lt;T&gt;, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.IsNullableTypeOrThrow(System.Linq.Expressions.Expression)">
            <summary>
            Check if expression.Type is Nullable&lt;T&gt;, otherwise throw and exception
            </summary>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.GetRootParameterExpression(System.Linq.Expressions.Expression)">
            <summary>
            expression should be like: ParameterExpression->MemberExpression1->MemberExpression2... ,
            if the root for 'expression' is not ParameterExpression, this will return null.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.TryConvertToNullable(System.Linq.Expressions.Expression)">
            <summary>
            Try convert Expression type to Nullable type, only Non-Nullable ValueType can be converted
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Core.Helpers.PropertyAccessHelper.ParseIndexAccess(System.String)">
            <summary>
            Check if property string has index operation and parse to Expression
            </summary>
            <param name="property"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.None">
            <summary>
            Do not auto adjust
            </summary>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.InView">
            <summary>
            The default, the viewport boundaries are the boundaries that are used for calculation if overlay 
            is fully visible.
            Attempt to fit the overlay so it is always fully visible in the viewport.
            So if the overlay is outside of the viewport ("overflows"), then reposition calculation is going 
            to be attempted.
            </summary>
        </member>
        <member name="F:AntDesign.TriggerBoundaryAdjustMode.InScroll">
            <summary>
            The document boundaries are the boundaries used for calculation if overlay needs to be reposition. 
            So even if the overlay is outside of the viewport, the overlay may still be shown as long as it 
            does not "overflow" the document boundaries.
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Initing">
            <summary>
            组件初始化中
            Component initialization in progress
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Inited">
            <summary>
            组件初始化完毕
            Component initialization completed
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Opening">
            <summary>
            用于在 parameter 属性中设置，表明组件正在第一次渲染中
            Used to set in the parameter property, Indicates that the component is rendering for the first time
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Opened">
            <summary>
            一旦打开时经历过一次 OnAfterRender/OnAfterRenderAsync，就变成此状态
            Once the component has experienced OnAfterRender/OnAfterRenderAsync once when it is opened, it becomes this state
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Closing">
            <summary>
            用于在 parameter 属性中设置，表明组件正在关闭中
            Used to set in the parameter property, indicating that the component is closing
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Closed">
            <summary>
            一旦关闭时经历过一次 OnAfterRender/OnAfterRenderAsync，就变成此状态
            Once OnAfterRender/OnAfterRenderAsync is experienced once when closing, it becomes this state
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Destroying">
            <summary>
            用于在 parameter 属性中设置，表明组件正则销毁中、
            Used to set in the parameter attribute, indicating that the component is in regular destruction
            </summary>
        </member>
        <member name="F:AntDesign.ComponentStatus.Destroyed">
            <summary>
            一旦销毁时经历过一次 OnAfterRender，就变成此状态
            Once OnAfterRender/OnAfterRenderAsync is experienced once during destruction, it becomes this state
            </summary>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.Is(AntDesign.ComponentStatus,AntDesign.ComponentStatus)">
            <summary>
            return <paramref name="componentStatus"/> is <paramref name="status"/>
            </summary>
            <param name="componentStatus"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsOpen(AntDesign.ComponentStatus)">
            <summary>
            Is ComponentStatus.Opening or ComponentStatus.Opened
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsNotOpen(AntDesign.ComponentStatus)">
            <summary>
            Is not ComponentStatus.Opening and is not ComponentStatus.Opened
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.ComponentStatusExt.IsClose(AntDesign.ComponentStatus)">
            <summary>
            Is ComponentStatus.Closing or ComponentStatus.Closed
            </summary>
            <param name="componentStatus"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Default">
            <summary>
            Default generic validation error message
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Required">
            <summary>
            Default validation message for the Required rule
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Enum">
            <summary>
            Default validation message for the Enum rule
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Whitespace">
            <summary>
            Default validation message for the Whitespace rule
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Date">
            <summary>
            Messages for date type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Types">
            <summary>
            Messages for when a field's type does not match the expected type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.String">
            <summary>
            Messages for string type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Number">
            <summary>
            Messages for string type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Array">
            <summary>
            Messages for array type
            </summary>
        </member>
        <member name="P:AntDesign.FormValidateErrorMessages.Pattern">
            <summary>
            Messages for the Pattern validation rule
            </summary>
        </member>
        <member name="T:AntDesign.EventUtil">
            <summary>
            avoid component re-rendering caused by events to Blazor components.(pure event handlers)
            <para>
                author: SteveSandersonMS, from <see href="https://gist.github.com/SteveSandersonMS/8a19d8e992f127bb2d2a315ec6c5a373"/>.
            </para>
            <para>
                issue: <seealso href="https://github.com/dotnet/aspnetcore/issues/18919#issuecomment-735969441"/>.
            </para>
            </summary>
        </member>
        <member name="M:AntDesign.core.Extensions.DataConversionExtensions.Convert``2(``0)">
            <summary>
            Converts the generic type TFrom to the specified TTo type
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="fromValue"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.core.Extensions.HttpClientExtensions.ReadAsByteArrayAsync(System.Net.Http.HttpContent,System.Text.Encoding)">
            <summary>
            Reads as a binary array and converts to the specified encoding
            </summary>
            <param name="httpContent"></param>
            <param name="dstEncoding">The target encoding</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:AntDesign.core.Extensions.HttpClientExtensions.GetEncoding(System.Net.Http.HttpContent)">
            <summary>
            Get encoding information from <see cref="T:System.Net.Http.HttpContent"/>
            </summary>
            <param name="httpContent"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.EnumerableExtensions.AddIf``1(System.Collections.Generic.IList{``0},System.Boolean,``0)">
            <summary>
            add item to items when condition is true
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="condition"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackComponent`1">
            <summary>
            Feedback Component
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
        </member>
        <member name="P:AntDesign.FeedbackComponent`1.FeedbackRef">
            <summary>
            The options that allow you to pass in templates from the outside
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackComponent`1.OkCancelRef">
            <summary>
            
            </summary>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.CloseFeedbackAsync">
            <summary>
            In order that the user can close the template through the button
            为了用户可以在模板内通过按钮主动关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered, which can be used to cancel closing
            在 OK 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered, which can be used to cancel closing
            在 Cancel 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered, which can be used to cancel closing
            在 OK 按钮触发时回调，可以用来取消关闭
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackComponent`1.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered, which can be used to cancel closing
            在 Cancel 按钮触发时回调，可以用来取消关闭
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackComponent`2">
            <summary>
            Feedback Component
            </summary>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.FeedbackComponent`2.OkCancelRefWithResult">
            <summary>
            
            </summary>
        </member>
        <member name="T:AntDesign.FeedbackRefBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefBase.AntDesign#IFeedbackRef#ModalTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefBase.OnOpen">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.FeedbackRefBase.OnClose">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.FeedbackRefBase.OpenAsync">
            <summary>
            just open close feedback component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackRefBase.UpdateConfigAsync">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.FeedbackRefBase.CloseAsync">
            <summary>
            just do close feedback component, and will not trigger OkAsync or OkCancel 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.FeedbackRefWithOkCancelBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnCancel">
            <summary>
            invoke when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.FeedbackRefWithOkCancelBase.OnOk">
            <summary>
            invoke when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.FeedbackRefWithOkCancelBase.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.FeedbackRefWithOkCancelBase.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IFeedbackRef">
            <summary>
            Component reference with open and close method
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.ModalTemplate">
            <summary>
            to get feedback inner component's event 
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.OnOpen">
            <summary>
            on Feedback open
            </summary>
        </member>
        <member name="P:AntDesign.IFeedbackRef.OnClose">
            <summary>
            on Feedback close
            </summary>
        </member>
        <member name="M:AntDesign.IFeedbackRef.OpenAsync">
            <summary>
            open the component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IFeedbackRef.UpdateConfigAsync">
            <summary>
            update the component
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IFeedbackRef.CloseAsync">
            <summary>
            just do close feedback component, and will not trigger OkAsync or OkCancel 
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IOkCancelRef">
            <summary>
            Component reference with Ok and Cancel method
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef.OnCancel">
            <summary>
            invoked when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef.OnOk">
            <summary>
            invoked when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.IOkCancelRef.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
             Trigger Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IOkCancelRef.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
             Trigger Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="T:AntDesign.IOkCancelRef`1">
            <summary>
            Component&lt;&gt; reference with Ok and Cancel method
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:AntDesign.IOkCancelRef`1.OnCancel">
            <summary>
            invoke when cancel button or closer click
            </summary>
        </member>
        <member name="P:AntDesign.IOkCancelRef`1.OnOk">
            <summary>
            invoke when Ok button click
            </summary>
        </member>
        <member name="M:AntDesign.IOkCancelRef`1.OkAsync(`0)">
            <summary>
            Trigger Ok button click
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IOkCancelRef`1.CancelAsync(`0)">
            <summary>
            Trigger Cancel button click
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAtLast">
            <summary>
            When focuses, cursor will move to the last character
            This is default behavior.
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAtFirst">
            <summary>
            When focuses, cursor will move to the first character
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAndSelectAll">
            <summary>
            When focuses, the content will be selected
            </summary>
        </member>
        <member name="F:AntDesign.FocusBehavior.FocusAndClear">
            <summary>
            When focuses, content will be cleared
            </summary>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfDecade(System.DateTime)">
            <summary>
            for example,
            when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2030-01-01 00:00:00, it's the start date of next 10 years
                
            when currentDateTime is 2023-01-04 05:34:55 then: 
                the next date shouble be 2030-01-01 00:00:00, it's the start date of next 10 years
                
            when currentDateTime is 2018-01-04 05:34:55 then: 
                the next date shouble be 2020-01-01 00:00:00, it's the start date of next 10 years
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfYear(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2021-01-01 00:00:00, it's the start date of next year
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfQuarter(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2020-04-01 00:00:00, it's the start date of the next quarter in 2020
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfMonth(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2020-02-01 00:00:00 , it's the start date of next month
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.GetNextStartDateOfDay(System.DateTime)">
            <summary>
            for example, when currentDateTime is 2020-01-04 05:34:55 then: 
                the next date shouble be 2021-01-05 00:00:00, it's the start date of next day
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddYearsSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddYears逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddYears by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddMonthsSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddMonths逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddMonths by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DateHelper.AddDaysSafely(System.DateTime,System.Int32)">
            <summary>
            用该函数来执行AddDays逻辑, 不会触发System.ArgumentOutOfRangeException异常
            AddDays by the function would never throw System.ArgumentOutOfRangeException
            </summary>
            <param name="currentDate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.HtmlRenderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@)">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.HtmlRenderer.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AntDesign.RerenderStrategy">
            <summary>
            Rerender strategy
            </summary>
        </member>
        <member name="F:AntDesign.RerenderStrategy.Always">
            <summary>
            Always to rerender
            </summary>
        </member>
        <member name="F:AntDesign.RerenderStrategy.ParametersHashCodeChanged">
            <summary>
            Rerender only when any of the component's parameter values are changed
            </summary>
        </member>
        <member name="T:AntDesign.DatePicker`1">
                <summary>
                <para>To select or input a date.</para>
            
                <h2>When To Use</h2>
            
                <para>By clicking the input box, you can select a date from a popup calendar.</para>
                </summary>
                <seealso cref="T:AntDesign.MonthPicker`1"/>
                <seealso cref="T:AntDesign.RangePicker`1"/>
                <seealso cref="T:AntDesign.WeekPicker`1"/>
                <seealso cref="T:AntDesign.YearPicker`1"/>
                <seealso cref="T:AntDesign.QuarterPicker`1"/>
                <seealso cref="T:AntDesign.TriggerBoundaryAdjustMode"/>
        </member>
        <member name="P:AntDesign.DatePicker`1.OnChange">
            <summary>
            Callback executed when the selected value changes
            </summary>
        </member>
        <member name="P:AntDesign.DatePicker`1.Disabled">
            <summary>
            Disable the date picker. 
            </summary>
        </member>
        <member name="M:AntDesign.DatePicker`1.FocusAsync">
            <summary>
            Add focus to picker input
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePicker`1.BlurAsync">
            <summary>
            Remove focus from picker input
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method is called via EventCallBack if the keyboard key is no longer pressed inside the Input element.
            </summary>
            <param name="e">Contains the key (combination) which was pressed inside the Input element</param>
        </member>
        <member name="M:AntDesign.DatePicker`1.GetIndexValue(System.Int32)">
            <summary>
            Get value of the picker
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ChangeOnClose">
            <summary>
            Saving the input value after blur
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.IsNullable">
            <summary>
            Stores information if TValue is a nullable type.
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Picker">
            <summary>
            Set picker type
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.PopupContainerSelector">
            <summary>
            Selector for placing the container of the popup in
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.BoundaryAdjustMode">
            <summary>
            Overlay adjustment strategy (when for example browser resize is happening)
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Bordered">
            <summary>
            Show a border or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.AutoFocus">
            <summary>
            Autofocus on the input or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Open">
            <summary>
            If the picker is open or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DatePickerBase`1.InputReadOnly">
            <summary>
            If the picker is read-only or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ShowToday">
            <summary>
            Whether to show the Today button which selects Today from any date
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Mask">
            <summary>
            Locale for localizing UI strings
            </summary>
            <default value="LocaleProvider.CurrentLocale.DatePicker" />
        </member>
        <member name="P:AntDesign.DatePickerBase`1.CultureInfo">
            <summary>
            CultureInfo to use for localization
            </summary>
            <default value="CultureInfo for Locale"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.IsShowTime">
            <summary>
            If time should be shown or not. Contains the boolean decision made from setting <see cref="P:AntDesign.DatePickerBase`1.ShowTime" />
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ShowTimeFormat">
            <summary>
            Time format when showing time. Contains the string format from setting <see cref="P:AntDesign.DatePickerBase`1.ShowTime" /> with a string
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ShowTime">
            <summary>
            Show time or not. 
            <para>When boolean, it sets ShowTime to the boolean.</para>
            <para>When string, it sets ShowTime to true and uses the string value as the time format.</para>
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.AllowClear">
            <summary>
            Allow clearing the selected value or not
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Placeholder">
            <summary>
            Placeholder for input
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.PopupStyle">
            <summary>
            Style applied to popup
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.ClassName">
            <summary>
            Picker class name
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DropdownClassName">
            <summary>
            Class name for popover dropdown
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Format">
            <summary>
            Format for the DateTime display
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DefaultPickerValue">
            <summary>
            Default value of the picker
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.SuffixIcon">
            <summary>
            Custom suffix icon
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Ranges">
            <summary>
            Range selection presets to allow the user to select a range with one button click
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.RenderExtraFooter">
            <summary>
            Extra content to display in picker footer
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnClearClick">
            <summary>
            Callback executed when clear is clicked
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnClear">
            <summary>
            Called when clear button clicked.
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnOk">
            <summary>
            Callback executed when ok is clicked
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnOpenChange">
            <summary>
            Callback executed when popover calendar is opened or closed
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.OnPanelChange">
            <summary>
            Callback executed when the type of panel displayed changes
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledDate">
            <summary>
            Function to determine if a provided date should be disabled
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledHours">
            <summary>
            Function to determine if a hours in a date should be disabled
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledMinutes">
            <summary>
            Function to determine if a minutes in a date should be disabled
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledSeconds">
            <summary>
            Function to determine if a seconds in a date should be disabled
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DisabledTime">
            <summary>
            Function to determine what pieces of time should be disabled in a date
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.DateRender">
            <summary>
            Custom rendering for date cells
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.MonthCellRender">
            <summary>
            Custom rendering for month cells
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Placement">
            <summary>
            The position where the selection box pops up
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.Use12Hours">
            <summary>
            When true, will use 12 hour time. When false will use 24 hour time
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DatePickerBase`1.AntDesign#IDatePicker#CurrentDate">
            <summary>
            Date used for "Today"
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerBase`1.IsRange">
            <summary>
            If picker is a range picker or not
            </summary>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.Close">
            <summary>
            Close the popover
            </summary>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.Focus(System.Int32)">
            <summary>
            Add focus to picker
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.Blur(System.Int32)">
            <summary>
            Remove focus from picker
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.GetOnFocusPickerIndex">
            <summary>
            Get index of picker which is currently focused
            </summary>
            <returns>Index of picker. 0 can also mean neither is focused.</returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.GetIndexPickerValue(System.Int32)">
            <summary>
            Get pickerValue by picker index. Note that index refers to a picker panel
            and not to input text. For RangePicker 2 inputs generate 2 panels.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.ChangePickerValue(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Changes what date(s) will be visible on the picker.
            </summary>
            <param name="date">New date to be saved.</param>
            <param name="index">Index of the input box, where 0 = inputStart and 1 = inputEnd (only RangePicker)</param>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.ChangeValue(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Change the value of the given picker panel
            </summary>
            <param name="value">Value to change to</param>
            <param name="index">Index of the picker panel to change</param>
            <param name="closeDropdown">Close the panel when set or not</param>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.ClearValue(System.Int32,System.Boolean)">
            <summary>
            Clear the value for the given picker panel index
            </summary>
            <param name="index">Index of the picker panel to clear</param>
            <param name="closeDropdown">Close the panel when cleared or not</param>
        </member>
        <member name="M:AntDesign.DatePickerBase`1.GetIndexValue(System.Int32)">
            <summary>
            Get value of picker panel at index
            </summary>
            <param name="index">Index of picker panel to get value of</param>
            <returns>DateTime value of panel</returns>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.IsShowTime">
            <summary>
            Used only by DatePickerWithTimePanel
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.DateRender">
            <summary>
            for Calendar.DateFullCellRender、DatePicker.DateRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.MonthCellRender">
            <summary>
            for Calendar.MonthFullCellRender、DatePicker.MonthCellRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.CalendarDateRender">
            <summary>
            for Calendar.DateCellRender
            </summary>
        </member>
        <member name="P:AntDesign.DatePickerPanelBase`1.CalendarMonthCellRender">
            <summary>
            for Calendar.MonthCellRender
            </summary>
        </member>
        <member name="M:AntDesign.DayOfWeekHelper.GetDiffForDayOfWeek(System.DayOfWeek)">
            <summary>
                Returns the amount of days that have to be added to the start date to get the correct first day of the week.
            </summary>
            <param name="firstDayOfWeek">First day of the week as defined in the current locale.</param>
            <returns>Diff of days.</returns>
        </member>
        <member name="P:AntDesign.RangePicker`1.Value">
            <summary>
            Gets or sets the value of the input. This should be used with two-way binding.
            </summary>
            <example>
            @bind-Value="model.PropertyName"
            </example>
        </member>
        <member name="P:AntDesign.RangePicker`1.OnChange">
            <summary>
            Callback executed when range selected changes
            </summary>
        </member>
        <member name="M:AntDesign.RangePicker`1.FocusAsync(System.Int32)">
            <summary>
            Add focus to picker input
            </summary>
            <param name="index">Panel index, 0 for start, 1 for end</param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.RangePicker`1.BlurAsync(System.Int32)">
            <summary>
            Remove focus from picker input
            </summary>
            <param name="index">Panel index, 0 for start, 1 for end</param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.RangePicker`1.Disabled">
            <summary>
            Disable the date picker. 
            When given a single boolean, it will disable all of it. 
            When given an array of booleans, it represents disabling the start/end of a range: [start, end]
            </summary>
        </member>
        <member name="M:AntDesign.RangePicker`1.OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs,System.Int32)">
            <summary>
            Method is called via EventCallBack if the keyboard key is no longer pressed inside the Input element.
            </summary>
            <param name="e">Contains the key (combination) which was pressed inside the Input element</param>
            <param name="index">Refers to picker index - 0 for starting date, 1 for ending date</param>
        </member>
        <member name="M:AntDesign.RangePicker`1.OnValueChange(`0)">
            <summary>
            Handle change of values.
            When values are changed, PickerValues should point to those new values
            or current date if no values were passed.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AntDesign.RangePicker`1.GetIndexValue(System.Int32)">
            <summary>
            Get value by picker index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.RangePickerDefaults">
            <summary>
            Evaluates what values should be inserted to PickerValues (the date each
            picker will focus on when first shown).
            </summary>
        </member>
        <member name="T:AntDesign.Descriptions">
                <summary>
                <para>Display multiple read-only fields in groups.</para>
            
                <h2>When To Use</h2>
            
                <para>Commonly displayed on the details page.</para>
                </summary>
                <seealso cref="T:AntDesign.DescriptionsItem"/>
        </member>
        <member name="P:AntDesign.Descriptions.Bordered">
            <summary>
            Whether to display the border
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Descriptions.Layout">
            <summary>
            Layout - Horizontal or Vertical
            </summary>
            <default value="DescriptionsLayout.Horizontal"/>
        </member>
        <member name="P:AntDesign.Descriptions.Column">
            <summary>
            The number of <see cref="T:AntDesign.DescriptionsItem"/> elements in a row. Could be a number or a object like { xs: 8, sm: 16, md: 24}
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.Size">
            <summary>
            Size of the list
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.Title">
            <summary>
            Title shown at the top of the element
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.TitleTemplate">
            <summary>
            Title content shown at the top of the element. Takes priority over <see cref="P:AntDesign.Descriptions.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.Colon">
            <summary>
            Change default props <c>Colon</c> value of <see cref="T:AntDesign.DescriptionsItem"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Descriptions.ChildContent">
            <summary>
            Content for the element. Typically contains <see cref="T:AntDesign.DescriptionsItem"/> elements
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.Title">
            <summary>
            Title for the item
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.TitleTemplate">
            <summary>
            Title content for the item. Takes priority over <see cref="P:AntDesign.DescriptionsItem.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.Span">
            <summary>
            Span of the item
            </summary>
            <default value="1"/>
        </member>
        <member name="P:AntDesign.DescriptionsItem.ChildContent">
            <summary>
            Content for the item
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.LabelStyle">
            <summary>
            Customize the style of the label
            </summary>
        </member>
        <member name="P:AntDesign.DescriptionsItem.ContentStyle">
            <summary>
            Customize the style of the content
            </summary>
        </member>
        <member name="T:AntDesign.Divider">
                <summary>
                    <para>A divider line separates different content.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>Divide sections of article.</item>
                        <item>Divide inline text and links such as the operation column of table.</item>
                    </list>
                </summary>
        </member>
        <member name="P:AntDesign.Divider.ChildContent">
            <summary>
            Content to show inside the divider
            </summary>
        </member>
        <member name="P:AntDesign.Divider.Text">
            <summary>
            Text to show inside the divider
            </summary>
        </member>
        <member name="P:AntDesign.Divider.Plain">
            <summary>
            When false, the text will not be a header style. When true it will be header style.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Divider.Type">
            <summary>
            Type of divider - `DividerType.Horizontal` | `DividerType.Vertical`
            </summary>
            <default value="DividerType.Horizontal" />
        </member>
        <member name="P:AntDesign.Divider.Orientation">
            <summary>
            Content/Text orientation - `DividerOrientation.Left` | `DividerOrientation.Right` | `DividerOrientation.Center`. Ignored when not using `Text` or `ChildContent`
            </summary>
            <default value="DividerOrientation.Center" />
        </member>
        <member name="P:AntDesign.Divider.Dashed">
            <summary>
            Whether to style the line as dashed or not.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DrawerOpenEventArgs.Cancel">
            <summary>
            获取或设置一个值，该值指示是否应取消事件。
            返回结果: true 如果应取消事件;否则为 false。
            Gets or sets a value indicating whether the event should be cancelled.
            Return result: true if the event should be cancelled; otherwise false.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Content">
            <summary>
            The drawer body content.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Closable">
            <summary>
            Whether a close (x) button is visible on top right of the Drawer dialog or not.	
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.DrawerOptions.MaskClosable">
            <summary>
            Clicking on the mask (area outside the Drawer) to close the Drawer or not.	
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Mask">
            <summary>
            Whether to show mask or not.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Keyboard">
            <summary>
            Whether to support keyboard esc off	
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Title">
            <summary>
            The title for Drawer.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Placement">
            <summary>
            The placement of the Drawer - Possible values: "left", "right", "top", "bottom"
            </summary>
            <default value="DrawerPlacement.Right" />
        </member>
        <member name="P:AntDesign.DrawerOptions.MaskStyle">
            <summary>
            Style for Drawer's mask element.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.BodyStyle">
            <summary>
            Body style for Drawer body element. Such as height, padding etc.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.HeaderStyle">
            <summary>
            Header style for Drawer header element. Such as height, padding etc.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.WrapClassName">
            <summary>
            The class name of the container of the Drawer dialog.
            </summary>
        </member>
        <member name="P:AntDesign.DrawerOptions.Width">
            <summary>
            Width of the Drawer dialog.
            </summary>
            <default value="256" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Height">
            <summary>
            Height of the Drawer dialog, only when placement is 'top' or 'bottom'.
            </summary>
            <default value="256" />
        </member>
        <member name="P:AntDesign.DrawerOptions.ZIndex">
            <summary>
            The z-index of the Drawer.
            </summary>
            <default value="1000" />
        </member>
        <member name="P:AntDesign.DrawerOptions.OffsetX">
            <summary>
            The the X coordinate offset(px), only when placement is 'left' or 'right'.
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.DrawerOptions.OffsetY">
            <summary>
            The the Y coordinate offset(px), only when placement is 'top' or 'bottom'.
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.DrawerOptions.Visible">
            <summary>
            If the drawer is visible or not
            </summary>
            <default value="false" />
        </member>
        <member name="T:AntDesign.Drawer">
                <summary>
                    <para>A panel which slides in from the edge of the screen.</para>
            
                    <h2>When To Use</h2>
                    <para>
                        A Drawer is a panel that is typically overlaid on top of a page and slides in from the side.
                        It contains a set of information or actions.
                        Since the user can interact with the Drawer without leaving the current page, tasks can be achieved more efficiently within the same context.
                    </para>
                    <list type="bullet">
                        <item>Use a Form to create or edit a set of information.</item>
                        <item>Processing subtasks. When subtasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task, Drawer comes very handy.</item>
                        <item>When the same Form is needed in multiple places.</item>
                    </list>
                </summary>
                <seealso cref="T:AntDesign.DrawerService" />
                <seealso cref="T:AntDesign.DrawerOptions" />
                <seealso cref="P:AntDesign.Drawer.DrawerRef" />
        </member>
        <member name="P:AntDesign.Drawer.ChildContent">
            <summary>
            The content of Drawer.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Content">
            <summary>
            The content of Drawer. <para>If <see cref="P:AntDesign.Drawer.Content"/> is a string, it will be rendered as HTML.</para>
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Closable">
            <summary>
            Whether a close (x) button is visible on top right of the Drawer dialog or not.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Drawer.MaskClosable">
            <summary>
            Clicking on the mask (area outside the Drawer) to close the Drawer or not.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Drawer.Mask">
            <summary>
            Whether to show mask or not.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Drawer.MaskStyle">
            <summary>
            Style for Drawer's mask element.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Keyboard">
            <summary>
            Whether to support keyboard esc off
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Drawer.Title">
            <summary>
            The title for Drawer.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Placement">
            <summary>
            The placement of the Drawer, option could be left, top, right, bottom
            </summary>
            <default value="right" />
        </member>
        <member name="P:AntDesign.Drawer.BodyStyle">
            <summary>
            Body style for modal body element. Such as height, padding etc.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.HeaderStyle">
            <summary>
            Header style for modal header element. Such as height, padding etc.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.WrapClassName">
            <summary>
            The class name of the container of the Drawer dialog. 
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Width">
            <summary>
            Width of the Drawer dialog, only when placement is 'left' or 'right'.
            </summary>
            <default value="256" />
        </member>
        <member name="P:AntDesign.Drawer.Height">
            <summary>
            Height of the Drawer dialog, only when placement is 'top' or 'bottom'.
            </summary>
            <default value="256" />
        </member>
        <member name="P:AntDesign.Drawer.ZIndex">
            <summary>
            The z-index of the Drawer.
            </summary>
            <default value="1000" />
        </member>
        <member name="P:AntDesign.Drawer.OffsetX">
            <summary>
            The the X coordinate offset(px), only when placement is 'left' or 'right'.
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Drawer.OffsetY">
            <summary>
            The the Y coordinate offset(px), only when placement is 'top' or 'bottom'.
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Drawer.Visible">
            <summary>
            Whether the Drawer dialog is visible or not.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Drawer.VisibleChanged">
            <summary>
            EventCallback trigger on Visible was changed.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OnOpen">
            <summary>
            Specify a callback that will be called before drawer displayed
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OnClose">
            <summary>
            Specify a callback that will be called when a user clicks mask, close button or Cancel button.
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.OffsetTransform">
            <summary>
            设置 Drawer 是否显示，以及显示时候的位置 Offset
            </summary>
        </member>
        <member name="P:AntDesign.Drawer.Transform">
            <summary>
            设置 Drawer 是否隐藏，以及隐藏时候的位置 Offset
            </summary>
        </member>
        <member name="M:AntDesign.Drawer.MaskClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            trigger when mask is clicked
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Drawer.CloseClick">
            <summary>
            trigger when Closer is clicked
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.Drawer.HandleClose">
            <summary>
            clean-up after close
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnCreate(AntDesign.DrawerRef)">
            <summary>
            Create and Open a drawer
            </summary>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnUpdateEvent(AntDesign.DrawerRef)">
            <summary>
            Update drawer
            </summary>
            <param name="drawerRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerContainer.DrawerService_OnClose(AntDesign.DrawerRef)">
            <summary>
            Close the drawer
            </summary>
        </member>
        <member name="M:AntDesign.DrawerRef.CloseAsync">
            <summary>
            close drawer
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.OpenAsync">
            <summary>
            Open drawer
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.UpdateConfigAsync">
            <summary>
            update drawer config which Visible=true
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef.UpdateConfigAsync(AntDesign.DrawerOptions)">
            <summary>
            update drawer config with a new options
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerRef`1.CloseAsync(`0)">
            <summary>
            关闭抽屉
            </summary>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateAsync(AntDesign.DrawerOptions)">
            <summary>
            Create and open a simple drawer without result
            </summary>
            <param name="options">drawer options</param>
            <returns>The reference of drawer</returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateAsync``3(AntDesign.DrawerOptions,``1)">
            <summary>
            Create and open a drawer with the template
            </summary>
            <typeparam name="TComponent">The type of DrawerTemplate implement</typeparam>
            <typeparam name="TComponentOptions">The </typeparam>
            <typeparam name="TResult">The type of return value</typeparam>
            <param name="config"></param>
            <param name="options"></param>
            <returns>The reference of drawer</returns>
        </member>
        <member name="M:AntDesign.DrawerService.UpdateAsync(AntDesign.DrawerRef)">
            <summary>
            Update a drawer
            </summary>
            <param name="drawerRef"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.DrawerService.CreateDialogAsync``3(AntDesign.DrawerOptions,``1)">
            <summary>
            Create and open a drawer
            </summary>
            <typeparam name="TComponent"></typeparam>
            <typeparam name="TComponentOptions"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="config"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Dropdown">
                <summary>
                <para>A dropdown list.</para>
            
                <h2>When To Use</h2>
            
                <para>
                    When there are more than a few options to choose from, you can wrap them in a <c>Dropdown</c>. 
                    By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.
                </para>
            
                <h2>Two types</h2>
            
                <para>There are 2 rendering approaches for <c>Dropdown</c>:</para>
                <list type="number">
                    <item>Wraps child element (content of the <c>Dropdown</c>) with a <c>div</c> (default approach).</item>
                    <item>
                        Child element is not wrapped with anything. This approach requires usage of <c>Unbound</c> tag inside <c>Dropdown</c> and depending on the child element type (please refer to the first example):
                        <list type="bullet">
                            <item>html tag: has to have its <c>@ref</c> set to <c>@context.Current</c> </item>
                            <item><c>Ant Design Blazor</c> component: has to have its <c>RefBack</c> attribute set to <c>@context</c>.</item>
                        </list>
                    </item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.DropdownButton"/>
        </member>
        <member name="P:AntDesign.Dropdown.Arrow">
            <summary>
            Whether the dropdown arrow should be visible.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Dropdown.ArrowPointAtCenter">
            <summary>
            Whether the dropdown arrow should point at center
            </summary>
            <default value="false" />
        </member>
        <member name="M:AntDesign.Dropdown.OnClickDiv(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handle the trigger click.
            </summary>
            <param name="args">MouseEventArgs</param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.DropdownButton.Block">
            <summary>
            Option to fit button width to its parent width
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsRender">
            <summary>
            Fully customizable button.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsClass">
            <summary>
            Allows to set each button's css class either to the same string
            or separately.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.ButtonsStyle">
            <summary>
            Allows to set each button's style either to the same string
            or separately.
            </summary>
        </member>
        <member name="P:AntDesign.DropdownButton.Danger">
            <summary>
            Set the danger status of button
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DropdownButton.Ghost">
            <summary>
            Used in situations with complex background, home pages usually.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DropdownButton.Icon">
            <summary>
            Icon that will be rendered in the right
            button.
            </summary>
            <default value="ellipsis" />
        </member>
        <member name="P:AntDesign.DropdownButton.Loading">
            <summary>
            Indicates if loading icon is going to be included.
            If set to true, then dropdown will not be active.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.DropdownButton.Size">
            <summary>
            Button size.
            </summary>
            <default value="AntSizeLDSType.Default" />
        </member>
        <member name="P:AntDesign.DropdownButton.Type">
            <summary>
            Allows to set each button's type either to the same string
            or separately. Use AntDesign.ButtonType helper class.
            </summary>
            <default value="ButtonType.Default" />
        </member>
        <member name="M:AntDesign.DropdownButton.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Force overlay trigger to be attached to wrapping element of
            the right button. Right button has to be wrapped,
            because overlay will be looking for first child
            element of the overlay trigger to calculate the overlay position.
            If the right button was the trigger, then its first child
            would be the icon/ellipsis and the overlay would have been
            rendered too high.
            </summary>
            <param name="firstRender"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Empty">
                <summary>
                    <para>Empty state placeholder.</para>
            
                    <h2>When To Use</h2>
            
                    <list type="bullet">
                        <item>When there is no data provided, display for friendly tips.</item>
                        <item>User tutorial to create something in fresh new situation.</item>
                    </list>
                </summary>
        </member>
        <member name="P:AntDesign.Empty.ImageStyle">
            <summary>
            Style for the wrapper of the image. Always used regardless of image type.
            </summary>
        </member>
        <member name="P:AntDesign.Empty.Small">
            <summary>
            Use small variant of Empty
            </summary>
        </member>
        <member name="P:AntDesign.Empty.Simple">
            <summary>
            Use simple variant of Empty. Changes image as well.
            </summary>
        </member>
        <member name="P:AntDesign.Empty.ChildContent">
            <summary>
            Content displayed after the empty view
            </summary>
        </member>
        <member name="P:AntDesign.Empty.Description">
            <summary>
            Locale configuration for the empty view
            </summary>
            <default value="No Data (in current locale)" />
        </member>
        <member name="P:AntDesign.Empty.DescriptionTemplate">
            <summary>
            Description content for the view. Takes priority over <see cref="P:AntDesign.Empty.Description"/>
            </summary>
        </member>
        <member name="P:AntDesign.Empty.Image">
            <summary>
            Image URL for view. Takes priority over <see cref="P:AntDesign.Empty.Simple"/>
            </summary>
        </member>
        <member name="P:AntDesign.Empty.ImageTemplate">
            <summary>
            Image content for empty view. Takes priority over <see cref="P:AntDesign.Empty.Image"/> and <see cref="P:AntDesign.Empty.Simple"/>
            </summary>
        </member>
        <member name="T:AntDesign.Flex">
                <summary>
                <para>A flex layout container for alignment.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>Good for setting spacing between elements.</item>
                    <item>Suitable for setting various horizontal and vertical alignments.</item>
                </list>
                
                <h3>Difference with Space component</h3>
                <list type="bullet">
                    <item>Space is used to set the spacing between inline elements. It will add a wrapper element for each child element for inline alignment. Suitable for equidistant arrangement of multiple child elements in rows and columns.</item>
                    <item>Flex is used to set the layout of block-level elements. It does not add a wrapper element. Suitable for layout of child elements in vertical or horizontal direction, and provides more flexibility and control.</item>
                </list>
            
                </summary>
        </member>
        <member name="P:AntDesign.Flex.Vertical">
            <summary>
            Is direction of the flex vertical, use flex-direction: column
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Direction">
            <summary>
            Sets the direction of the flex, either horizontal or vertical
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Wrap">
            <summary>
            Set whether the element is displayed in a single line or in multiple lines
            reference flex-wrap:https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Justify">
            <summary>
            Sets the alignment of elements in the direction of the main axis
            reference justify-content https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Align">
            <summary>
            Sets the alignment of elements in the direction of the cross axis
            reference align-items https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
            </summary>
        </member>
        <member name="P:AntDesign.Flex.FlexCss">
            <summary>
            flex CSS shorthand properties
            reference flex https://developer.mozilla.org/en-US/docs/Web/CSS/flex
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Gap">
            <summary>
            Sets the gap between grids
            small | middle | large | string | number
            </summary>
        </member>
        <member name="P:AntDesign.Flex.Component">
            <summary>
            Custom element type
            </summary>
        </member>
        <member name="P:AntDesign.Flex.ChildContent">
            <summary>
            Set the child element
            </summary>
        </member>
        <member name="T:AntDesign.Form`1">
                <summary>
                <para>High performance Form component with data scope management. Including data collection, verification, and styles.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When you need to create an instance or collect information.</item>
                    <item>When you need to validate fields in certain rules.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.FormValidateMode"/>
                <seealso cref="T:AntDesign.FormItem" />
                <seealso cref="T:AntDesign.FormValidationRule"/>
                <seealso cref="T:AntDesign.FormValidateErrorMessages"/>
        </member>
        <member name="P:AntDesign.Form`1.RequiredMark">
            <summary>
            Change how required/optional field labels are displayed on the form.
            <list type="bullet">
                <item>Required - Will mark required fields</item>
                <item>Optional - Will mark optional fields</item>
                <item>None - Will mark no fields, regardless of required/optional</item>
            </list>
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Layout">
            <summary>
            Layout of form items in the form
            </summary>
            <default value="FormLayout.Horizontal"/>
        </member>
        <member name="P:AntDesign.Form`1.ChildContent">
            <summary>
            Content of the form. Typically contains different form inputs and layout elements.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.LabelCol">
            <summary>
            Control the layout of the label. Commonly used to set widths for different screen sizes.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.LabelAlign">
            <summary>
            Align the label to the left or right
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.LabelColSpan">
            <summary>
            Gets/sets the <c>Span</c> property on <see cref="P:AntDesign.Form`1.LabelCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.LabelColOffset">
            <summary>
            Gets/sets the <c>Offset</c> property on <see cref="P:AntDesign.Form`1.LabelCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.WrapperCol">
            <summary>
            Control the layout of the input element's wrapper. Commonly used to set widths for different screen sizes.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.WrapperColSpan">
            <summary>
            Gets/sets the <c>Span</c> property on <see cref="P:AntDesign.Form`1.WrapperCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.WrapperColOffset">
            <summary>
            Gets/sets the <c>Offset</c> property on <see cref="P:AntDesign.Form`1.WrapperColOffset"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Size">
            <summary>
            The size of the ant components inside the form
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Name">
            <summary>
            Gets or sets the form handler name. This is required for posting it to a server-side endpoint.
            Or using for get the form instance from <see cref="T:AntDesign.FormProviderFinishEventArgs"/>.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Method">
            <summary>
            Http method used to submit form
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Model">
            <summary>
            The model to bind the form inputs to
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Loading">
            <summary>
            If the form is loading or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Form`1.OnFinish">
            <summary>
            Callback executed when the form is submitted and PASSES validation.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.OnFinishFailed">
            <summary>
            Callback executed when the form is submitted and FAILS validation.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.OnFieldChanged">
            <summary>
            Callback executed when a field inside the form changes
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.OnValidationRequested">
            <summary>
            Callback executed when validation is requested
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.OnValidationStateChanged">
            <summary>
            Callback executed when the validation changes
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Validator">
            <summary>
            Validator to use in the form. Used when <see cref="P:AntDesign.Form`1.ValidateMode"/> is <c>FormValidateMode.Default</c> or <c>FormValidateMode.Complex</c>
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.ValidateOnChange">
            <summary>
            Enable validation when component values change
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.ValidateMode">
            <summary>
            Which mode of validation the form should use
            </summary>
            <default value="FormValidateMode.Complex"/>
        </member>
        <member name="P:AntDesign.Form`1.Enhance">
            <summary>
            If enabled, form submission is performed without fully reloading the page. This is equivalent to adding data-enhance to the form.
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Autocomplete">
            <summary>
            Whether input elements can by default have their values automatically completed by the browser
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.Locale">
            <summary>
            The localization options
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.IsModified">
            <summary>
            A flag indicating if the form has been modified
            </summary>
        </member>
        <member name="M:AntDesign.Form`1.Reset">
            <summary>
            Reset all the values in the form
            </summary>
        </member>
        <member name="M:AntDesign.Form`1.Submit">
            <summary>
            Submit the form. Will trigger validation and either <see cref="P:AntDesign.Form`1.OnFinish"/> or <see cref="P:AntDesign.Form`1.OnFinishFailed"/>.
            </summary>
        </member>
        <member name="M:AntDesign.Form`1.Validate">
            <summary>
            Execute validation   
            </summary>
            <returns> return <c>true</c> if all fields are valid </returns>
        </member>
        <member name="M:AntDesign.Form`1.ValidationReset">
            <summary>
            Reset validation
            </summary>
        </member>
        <member name="P:AntDesign.Form`1.EditContext">
            <summary>
            Get the <see cref="P:AntDesign.Form`1.EditContext"/> instance inner the form
            </summary>
        </member>
        <member name="M:AntDesign.Form`1.SetValidationMessages(System.String,System.String[])">
            <summary>
            Set validation messages to a specific field.
            </summary>
            <param name="field">The field name</param>
            <param name="errorMessages">The error messages</param>
        </member>
        <member name="P:AntDesign.FormItem.Name">
            <summary>
            Specific the name of the form item. It also can used as the Member Path for binding the property of the Model.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.ChildContent">
            <summary>
            Content for the form item. Typically will contain one of the input elements
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.Label">
            <summary>
            Custom label for the item. If neither <see cref="P:AntDesign.FormItem.Label"/> or <see cref="P:AntDesign.FormItem.LabelTemplate"/> are provided, the DisplayName attribute value or field name will be used (in that order).
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelTemplate">
            <summary>
            Custom label content for the item. Takes priority over <see cref="P:AntDesign.FormItem.Label"/>. If neither <see cref="P:AntDesign.FormItem.Label"/> or <see cref="P:AntDesign.FormItem.LabelTemplate"/> are provided, the DisplayName attribute value or field name will be used (in that order).
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelCol">
            <summary>
            Control the layout of the label. Commonly used to set widths for different screen sizes.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelAlign">
            <summary>
            Align the label to the left or right
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelColSpan">
            <summary>
            Gets/sets the <c>Span</c> property on <see cref="P:AntDesign.FormItem.LabelCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelColOffset">
            <summary>
            Gets/sets the <c>Offset</c> property on <see cref="P:AntDesign.FormItem.LabelCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.WrapperCol">
            <summary>
            Control the layout of the input element's wrapper. Commonly used to set widths for different screen sizes.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.WrapperColSpan">
            <summary>
            Gets/sets the <c>Span</c> property on <see cref="P:AntDesign.FormItem.WrapperCol"/>.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.WrapperColOffset">
            <summary>
            Gets/sets the <c>Offset</c> property on <see cref="P:AntDesign.FormItem.WrapperColOffset"/>.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.NoStyle">
            <summary>
            No style when true, it is used as a pure field control
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.Required">
            <summary>
            Mark this item as required for validation purposes
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.LabelStyle">
            <summary>
            Style that will only be applied to label element.
            Will not be applied if LabelTemplate is set.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.Rules">
            <summary>
            Validation rules to apply to this item
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.HasFeedback">
            <summary>
            Used in conjunction with <see cref="P:AntDesign.FormItem.ValidateStatus"/> to display the verification status icon. It is recommended to use it only with the Input component
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.ShowFeedbackOnError">
            <summary>
            Whether to show feedback icon on error. If set to false, it will not show the icon even if the field is in error state.
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.ValidateStatus">
            <summary>
            Validation status, if not set, it will be automatically generated according to validation rules
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.Help">
            <summary>
            Prompt information
            </summary>
        </member>
        <member name="P:AntDesign.FormItem.ToolTip">
            <summary>
            FormItem Help Tooltip information
            </summary>
        </member>
        <member name="M:AntDesign.FormItem.GetRulesFromAttributes">
            <summary>
            tansform attributes to FormValidationRule for using locale validation message templates
            </summary>
            <returns></returns>
        </member>
        <member name="F:AntDesign.FormRequiredMark.None">
            <summary>
            When set to None, the form will not display any indicators by any fields, regardless of their required status
            </summary>
        </member>
        <member name="F:AntDesign.FormRequiredMark.Required">
            <summary>
            When set to Required, the form will display an indicator next to required fields
            </summary>
        </member>
        <member name="F:AntDesign.FormRequiredMark.Optional">
            <summary>
            When set to Optional, the form will display an indicator next to optional fields
            </summary>
        </member>
        <member name="P:AntDesign.IForm.Model">
            <summary>
            The data object that the form is bound to.
            </summary>
        </member>
        <member name="P:AntDesign.IForm.Name">
            <summary>
            The name of the form.
            </summary>
        </member>
        <member name="P:AntDesign.IForm.EditContext">
            <summary>
            Get the current EditContext from the Form.
            </summary>
        </member>
        <member name="P:AntDesign.IForm.IsModified">
            <summary>
            Whether the form has been modified.
            </summary>
        </member>
        <member name="M:AntDesign.IForm.Reset">
            <summary>
            Reset the values and validation messages of all fields.
            </summary>
        </member>
        <member name="M:AntDesign.IForm.Submit">
            <summary>
            Trigger `OnFinish` while all fields are valid, otherwise, trigger `OnFinishFailed`.
            </summary>
        </member>
        <member name="M:AntDesign.IForm.Validate">
            <summary>
            Validate all fields.
            </summary>
            <returns> true if all fields are valid, otherwise false. </returns>
        </member>
        <member name="M:AntDesign.IForm.SetValidationMessages(System.String,System.String[])">
             <summary>
             Set validation messages for a specific field.
             <code>
             <![CDATA[
             <Form @ref="form">
                 <FormItem>
                     <Input @bind-value="model.Name" />
                 </FormItem>
             </Form>
            
             @code {
                 private IForm _form;
                 private void SetError()
                 {
                     _form.SetValidationMessages("name", new[] { "error message" });
                 }
             }
             ]]>
             </code>
             </summary>
             <param name="field"></param>
             <param name="errorMessages"></param>
        </member>
        <member name="F:AntDesign.FormValidateMode.Default">
            <summary>
            Validation will come from data attributes on the model provided to <see cref="P:AntDesign.Form`1.Model"/>
            </summary>
        </member>
        <member name="F:AntDesign.FormValidateMode.Rules">
            <summary>
            Validation will come from rules on FormItems in the form
            </summary>
        </member>
        <member name="F:AntDesign.FormValidateMode.Complex">
            <summary>
            Use both Default mode and Rules mode
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Len">
            <summary>
            Validate the length. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: String, Number, or Array.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Min">
            <summary>
            Validate length is greater than or equal to this number. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: String, Number or Array.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Max">
            <summary>
            Validate length is less than or equal to this number. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: String, Number, or Array.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Required">
            <summary>
            Make a field required
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Pattern">
            <summary>
            Validate the value passes a regular expression pattern
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Message">
            <summary>
            Custom error message. Will be auto generated if not provided.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Range">
            <summary>
            Validate the value is in the specified range
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.DefaultField">
            <summary>
            Validate rule for all array elements. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: Array. (<c>FormItem</c> not supported now)
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.OneOf">
            <summary>
            Whether the value is in specified values
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Enum">
            <summary>
            Validate the value is in specified enum type.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Fields">
            <summary>
            Validate rule for child elements. Valid <see cref="P:AntDesign.FormValidationRule.Type"/>s: Array, Object (<c>FormItem</c> not supported now)
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Validator">
            <summary>
            Custom validation function
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Transform">
            <summary>
            Transformation function called before validation executes. The return value will have the validation ran against it.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.Type">
            <summary>
            Type of form field. See <see cref="T:AntDesign.FormFieldType"/> for all possible values.
            </summary>
        </member>
        <member name="P:AntDesign.FormValidationRule.ValidationAttribute">
            <summary>
            Validate the value using the specified attribute.
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Span">
            <summary>
            Width of Col
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Pull">
            <summary>
            The number of Cols to pull the Col to the left
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Push">
            <summary>
            The number of Cols to push the Col to the right
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Offset">
            <summary>
            The number of Cols to offset Col from the left
            </summary>
        </member>
        <member name="P:AntDesign.EmbeddedProperty.Order">
            <summary>
            Order of Col, used in flex mode
            </summary>
        </member>
        <member name="P:AntDesign.Col.ChildContent">
            <summary>
            Content of column
            </summary>
        </member>
        <member name="P:AntDesign.Col.Flex">
            <summary>
            Use flex mode or not. Will not use flex mode if null.
            </summary>
        </member>
        <member name="P:AntDesign.Col.Span">
            <summary>
            Width of Col
            </summary>
        </member>
        <member name="P:AntDesign.Col.Order">
            <summary>
            Order of Col, used in flex mode
            </summary>
        </member>
        <member name="P:AntDesign.Col.Offset">
            <summary>
            The number of Cols to offset Col from the left
            </summary>
        </member>
        <member name="P:AntDesign.Col.Push">
            <summary>
            The number of Cols to push the Col to the right
            </summary>
        </member>
        <member name="P:AntDesign.Col.Pull">
            <summary>
            The number of Cols to pull the Col to the left
            </summary>
        </member>
        <member name="P:AntDesign.Col.Xs">
            <summary>
            &lt;576px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Sm">
            <summary>
            ≥576px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Md">
            <summary>
            ≥768px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Lg">
            <summary>
            ≥992px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Xl">
            <summary>
            ≥1200px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.Col.Xxl">
            <summary>
            ≥1600px column of grid
            </summary>
        </member>
        <member name="T:AntDesign.Grid">
                <summary>
                    <para>24 Grids System.</para>
            
                    <h2>Design concept</h2>
            
                    <para>In most business situations, Ant Design needs to solve a lot of information storage problems within the design area, so based on 12 Grids System, we divided the design area into 24 sections.</para>
            
                    <para>
                    We name the divided area 'box'. We suggest four boxes for horizontal arrangement at most, one at least.
                    Boxes are proportional to the entire screen as shown in the picture above.
                    To ensure a high level of visual comfort, we customize the typography inside of the box based on the box unit.
                    </para>
            
                    <h2>Outline</h2>
            
                    <para>In the grid system, we define the frame outside the information area based on row and column, to ensure that every area can have stable arrangement.</para>
            
                    <para>Following is a brief look at how it works:</para>
            
                    <list type="bullet">
                        <item>Establish a set of column in the horizontal space defined by row (abbreviated col)</item>
                        <item>Your content elements should be placed directly in the col, and only col should be placed directly in row</item>
                        <item>The column grid system is a value of 1-24 to represent its range spans. For example, three columns of equal width can be created by using a span of 8 on the columns.</item>
                        <item>If the sum of col spans in a row are more than 24, then the overflowing col as a whole will start a new line arrangement.</item>
                    </list>
                    <para>
                    Our grid systems base on Flex layout to allow the elements within the parent to be aligned horizontally - left, center, right, wide arrangement, and decentralized arrangement.
                    The Grid system also supports vertical alignment - top aligned, vertically centered, bottom-aligned.
                    You can also define the order of elements by using order.
                    </para>
            
                    <para>Layout uses a 24 grid layout to define the width of each "box", but does not rigidly adhere to the grid layout.</para>
            
                    <para>The breakpoints of responsive grid follow BootStrap 4 media queries rules(not including occasionally part).</para>
                </summary>
                <seealso cref="T:AntDesign.Row" />
                <seealso cref="T:AntDesign.Col" />
                <seealso cref="T:AntDesign.EmbeddedProperty" />
        </member>
        <member name="P:AntDesign.Row.ChildContent">
            <summary>
            Content of the row, generally contains <see cref="T:AntDesign.Col"/> elements.
            </summary>
        </member>
        <member name="P:AntDesign.Row.Type">
            <summary>
            Currently unused
            </summary>
        </member>
        <member name="P:AntDesign.Row.Align">
            <summary>
            Vertical alignment for the flex layout: 'top' | 'middle' | 'bottom'
            </summary>
        </member>
        <member name="P:AntDesign.Row.Justify">
            <summary>
            Hotizontal alignment for the flex layout: 'start' | 'end' | 'center' | 'space-around' | 'space-between'
            </summary>
        </member>
        <member name="P:AntDesign.Row.Wrap">
            <summary>
            Allow the row's content to wrap or not
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Row.Gutter">
            <summary>
            Spacing between grids, could be a number or a dictionary like 
            <c>{ xs: 8, sm: 16, md: 24 }</c>, an array to make horizontal and vertical spacing work at the same time <c>[horizontal, vertical]</c>
            </summary>
        </member>
        <member name="P:AntDesign.Row.OnBreakpoint">
            <summary>
            Callback executed when a screen size breakpoint is triggered
            </summary>
        </member>
        <member name="P:AntDesign.Row.DefaultBreakpoint">
            <summary>
            Default screen size breakpoint. Used to set gutter during pre-rendering
            </summary>
        </member>
        <member name="T:AntDesign.Icon">
                <summary>
                Semantic vector graphics. Before use icons。
                </summary>
        </member>
        <member name="P:AntDesign.Icon.Alt">
            <summary>
            Alternative text for the icon
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Role">
            <summary>
            Rotate icon with animation
            </summary>
            <default value="img" />
        </member>
        <member name="P:AntDesign.Icon.AriaLabel">
            <summary>
            Sets the value of the aria-label attribute
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Spin">
            <summary>
            Rotate icon with animation
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Icon.Rotate">
            <summary>
            Rotate by n degrees - does not work in IE9
            </summary>
            <default value="0" />
        </member>
        <member name="P:AntDesign.Icon.Type">
            <summary>
            Icon name to show
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Theme">
            <summary>
            Which theme of icon - 'fill' | 'outline' | 'twotone';
            </summary>
            <default value="IconThemeType.Outline" />
        </member>
        <member name="P:AntDesign.Icon.TwoToneColor">
            <summary>
            Specify the primary color when using the TwoTone theme. Other themes ignore this parameter.
            </summary>
        </member>
        <member name="P:AntDesign.Icon.IconFont">
            <summary>
            The type of <see cref="T:AntDesign.IconFont" />
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Width">
            <summary>
            Width of the icon
            </summary>
            <default value="1em" />
        </member>
        <member name="P:AntDesign.Icon.Height">
            <summary>
            Height of the icon
            </summary>
            <default value="1em" />
        </member>
        <member name="P:AntDesign.Icon.Fill">
            <summary>
            Fill value for the icon's SVG
            </summary>
            <default value="currentColor" />
        </member>
        <member name="P:AntDesign.Icon.TabIndex">
            <summary>
            Tabindex for the wrapping span
            </summary>
        </member>
        <member name="P:AntDesign.Icon.StopPropagation">
            <summary>
            Stop propagation of the click event on the icon
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Icon.OnClick">
            <summary>
            OnClick event for the icon
            </summary>
        </member>
        <member name="P:AntDesign.Icon.Component">
            <summary>
            The component to render as a custom icon
            </summary>
        </member>
        <member name="T:AntDesign.Image">
                <summary>
                <para>Previewable image.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When you need to display pictures.</item>
                    <item>Display when loading a large image or fault tolerant handling when loading fail.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.ImagePreviewGroup"/>
        </member>
        <member name="P:AntDesign.Image.Alt">
            <summary>
            Alternative text for image
            </summary>
        </member>
        <member name="P:AntDesign.Image.Fallback">
            <summary>
            Fallback if image fails to load
            </summary>
        </member>
        <member name="P:AntDesign.Image.Height">
            <summary>
            Height of image
            </summary>
        </member>
        <member name="P:AntDesign.Image.Width">
            <summary>
            Width of image
            </summary>
        </member>
        <member name="P:AntDesign.Image.Placeholder">
            <summary>
            Loading placeholder
            </summary>
        </member>
        <member name="P:AntDesign.Image.Preview">
            <summary>
            Enable or disable preview functionality
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Image.PreviewVisible">
            <summary>
            If the preview is visible or not
            </summary>
        </member>
        <member name="P:AntDesign.Image.Src">
            <summary>
            Image source
            </summary>
        </member>
        <member name="P:AntDesign.Image.PreviewSrc">
            <summary>
            Preview image source
            </summary>
        </member>
        <member name="P:AntDesign.Image.PreviewVisibleChanged">
            <summary>
            Callback executed when <see cref="P:AntDesign.Image.PreviewVisible"/> changes
            </summary>
        </member>
        <member name="P:AntDesign.Image.OnClick">
            <summary>
            Callback executed on image click
            </summary>
        </member>
        <member name="P:AntDesign.Image.Locale">
            <summary>
            Locale data for component
            </summary>
        </member>
        <member name="P:AntDesign.ImagePreviewGroup.ChildContent">
            <summary>
            Content for group. Typically contains <see cref="T:AntDesign.Image"/> elements.
            </summary>
        </member>
        <member name="P:AntDesign.ImagePreviewGroup.PreviewVisible">
            <summary>
            Whether to open the preview image. Two-way binding.	
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.ImagePreviewGroup.PreviewVisibleChanged">
            <summary>
            Callback executed when <see cref="P:AntDesign.ImagePreviewGroup.PreviewVisible"/> changes
            </summary>
        </member>
        <member name="T:AntDesign.InputNumber`1">
                <summary>
                <para>Enter a number within certain range with the mouse or keyboard.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>When a numeric value needs to be provided.</item>
                </list>
            
                <h3>Types Supported</h3>
            
                <para><c>sbyte</c>, <c>byte</c>, <c>short</c>, <c>ushort</c>, <c>int</c>, <c>uint</c>, <c>long</c>, <c>ulong</c>, <c>float</c>, <c>double</c>, <c>decimal</c></para>
            
                <para>Nullable types of the above types are also supported. For example, <c>ushort?</c>, <c>int?</c>, etc.</para>
                </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Precision">
            <summary>
            Number of decimal places to use for number and display
            </summary>
            <default value="0"/>
        </member>
        <member name="P:AntDesign.InputNumber`1.Formatter">
            <summary>
            Formatter from number to string for displaying
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Format">
            <summary>
            Parser to extract number from the formatter
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Parser">
            <summary>
            Specifies the value extracted from formatter
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Step">
            <summary>
            The number to which the current value is increased or decreased with the input arrows. It can be an integer or decimal.
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.DefaultValue">
            <summary>
            Initial value
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Max">
            <summary>
            Max alloable number
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Min">
            <summary>
            Min allowable number
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.MaxLength">
            <summary>
             Max length of input
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.InputNumber`1.Disabled">
            <summary>
            Disable the input or not
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.OnChange">
            <summary>
            Callback executed when the input value changes
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.OnFocus">
            <summary>
            Callback executed when the input gains focus
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.PlaceHolder">
            <summary>
            Placeholder value
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Bordered">
            <summary>
            Whether to show border
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Prefix">
            <summary>
            Setting prefix content to the input
            </summary>
        </member>
        <member name="P:AntDesign.InputNumber`1.Width">
            <summary>
            The width of the input
            </summary>
        </member>
        <member name="M:AntDesign.InputNumber`1.TryParseValueFromString(System.String,`0@,System.String@)">
            <summary>
            Always return true, if input string is invalid, result = default, if input string is null or empty, result = DefaultValue
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <param name="validationErrorMessage"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Input`1">
                <summary>
                <para>A basic widget for getting the user input is a text field. Keyboard and mouse can be used for providing or changing data.</para>
            
                <h2>When To Use</h2>
            
                <list type="bullet">
                    <item>A user input in a form field is needed.</item>
                    <item>A search input is required.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.TextArea"/>
                <seealso cref="T:AntDesign.Search"/>
                <seealso cref="T:AntDesign.InputGroup"/>
                <seealso cref="T:AntDesign.InputPassword"/>
        </member>
        <member name="P:AntDesign.Input`1.AddOnBefore">
            <summary>
            The label text displayed before (on the left side of) the input field.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AddOnAfter">
            <summary>
            The label text displayed after (on the right side of) the input field.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AllowClear">
            <summary>
            Allow to remove input content with clear icon
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.ShowClear">
            <summary>
            Overrides whether the clear icon is shown. When <see langword="null"/>, it is shown if and only if the input string is not empty.
            </summary>
            <remarks>
            Requires <see cref="P:AntDesign.Input`1.AllowClear"/> to be <see langword="true"/>, otherwise this has no effect.
            </remarks>
        </member>
        <member name="P:AntDesign.Input`1.OnClear">
            <summary>
            Callback when the content is cleared by clicking the "ClearIcon"
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AutoComplete">
            <summary>
            Controls the autocomplete attribute of the input HTML element.
            Default = true
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.AutoFocus">
            <summary>
            Autofocus on the input or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.Input`1.Bordered">
            <summary>
            Whether has border style
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.BindOnInput">
            <summary>
            Whether to change value on input
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.DebounceMilliseconds">
            <summary>
            Delays the processing of the KeyUp event until the user has stopped
            typing for a predetermined amount of time. Default is 250 ms.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.DefaultValue">
            <summary>
            The initial input content
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Disabled">
            <summary>
            Whether the input is disabled.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.InputElementSuffixClass">
            <summary>
            Css class that will be  added to input element class
            as the last class entry.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.MaxLength">
            <summary>
            Max length
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnBlur">
            <summary>
            Callback when input looses focus
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnChange">
            <summary>
            Callback when the content changes
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnFocus">
            <summary>
            Callback when input receives focus
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnInput">
            <summary>
            Callback when value is inputed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnKeyDown">
            <summary>
            Callback when a key is pressed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnKeyUp">
            <summary>
            Callback when a key is released
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnMouseUp">
            <summary>
            Callback when a mouse button is released
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.OnPressEnter">
            <summary>
            The callback function that is triggered when Enter key is pressed
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Placeholder">
            <summary>
            Provide prompt information that describes the expected value of the input field
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Prefix">
            <summary>
            The prefix icon for the Input.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.ReadOnly">
            <summary>
            When present, it specifies that an input field is read-only.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.StopPropagation">
            <summary>
            Controls onclick and blur event propagation.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Suffix">
            <summary>
            The suffix icon for the Input.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Type">
            <summary>
            The type of input, see: MDN(use `Input.TextArea` instead of type=`textarea`)
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.WrapperStyle">
            <summary>
            Set CSS style of wrapper. Is used when component has visible: Prefix/Suffix
            or has paramter set <seealso cref="P:AntDesign.Input`1.AllowClear"/> or for components: <see cref="T:AntDesign.InputPassword"/>
            and <see cref="T:AntDesign.Search"/>. In these cases, html span elements is used
            to wrap the html input element.
            <seealso cref="P:AntDesign.Input`1.WrapperStyle"/> is used on the span element.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.WrapperClass">
            <summary>
            Set Class of wrapper. Is used when component has visible: Prefix/Suffix
            or has paramter set <seealso cref="P:AntDesign.Input`1.AllowClear"/> or for components: <see cref="T:AntDesign.InputPassword"/>
            and <see cref="T:AntDesign.Search"/>. In these cases, html span elements is used
            to wrap the html input element.
            <seealso cref="P:AntDesign.Input`1.WrapperClass"/> is used on the span element.
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.ShowCount">
            <summary>
            Show count of characters in the input
            </summary>
        </member>
        <member name="P:AntDesign.Input`1.Width">
            <summary>
            The width of the input
            </summary>
        </member>
        <member name="M:AntDesign.Input`1.Focus(AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus behavior for input component with optional behaviors.
            </summary>
            <param name="behavior">enum: AntDesign.FocusBehavior</param>
            <param name="preventScroll">When true, element receiving focus will not be scrolled to.</param>
        </member>
        <member name="M:AntDesign.Input`1.Blur">
            <summary>
            Removes focus from input element.
            </summary>
        </member>
        <member name="M:AntDesign.Input`1.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Invoked when user add/remove content
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:AntDesign.InputGroup.ChildContent">
            <summary>
            Content wrapped by InputGroup.
            </summary>
        </member>
        <member name="P:AntDesign.InputGroup.Compact">
            <summary>
            Whether to use compact style or not
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.InputGroup.Size">
            <summary>
            The size of InputGroup specifies the size of the included Input fields. 
            Available: large default small
            </summary>
        </member>
        <member name="P:AntDesign.InputPassword.IconRender">
            <summary>
            Custom icon render
            </summary>
        </member>
        <member name="P:AntDesign.InputPassword.ShowPassword">
            <summary>
            Whether to show password or not
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.InputPassword.VisibilityToggle">
            <summary>
            Whether to show password visibility toggle button or not
            </summary>
            <default value="true" />
        </member>
        <member name="M:AntDesign.InputPassword.Focus(AntDesign.FocusBehavior,System.Boolean)">
            <summary>
            Focus behavior for InputPassword component with optional behaviors.
            Special behavior required for wasm.
            </summary>
            <param name="behavior">enum: AntDesign.FocusBehavior</param>
            <param name="preventScroll">When true, element receiving focus will not be scrolled to.</param>
        </member>
        <member name="P:AntDesign.Search.ClassicSearchIcon">
            <summary>
            Search input is rendered with suffix search icon, not as a button.
            Will be ignored when <see cref="P:AntDesign.Search.EnterButton"/> != false
            </summary>
        </member>
        <member name="P:AntDesign.Search.EnterButton">
            <summary>
            Whether to show an enter button after input. This property conflicts with the <see cref="P:AntDesign.Input`1.AddOnAfter"/>
            </summary>
        </member>
        <member name="P:AntDesign.Search.Loading">
            <summary>
            Search box with loading
            </summary>
        </member>
        <member name="P:AntDesign.Search.OnSearch">
            <summary>
            Callback executed when you click on the search-icon, the clear-icon or press the Enter key
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.AutoSize">
            <summary>
            Will adjust (grow or shrink) the <c>TextArea</c> according to content.
            Can work in connection with <see cref="P:AntDesign.TextArea.MaxRows"/> and <see cref="P:AntDesign.TextArea.MinRows"/>.
            Sets resize attribute of the textarea HTML element to: none.
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.DefaultToEmptyString">
            <summary>
            When true, value will be set to empty string.
            When false, value will be set to <c>null</c> when content is empty or whitespace. 
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.TextArea.MaxRows">
            <summary>
            Allow growing, but stop when visible rows = MaxRows (will not grow further).
            </summary>
            <default value="uint.MaxValue"/>
        </member>
        <member name="P:AntDesign.TextArea.MinRows">
            <summary>
            Allow shrinking, but stop when visible rows = MinRows (will not shrink further).
            </summary>
            <default value="1"/>
        </member>
        <member name="P:AntDesign.TextArea.Rows">
            <summary>
            Sets the height of the TextArea expressed in number of rows.
            </summary>
            <default value="3"/>
        </member>
        <member name="P:AntDesign.TextArea.OnResize">
            <summary>
            Callback executed when the size changes
            </summary>
        </member>
        <member name="P:AntDesign.TextArea.Value">
            <summary>
            Gets or sets the value of the TextArea.
            </summary>
        </member>
        <member name="M:AntDesign.TextArea.OnInputAsync(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:AntDesign.TextArea._isReloading">
            <summary>
            Indicates that a page is being refreshed
            </summary>
        </member>
        <member name="T:AntDesign.Layout">
                 * <summary>
                    <para>Handling the overall layout of a page.</para>
            
                    <h2>Specification</h2>
                    <h3>Size</h3>
                    <para>The first level navigation is left aligned near a logo, and the secondary menu is right aligned.</para>
                    <list type="bullet">
                        <item>Top Navigation: the height of the first level navigation <c>64px</c>, the second level navigation
                            <c>48px</c>.</item>
                        <item>Top Navigation (for landing pages): the height of the first level navigation <c>80px</c>, the second
                            level navigation <c>56px</c>.</item>
                        <item>Calculation formula of a top navigation: <c>48+8n</c>.</item>
                        <item>Calculation formula of an aside navigation: <c>200+8n</c>.</item>
                    </list>
                
                    <h3>Interaction rules</h3>
                    <list type="bullet">
                        <item>The first level navigation and the last level navigation should be distinguishable by visualization;</item>
                        <item>The current item should have the highest priority of visualization;</item>
                        <item>When the current navigation item is collapsed, the style of the current navigation item is applied to its
                            parent level;</item>
                        <item>The left side navigation bar has support for both the accordion and expanding styles; you can choose the one
                            that fits your case the best.</item>
                    </list>
                    
                    <h2>Visualization rules</h2>
                    <para>Style of a navigation should conform to its level.</para>
                    <list type="bullet">
                        <item>
                            <para><strong>Emphasis by colorblock</strong></para>
                            <para>When background color is a deep color, you can use this pattern for the parent level navigation item of
                                the current page.</para>
                        </item>
                        <item>
                            <para><strong>The highlight match stick</strong></para>
                            <para>When background color is a light color, you can use this pattern for the current page navigation item; we
                                recommend using it for the last item of the navigation path.</para>
                        </item>
                        <item>
                            <para><strong>Highlighted font</strong></para>
                            <para>From the visualization aspect, a highlighted font is stronger than colorblock; this pattern is often used
                                for the parent level of the current item.</para>
                        </item>
                        <item>
                            <para><strong>Enlarge the size of the font</strong></para>
                            <para><c>12px</c>, <c>14px</c> is a standard font size of navigations, <c>14px</c> is used
                                for the first and the second level of the navigation. You can choose an appropriate font size regarding
                                the level of your navigation.</para>
                        </item>
                    </list>
                    
                    <h2>Component Overview</h2>
                    <list type="bullet">
                        <item><c>Layout</c>: The layout wrapper, in which <c>Header</c> <c>Sider</c>
                            <c>Content</c> <c>Footer</c> or <c>Layout</c> itself can be nested, and can be placed in
                            any parent container.</item>
                        <item><c>Header</c>: The top layout with the default style, in which any element can be nested, and must be
                            placed in <c>Layout</c>.</item>
                        <item><c>Sider</c>: The sidebar with default style and basic functions, in which any element can be nested,
                            and must be placed in <c>Layout</c>.</item>
                        <item><c>Content</c>: The content layout with the default style, in which any element can be nested, and
                            must be placed in <c>Layout</c>.</item>
                        <item><c>Footer</c>: The bottom layout with the default style, in which any element can be nested, and must
                            be placed in <c>Layout</c>.</item>
                    </list>
                    <blockquote>
                        <para>Based on <c>flex layout</c>, please pay attention to the <a href="http://caniuse.com/#search=flex">compatibility</a>.</para>
                    </blockquote>
                 </summary>
                <seealso cref="T:AntDesign.Header"/>
                <seealso cref="T:AntDesign.Footer"/>
                <seealso cref="T:AntDesign.Content"/>
                <seealso cref="T:AntDesign.Sider"/>
        </member>
        <member name="P:AntDesign.Layout.ChildContent">
            <summary>
            The inner content
            </summary>
        </member>
        <member name="T:AntDesign.Sider">
            <summary>
            The sidebar of <see cref="T:AntDesign.Layout" />
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Collapsible">
            <summary>
            If sider is collapsible or not
            </summary>
        </member>
        <member name="P:AntDesign.Sider.ChildContent">
            <summary>
            Content of the sider
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Trigger">
            <summary>
            Collapse/expand UI element to allow manually changing.
            </summary>
        </member>
        <member name="P:AntDesign.Sider.NoTrigger">
            <summary>
            Remove UI trigger for collapse/expanding manually
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Breakpoint">
            <summary>
            Breakpoint at which sider will collapse by default
            </summary>
        </member>
        <member name="P:AntDesign.Sider.Theme">
            <summary>
            Color theme
            </summary>
            <default value="SiderTheme.Dark"/>
        </member>
        <member name="P:AntDesign.Sider.Width">
            <summary>
            Width of sider when expanded, in pixels
            </summary>
            <default value="200" />
        </member>
        <member name="P:AntDesign.Sider.CollapsedWidth">
            <summary>
            Width of sider when collapsed, in pixels
            </summary>
            <default value="80" />
        </member>
        <member name="P:AntDesign.Sider.Collapsed">
            <summary>
            If sider is collapsed or not
            </summary>
        </member>
        <member name="P:AntDesign.Sider.CollapsedChanged">
            <summary>
            Callback executed when sider is changes from open to collapsed, regardless of what caused it
            </summary>
        </member>
        <member name="P:AntDesign.Sider.OnCollapse">
            <summary>
            Callback executed when sider is changes from open to collapsed, regardless of what caused it
            </summary>
        </member>
        <member name="P:AntDesign.Sider.OnBreakpoint">
            <summary>
            Callback executed when window size changes the breakpoint
            </summary>
        </member>
        <member name="P:AntDesign.Sider.DefaultCollapsed">
            <summary>
            To set the initial status
            </summary>
            <default value="false" />
        </member>
        <member name="T:AntDesign.AntList`1">
                <summary>
                <para>Simple List.</para>
            
                <h2>When To Use</h2>
            
                <para>A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.</para>
                </summary>
                <seealso cref="T:AntDesign.ListItem"/>
                <seealso cref="T:AntDesign.ListItemMeta"/>
                <seealso cref="T:AntDesign.PaginationOptions"/>
                <seealso cref="T:AntDesign.ListGridType"/>
        </member>
        <member name="P:AntDesign.AntList`1.DataSource">
            <summary>
            List of items to show in list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Bordered">
            <summary>
            Put a border on the list
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.AntList`1.Header">
            <summary>
            Header content for the list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Footer">
            <summary>
            Footer content for the list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.LoadMore">
            <summary>
            Content for the end of list items for diplaying a load more
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.ItemLayout">
            <summary>
            The layout of list, default is horizontal, If a vertical list is desired, set the itemLayout property to vertical
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Loading">
            <summary>
            Show loading on the list
            </summary>
            <default value="false"/>
        </member>
        <member name="P:AntDesign.AntList`1.NoResult">
            <summary>
            Currently unused
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Size">
            <summary>
            Size of the list
            </summary>
            <default value="ListSize.Default" />
        </member>
        <member name="P:AntDesign.AntList`1.Split">
            <summary>
            Toggles rendering of the split under the list item
            </summary>
            <default value="true"/>
        </member>
        <member name="P:AntDesign.AntList`1.Grid">
            <summary>
            The grid type of list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.Pagination">
            <summary>
            Options for paginating the list
            </summary>
        </member>
        <member name="P:AntDesign.AntList`1.ChildContent">
            <summary>
            Content for the list
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Gutter">
            <summary>
            spacing between grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Column">
            <summary>
            column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Xs">
            <summary>
            &lt;576px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Sm">
            <summary>
            ≥576px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Md">
            <summary>
            ≥768px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Lg">
            <summary>
            ≥992px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Xl">
            <summary>
            ≥1200px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListGridType.Xxl">
            <summary>
            ≥1600px column of grid
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.Extra">
            <summary>
            The extra content of list item. If itemLayout is vertical, shows the content on right, otherwise shows content on the far right.
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.Actions">
            <summary>
            The actions content of list item. If itemLayout is vertical, shows the content on bottom, otherwise shows content on the far right.
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.ChildContent">
            <summary>
            Main content for the item
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.OnClick">
            <summary>
            Callback executed when the item is clicked
            </summary>
        </member>
        <member name="P:AntDesign.ListItem.NoFlex">
            <summary>
            Whether to use flex for item or not. When true, will not use flex.
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.Title">
            <summary>
            Title for the list item
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.TitleTemplate">
            <summary>
            Title content of the list item. Takes priority over <see cref="P:AntDesign.ListItemMeta.Title"/>
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.Avatar">
            <summary>
            The avatar of list item
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.AvatarTemplate">
            <summary>
            Avatar content of the list item. Takes priority over <see cref="P:AntDesign.ListItemMeta.Avatar"/>
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.Description">
            <summary>
            The description of list item
            </summary>
        </member>
        <member name="P:AntDesign.ListItemMeta.DescriptionTemplate">
            <summary>
            The description content of list item. Takes priority over <see cref="P:AntDesign.ListItemMeta.Description"/>
            </summary>
        </member>
        <member name="T:AntDesign.Mentions">
                <summary>
                <para>Mention component.</para>
            
                <h2>When To Use</h2>
            
                <para>When need to mention someone or something.</para>
                </summary>
                <seealso cref="T:AntDesign.MentionsOption" />
        </member>
        <member name="P:AntDesign.Mentions.LoadOptions">
            <summary>
            Dynamically load mention options for display when the user types a value after the @ symbol
            </summary>
        </member>
        <member name="P:AntDesign.MentionsOption.Value">
            <summary>
            The value of option.
            </summary>
        </member>
        <member name="P:AntDesign.MentionsOption.ChildContent">
            <summary>
            The content of option.
            </summary>
        </member>
        <member name="T:AntDesign.Menu">
                <summary>
                <para>A versatile menu for navigation.</para>
            
                <h2>When To Use</h2>
            
                <para>
                Navigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. 
                Ant Design offers top and side navigation options. 
                Top navigation provides all the categories and functions of the website. 
                Side navigation provides the multi-level structure of the website.
                </para>
            
                <para>See Layouts for more layouts with navigation.</para>
                </summary>
                <seealso cref="T:AntDesign.MenuItem" />
                <seealso cref="T:AntDesign.SubMenu" />
                <seealso cref="T:AntDesign.MenuItemGroup" />
                <seealso cref="T:AntDesign.MenuDivider" />
        </member>
        <member name="P:AntDesign.Menu.Theme">
            <summary>
            Color theme of the menu
            </summary>
            <default value="MenuTheme.Light" />
        </member>
        <member name="P:AntDesign.Menu.Mode">
            <summary>
            Type of menu
            </summary>
            <default value="MenuMode.Vertical" />
        </member>
        <member name="P:AntDesign.Menu.ChildContent">
            <summary>
            Content of menu. Should contain MenuItem elements.
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OnSubmenuClicked">
            <summary>
            Callback when submenu is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OnMenuItemClicked">
            <summary>
            Callback when a main menu item is clicked
            </summary>
        </member>
        <member name="P:AntDesign.Menu.Accordion">
            <summary>
            Accordion mode. When true only one submenu can be open at a time.
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Menu.Selectable">
            <summary>
            Allows selecting menu items. When it is false the menu item is not selected after OnClick.
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Menu.Multiple">
            <summary>
            Allows selection of multiple items	
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Menu.InlineCollapsed">
            <summary>
            Specifies the collapsed status when menu is inline mode	
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.Menu.InlineIndent">
            <summary>
            Indent (in pixels) of inline menu items on each level	
            </summary>
            <default value="24" />
        </member>
        <member name="P:AntDesign.Menu.AutoCloseDropdown">
            <summary>
            Close dropdown when clicking an item
            </summary>
            <default value="true" />
        </member>
        <member name="P:AntDesign.Menu.DefaultSelectedKeys">
            <summary>
            Array with the keys of default selected menu items	
            </summary>
        </member>
        <member name="P:AntDesign.Menu.DefaultOpenKeys">
            <summary>
            Array with the keys of default opened sub menus	
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OpenKeys">
            <summary>
            Array with the keys of currently opened sub-menus
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OpenKeysChanged">
            <summary>
            Callback when the open sub menus change. Passed the array of open keys.
            </summary>
        </member>
        <member name="P:AntDesign.Menu.OnOpenChange">
            <summary>
            Callback when the open sub menus change. Passed the array of open keys.
            </summary>
        </member>
        <member name="P:AntDesign.Menu.SelectedKeys">
            <summary>
            Array with the keys of currently selected menu items, set empty array to clear selection instead of null.
            </summary>
            <default value="[]" />
        </member>
        <member name="P:AntDesign.Menu.SelectedKeysChanged">
            <summary>
            Callback when the selected items change. Passed array of open keys.
            </summary>
        </member>
        <member name="P:AntDesign.Menu.TriggerSubMenuAction">
            <summary>
            Which action can trigger submenu open/close	
            </summary>
            <default value="Trigger.Hover" />
        </member>
        <member name="P:AntDesign.Menu.ShowCollapsedTooltip">
            <summary>
            Show tooltip on collapsed menu
            </summary>
        </member>
        <member name="P:AntDesign.Menu.Animation">
            <summary>
            Enable or disable animation
            </summary>
        </member>
        <member name="M:AntDesign.MenuHelper.ShouldMatch(Microsoft.AspNetCore.Components.Routing.NavLinkMatch,System.String,System.String)">
            <summary>
            Determines if the current URI should match the specified URI based on the given match criteria.
            </summary>
            <param name="match">The match criteria (Exact or Prefix).</param>
            <param name="currentUriAbsolute">The absolute URI of the current location.</param>
            <param name="hrefAbsolute">The absolute URI to match against.</param>
            <returns>True if the URIs match based on the criteria; otherwise, false.</returns>
        </member>
        <member name="M:AntDesign.MenuHelper.IsStrictlyPrefixWithSeparator(System.String,System.String)">
            <summary>
            Determines if a string value is strictly a prefix of another string, with a separator following the prefix.
            </summary>
            <param name="value">The string value to check.</param>
            <param name="prefix">The prefix to check for.</param>
            <returns>True if the value starts with the prefix followed by a separator; otherwise, false.</returns>
        </member>
        <member name="M:AntDesign.MenuHelper.EqualsHrefExactlyOrIfTrailingSlashAdded(System.String,System.String)">
            <summary>
            Compares two URIs for equality, accounting for optional trailing slashes.
            </summary>
            <param name="currentUriAbsolute">The absolute URI of the current location.</param>
            <param name="hrefAbsolute">The absolute URI to compare against.</param>
            <returns>True if the URIs are equal, or if adding a trailing slash to the current URI makes them equal; otherwise, false.</returns>
        </member>
        <member name="P:AntDesign.MenuItem.ChildContent">
            <summary>
            Display title
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.Key">
            <summary>
            Unique ID of the menu item
            </summary>
            <default value="Uniquely Generated ID" />
        </member>
        <member name="P:AntDesign.MenuItem.Disabled">
            <summary>
            Whether menu item is disabled
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.MenuItem.OnClick">
            <summary>
            Callback for when item is clicked
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.RouterLink">
            <summary>
            Href route
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.RouterMatch">
            <summary>
            Modifies the URL matching behavior for a NavLink
            </summary>
            <default value="NavLinkMatch.All" />
        </member>
        <member name="P:AntDesign.MenuItem.Title">
            <summary>
            Title of the menu item
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.Icon">
            <summary>
            Icon of the menu item
            </summary>
        </member>
        <member name="P:AntDesign.MenuItem.IconTemplate">
            <summary>
            Custom icon template, when Icon and IconTemplate are set at the same time, IconTemplate is preferred
            </summary>
        </member>
        <member name="P:AntDesign.MenuItemGroup.Title">
            <summary>
            Title of the group
            </summary>
        </member>
        <member name="P:AntDesign.MenuItemGroup.TitleTemplate">
            <summary>
            Title of the group
            </summary>
        </member>
        <member name="P:AntDesign.MenuItemGroup.ChildContent">
            <summary>
            SubMenus or MenuItems
            </summary>
        </member>
        <member name="P:AntDesign.MenuItemGroup.Key">
            <summary>
            Unique ID
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.ActiveClass">
            <summary>
            Gets or sets the CSS class name applied to the NavLink when the
            current route matches the NavLink href.
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:AntDesign.MenuLink.Match">
            <summary>
            Gets or sets a value representing the URL matching behavior.
            </summary>
        </member>
        <member name="M:AntDesign.MenuLink.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:AntDesign.MenuLink.OnParametersSet">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="M:AntDesign.MenuLink.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:AntDesign.SubMenu.Placement">
            <summary>
            Menu placement
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.PopupClassName">
            <summary>
            class name of the popup
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.Title">
            <summary>
            Title 
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.TitleTemplate">
            <summary>
            Title template
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.ChildContent">
            <summary>
            SubMenus or SubMenu items
            </summary>
        </member>
        <member name="P:AntDesign.SubMenu.Key">
            <summary>
            Unique ID of the SubMenu
            </summary>
            <default value="Uniquely Generated ID" />
        </member>
        <member name="P:AntDesign.SubMenu.Disabled">
            <summary>
            Whether SubMenu is disabled
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.SubMenu.IsOpen">
            <summary>
            Open state of the SubMenu
            </summary>
            <default value="false" />
        </member>
        <member name="P:AntDesign.SubMenu.OnTitleClick">
            <summary>
            Callback executed when the SubMenu title is clicked
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Content">
            <summary>
            Content for message
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Duration">
            <summary>
            Time before auto-dismiss, in seconds
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Icon">
            <summary>
            Icon for message
            </summary>
        </member>
        <member name="E:AntDesign.MessageConfig.OnClose">
            <summary>
            Callback executed on close of message
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Key">
            <summary>
            Unique identifier for component
            </summary>
        </member>
        <member name="P:AntDesign.MessageConfig.Type">
            <summary>
            Style of message
            </summary>
        </member>
        <member name="M:AntDesign.IMessageService.Config(AntDesign.MessageGlobalConfig)">
            <summary>
            Configure global message options
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AntDesign.IMessageService.Error(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show error message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Info(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show info message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Loading(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show loading message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Open(AntDesign.MessageConfig)">
            <summary>
            Open message with provided configuration
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Success(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show success message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IMessageService.Warning(OneOf.OneOf{System.String,Microsoft.AspNetCore.Components.RenderFragment,AntDesign.MessageConfig},System.Nullable{System.Double},System.Action)">
            <summary>
            Show warning message
            </summary>
            <param name="content"></param>
            <param name="duration"></param>
            <param name="onClose"></param>
            <returns></returns>
        </member>
        <member name="T:AntDesign.Message">
                <summary>
                <para>Display global messages as feedback in response to user operations.</para>
            
                <h2>When To Use</h2>
                <list type="bullet">
                    <item>To provide feedback such as success, warning, error etc.</item>
                    <item>A message is displayed at top and center and will be dismissed automatically, as a non-interrupting light-weighted prompt.</item>
                </list>
                </summary>
                <seealso cref="T:AntDesign.IMessageService" />
                <seealso cref="T:AntDesign.MessageConfig" />
        </member>
        <member name="P:AntDesign.MessageItem.Config">
            <summary>
            The message config
            </summary>
        </member>
        <member name="T:AntDesign.MessageService">
            <summary>
            Message Service
            </summary>
        </member>
        <member name="T:AntDesign.ButtonProps">
            <summary>
            button props
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmButtonOptions">
            <summary>
            config the confirm button's properties
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button1Props">
            <summary>
            the leftmost button properties in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button2Props">
            <summary>
            the secondary button properties in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmButtonOptions.Button3Props">
            <summary>
            the third button properties in LTR layout
            </summary>
        </member>
        <member name="T:AntDesign.ConfirmOptions">
            <summary>
            Confirm dialog options
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn1Text">
            <summary>
            OK
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn2Text">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.DefaultBtn3Text">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Locale">
            <summary>
            Confirm Locale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.ClassName">
            <summary>
            the class name of the element of ".ant-modal" 
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Visible">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Content">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Icon">
            <summary>
            Confirm left top icon
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Style">
            <summary>
            .ant-modal element's style
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.AutoFocusButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkType">
            <summary>
            set OK button type for the leftmost button: OK or Yes button
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkText">
            <summary>
            set OK button content for the leftmost button: OK or Yes button, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.CancelText">
            <summary>
            set Cancel button content for the second on the left button: Cancel or NO button, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button1Text">
            <summary>
            the leftmost button in LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button2Text">
            <summary>
            The second button on the left is in the LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button3Text">
            <summary>
            the rightmost button in LTR layout, it will override the ConfirmLocale
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OnCancel">
            <summary>
            for OK-Cancel Confirm dialog, cancel button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OnOk">
            <summary>
            for OK-Cancel Confirm dialog, OK button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkButtonProps">
            <summary>
             OK-Cancel Confirm dialog's OK button props. It is equivalent to Button1Props.
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.CancelButtonProps">
            <summary>
             OK-Cancel Confirm dialog's cancel button props. It is equivalent to Button2Props.
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button1Props">
            <summary>
            the leftmost button in LTR layout 
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button2Props">
            <summary>
            The second button on the left is in the LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.Button3Props">
            <summary>
            the rightmost button in LTR layout
            </summary>
        </member>
        <member name="P:AntDesign.ConfirmOptions.OkCancel">
            <summary>
            show Cancel button for OK-Cancel Confirm dialog
            </summary>
        </member>
        <member name="M:AntDesign.ConfirmOptions.BuildButtonsDefaultOptions">
            <summary>
            set default options for buttons
            </summary>
        </member>
        <member name="T:AntDesign.DialogOptions">
            <summary>
            dialog options
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnClosed">
            <summary>
            trigger after Dialog is closed
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.BodyStyle">
            <summary>
            ant-modal-body style
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Closable">
            <summary>
            show ant-modal-closer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Draggable">
            <summary>
            Draggable modal
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.DragInViewport">
            <summary>
            Drag and drop only within the Viewport
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.CloseIcon">
            <summary>
            closer icon RenderFragment, the default is a "X"
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ConfirmLoading">
            <summary>
            Whether to apply loading visual effect for OK button or not
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Header">
            <summary>
            modal header
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Footer">
            <summary>
            modal footer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.WrapClassName">
            <summary>
            The class name of the container of the modal dialog
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ChildContent">
            <summary>
            ChildContent
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ClassName">
            <summary>
            the class name of the element of ".ant-modal"
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnCancel">
            <summary>
            for OK-Cancel Confirm dialog, cancel button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.OnOk">
            <summary>
            for OK-Cancel Confirm dialog, OK button clicked callback.
            It's only trigger in Confirm created by ModalService mode
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.MaxBodyHeight">
            <summary>
            max modal body content height
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Maximizable">
            <summary>
            show modal maximize button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.MaximizeBtnIcon">
            <summary>
            The icon of the maximize button when the modal is in normal state
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.RestoreBtnIcon">
            <summary>
            The icon of the maximize button when the modal is maximized
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.DefaultMaximized">
            <summary>
            Maximize the dialog during component initialization, and it will ignore the Maximizable value.
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.Resizable">
            <summary>
            Resizable (Horizontal direction only)
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.DestroyOnClose">
            <summary>
            Whether to remove Modal from DOM after the Modal closed
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptions.ForceRender">
            <summary>
            Whether to force render the Modal dom before opening.   
            </summary>
        </member>
        <member name="T:AntDesign.DialogOptionsBase">
            <summary>
            ModalOptions, ConfirmOptions and DialogOptions base class
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultMaximizeIcon">
            <summary>
            default Dialog close icon
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultCloseIcon">
            <summary>
            default Dialog close icon
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultHeader">
            <summary>
            default modal header
            </summary>
        </member>
        <member name="F:AntDesign.DialogOptionsBase.DefaultFooter">
            <summary>
            default modal footer
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.PrefixCls">
            <summary>
            class name prefix
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.CancelButtonProps">
            <summary>
            Cancel Button's props
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.CancelText">
            <summary>
            modal default footer cancel text
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Centered">
            <summary>
            whether center display
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.GetContainer">
            <summary>
            get or set the modal parent DOM
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Keyboard">
            <summary>
            Whether support press esc to close
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Mask">
            <summary>
            Whether show mask or not
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.MaskClosable">
            <summary>
            Whether to close the modal dialog when the mask (area outside the modal) is clicked
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.MaskStyle">
            <summary>
            Style for dialog's mask element
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkButtonProps">
            <summary>
            Ok Button's props
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkText">
            <summary>
            Text of the OK button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.OkType">
            <summary>
            Button type of the OK button
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Title">
            <summary>
            The modal dialog's title of String
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.TitleTemplate">
            <summary>
            The modal dialog's title of RenderFragment
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Width">
            <summary>
            Width of the modal dialog
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.ZIndex">
            <summary>
            The z-index of the Modal
            </summary>
        </member>
        <member name="P:AntDesign.DialogOptionsBase.Rtl">
            <summary>
            Is RTL
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.OkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered
            点击确定按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.CancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered
            点击取消按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="M:AntDesign.IModalTemplate.OnFeedbackOkAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when OK button is triggered
            击确定按钮时调用，可以重写它来放入自己的逻辑
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntDesign.IModalTemplate.OnFeedbackCancelAsync(AntDesign.ModalClosingEventArgs)">
            <summary>
            Call back when Cancel button is triggered
            点击取消按钮时调用，可以重写它来放入自己的逻辑
            </summary>
        </member>
        <member name="P:AntDesign.ModalClosingEventArgs.Cancel">
            <summary>
            Whether the closing should be cancelled.
            Setting true if the closing should be cancelled; default is false.
            是否应取消关闭Modal。
            如果应取消关闭，请设置为 true; 默认为 false。
            </summary>
        </member>
        <member name="M:AntDesign.ModalClosingEventArgs.Reject">
            <summary>
            Reject to close the modal.
            </summary>
        </member>
        <member name="T:AntDesign.ModalOptions">
            <summary>
            The options of Modal dialog box
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.AfterClose">
            <summary>
            trigger after Dialog is closed
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Style">
            <summary>
            ant-modal style
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.BodyStyle">
            <summary>
            ant-modal-body style
            </summary>
        </member>
        <member name="P:AntDesign.ModalOptions.Closable">
            <summary>
            show ant-modal-closer 
            </summary>
        </memb